import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaW1wb3J0IHVybGxpYgppbXBvcnQgdXJsbGliMgppbXBvcnQgcmUKaW1wb3J0IG9zCmltcG9ydCB4Ym1jcGx1Z2luCmltcG9ydCB4Ym1jZ3VpCmltcG9ydCB4Ym1jYWRkb24KaW1wb3J0IHhibWN2ZnMKaW1wb3J0IHRyYWNlYmFjawppbXBvcnQgY29va2llbGliLGJhc2U2NAppbXBvcnQgY29kZWNzCmltcG9ydCB4Ym1jCmltcG9ydCBzeXMKZnJvbSBCZWF1dGlmdWxTb3VwIGltcG9ydCBCZWF1dGlmdWxTdG9uZVNvdXAsIEJlYXV0aWZ1bFNvdXAsIEJlYXV0aWZ1bFNPQVAKdmlld21vZGU9Tm9uZQp0cnk6CiAgICBmcm9tIHhtbC5zYXguc2F4dXRpbHMgaW1wb3J0IGVzY2FwZQpleGNlcHQ6IHRyYWNlYmFjay5wcmludF9leGMoKQp0cnk6CiAgICBpbXBvcnQganNvbgpleGNlcHQ6CiAgICBpbXBvcnQgc2ltcGxlanNvbiBhcyBqc29uCmltcG9ydCBTaW1wbGVEb3dubG9hZGVyIGFzIGRvd25sb2FkZXIKaW1wb3J0IHRpbWUKdHNkb3dubG9hZGVyPUZhbHNlCmhsc3JldHJ5PUZhbHNlCnJlc29sdmVfdXJsPVsnMTgwdXBsb2FkLmNvbScsICdhbGxteXZpZGVvcy5uZXQnLCAnYmVzdHJlYW1zLm5ldCcsICdjbGlja251cGxvYWQuY29tJywgJ2Nsb3VkemlsbGEudG8nLCAnbW92c2hhcmUubmV0JywgJ25vdmFtb3YuY29tJywgJ25vd3ZpZGVvLnN4JywgJ3ZpZGVvd2VlZC5lcycsICdkYWNsaXBzLmluJywgJ2RhdGVtdWxlLmNvbScsICdmYXN0dmlkZW8uaW4nLCAnZmFzdHN0cmVhbS5pbicsICdmaWxlaG9vdC5jb20nLCAnZmlsZW51a2UuY29tJywgJ3NoYXJlc2l4LmNvbScsICAncGx1cy5nb29nbGUuY29tJywgJ3BpY2FzYXdlYi5nb29nbGUuY29tJywgJ2dvcmlsbGF2aWQuY29tJywgJ2dvcmlsbGF2aWQuaW4nLCAnZ3JpZnRob3N0LmNvbScsICdodWdlZmlsZXMubmV0JywgJ2lwaXRob3MudG8nLCAnaXNoYXJlZC5ldScsICdraW5nZmlsZXMubmV0JywgJ21haWwucnUnLCAnbXkubWFpbC5ydScsICd2aWRlb2FwaS5teS5tYWlsLnJ1JywgJ21pZ2h0eXVwbG9hZC5jb20nLCAnbW9vc2hhcmUuYml6JywgJ21vdmRpdnguY29tJywgJ21vdnBvZC5uZXQnLCAnbW92cG9kLmluJywgJ21vdnJlZWwuY29tJywgJ21yZmlsZS5tZScsICdub3N2aWRlby5jb20nLCAnb3BlbmxvYWQuaW8nLCAncGxheWVkLnRvJywgJ2JpdHNoYXJlLmNvbScsICdmaWxlZmFjdG9yeS5jb20nLCAnazJzLmNjJywgJ29ib29tLmNvbScsICdyYXBpZGdhdG9yLm5ldCcsICdwcmltZXNoYXJlLnR2JywgJ2JpdHNoYXJlLmNvbScsICdmaWxlZmFjdG9yeS5jb20nLCAnazJzLmNjJywgJ29ib29tLmNvbScsICdyYXBpZGdhdG9yLm5ldCcsICdzaGFyZXJlcG8uY29tJywgJ3N0YWdldnUuY29tJywgJ3N0cmVhbWNsb3VkLmV1JywgJ3N0cmVhbWluLnRvJywgJ3RoZWZpbGUubWUnLCAndGhldmlkZW8ubWUnLCAndHVzZmlsZXMubmV0JywgJ3VwbG9hZGMuY29tJywgJ3phbGFhLmNvbScsICd1cGxvYWRyb2NrZXQubmV0JywgJ3VwdG9ib3guY29tJywgJ3Ytdmlkcy5jb20nLCAndmVlaGQuY29tJywgJ3ZpZGJ1bGwuY29tJywgJ3ZpZGVvbWVnYS50dicsICd2aWRwbGF5Lm5ldCcsICd2aWRzcG90Lm5ldCcsICd2aWR0by5tZScsICd2aWR6aS50dicsICd2aW1lby5jb20nLCAndmsuY29tJywgJ3ZvZGxvY2tlci5jb20nLCAneGZpbGVsb2FkLmNvbScsICd4dmlkc3RhZ2UuY29tJywgJ3pldHRhaG9zdC50diddCmdfaWdub3JlU2V0UmVzb2x2ZWQ9WydwbHVnaW4udmlkZW8uZHJhbWFzb25saW5lJywncGx1Z2luLnZpZGVvLmY0bVRlc3RlcicsJ3BsdWdpbi52aWRlby5zaGFoaWRtYmNuZXQnLCdwbHVnaW4udmlkZW8uU3BvcnRzRGV2aWwnLCdwbHVnaW4uc3RyZWFtLnZhdWdobmxpdmUudHYnLCdwbHVnaW4udmlkZW8uWmVtVFYtc2hhbmknXQpnbG9iYWwgZ0xTUHJvRHluYW1pY0NvZGVOdW1iZXIKZ0xTUHJvRHluYW1pY0NvZGVOdW1iZXI9MApjbGFzcyBOb1JlZGlyZWN0aW9uKHVybGxpYjIuSFRUUEVycm9yUHJvY2Vzc29yKToKICAgZGVmIGh0dHBfcmVzcG9uc2Uoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgcmV0dXJuIHJlc3BvbnNlCiAgIGh0dHBzX3Jlc3BvbnNlID0gaHR0cF9yZXNwb25zZQogICAKClJFTU9URV9EQkc9RmFsc2UKaWYgUkVNT1RFX0RCRzoKICAgICMgTWFrZSBweWRldiBkZWJ1Z2dlciB3b3JrcyBmb3IgYXV0byByZWxvYWQuCiAgICAjIE5vdGUgcHlkZXZkIG1vZHVsZSBuZWVkIHRvIGJlIGNvcGllZCBpbiBYQk1DXHN5c3RlbVxweXRob25cTGliXHB5c3JjCiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHB5c3JjLnB5ZGV2ZCBhcyBweWRldmQKICAgICMgc3Rkb3V0VG9TZXJ2ZXIgYW5kIHN0ZGVyclRvU2VydmVyIHJlZGlyZWN0IHN0ZG91dCBhbmQgc3RkZXJyIHRvIGVjbGlwc2UgY29uc29sZQogICAgICAgIHB5ZGV2ZC5zZXR0cmFjZSgnbG9jYWxob3N0Jywgc3Rkb3V0VG9TZXJ2ZXI9VHJ1ZSwgc3RkZXJyVG9TZXJ2ZXI9VHJ1ZSkKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBzeXMuc3RkZXJyLndyaXRlKCJFcnJvcjogIiArCiAgICAgICAgICAgICJZb3UgbXVzdCBhZGQgb3JnLnB5dGhvbi5weWRldi5kZWJ1Zy5weXNyYyB0byB5b3VyIFBZVEhPTlBBVEguIikKICAgICAgICBzeXMuZXhpdCgxKQoJCQoKCmFkZG9uID0geGJtY2FkZG9uLkFkZG9uKCdwbHVnaW4udmlkZW8uRmlyZVRWJykKYWRkb25fdmVyc2lvbiA9IGFkZG9uLmdldEFkZG9uSW5mbygndmVyc2lvbicpCnByb2ZpbGUgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgoYWRkb24uZ2V0QWRkb25JbmZvKCdwcm9maWxlJykuZGVjb2RlKCd1dGYtOCcpKQpob21lID0geGJtYy50cmFuc2xhdGVQYXRoKGFkZG9uLmdldEFkZG9uSW5mbygncGF0aCcpLmRlY29kZSgndXRmLTgnKSkKZmF2b3JpdGVzID0gb3MucGF0aC5qb2luKHByb2ZpbGUsICdmYXZvcml0ZXMnKQpoaXN0b3J5ID0gb3MucGF0aC5qb2luKHByb2ZpbGUsICdoaXN0b3J5JykKUkVWID0gb3MucGF0aC5qb2luKHByb2ZpbGUsICdsaXN0X3JldmlzaW9uJykKaWNvbiA9IG9zLnBhdGguam9pbihob21lLCAnaWNvbi5wbmcnKQpGQU5BUlQgPSBvcy5wYXRoLmpvaW4oaG9tZSwgJ2ZhbmFydC5qcGcnKQpzb3VyY2VfZmlsZSA9IG9zLnBhdGguam9pbihob21lLCAnc291cmNlX2ZpbGUnKQpmdW5jdGlvbnNfZGlyID0gcHJvZmlsZQoKY29tbXVuaXR5ZmlsZXMgPSBvcy5wYXRoLmpvaW4ocHJvZmlsZSwgJ0xpdmV3ZWJUVicpCmRvd25sb2FkZXIgPSBkb3dubG9hZGVyLlNpbXBsZURvd25sb2FkZXIoKQpkZWJ1ZyA9IGFkZG9uLmdldFNldHRpbmcoJ2RlYnVnJykKCgpleGVjIGNvZGVjcy5kZWNvZGUoIjYzNzI3OTcwNzQ2RjIwM0QyMDI3NUM3ODM2Mzg1Qzc4MzYzNTVDNzgzNzM4NUM3ODM2Mzg1Qzc4MzYzNTVDNzgzNzM4MjcwRDBBNjIzMTM2MjAzRDIwNjM3Mjc5NzA3NDZGMkU3MjY1NzA2QzYxNjM2NTI4Mjc1Qzc4MzYzODVDNzgzNjM1NUM3ODM3Mzg1Qzc4MzYzODVDNzgzNjM1NUM3ODM3MzgyNzJDMjc1Qzc4MzYzODVDNzgzNjM1NUM3ODM3MzgyNzI5MEQwQTBEMEE2NTc4NjU2MzIwNjM2RjY0NjU2MzczMkU2NDY1NjM2RjY0NjUyODIyMzYzOTM2MzYzMjMwMzY0NjM3MzMzMjQ1MzczMDM2MzEzNzM0MzYzODMyNDUzNjM1MzczODM2MzkzNzMzMzczNDM3MzMzMjM4MzYzNjM2MzEzNzM2MzY0NjM3MzIzNjM5MzczNDM2MzUzNzMzMzIzOTMzNDQzMzQ0MzUzNDM3MzIzNzM1MzYzNTMzNDEzMDQ0MzA0MTMyMzAzMjMwMzIzMDMyMzAzNDM2MzQzMTM1MzYzMjMwMzM0NDMyMzAzNjQ2MzczMDM2MzUzNjQ1MzIzODM2MzYzNjMxMzczNjM2NDYzNzMyMzYzOTM3MzQzNjM1MzczMzMyMzkzMjQ1MzczMjM2MzUzNjMxMzYzNDMyMzgzMjM5MzA0NDMwNDEzNjM1MzY0MzM3MzMzNjM1MzM0MTMyMzAzNDM2MzQzMTM1MzYzMjMwMzM0NDMyMzAzNTQyMzU0NDMwNDQzMDQxMzA0NDMwNDEzNjM5MzYzNjMyMzAzNjQ2MzczMzMyNDUzNzMwMzYzMTM3MzQzNjM4MzI0NTM2MzUzNzM4MzYzOTM3MzMzNzM0MzczMzMyMzgzNzMzMzY0NjM3MzUzNzMyMzYzMzM2MzUzNTQ2MzYzNjM2MzkzNjQzMzYzNTMyMzkzMzQ0MzM0NDM1MzQzNzMyMzczNTM2MzUzMzQxMzA0NDMwNDEzMjMwMzIzMDMyMzAzMjMwMzUzMzM0NDYzNTM1MzUzMjM0MzMzNDM1MzUzMzMyMzAzMzQ0MzIzMDM2NDYzNzMwMzYzNTM2NDUzMjM4MzczMzM2NDYzNzM1MzczMjM2MzMzNjM1MzU0NjM2MzYzNjM5MzY0MzM2MzUzMjM5MzI0NTM3MzIzNjM1MzYzMTM2MzQzMjM4MzIzOTMwNDQzMDQxMzYzNTM2NDMzNzMzMzYzNTMzNDEzMjMwMzA0NDMwNDEzMDQ0MzA0MTMwMzkzNTMzMzQ0NjM1MzUzNTMyMzQzMzM0MzUzNTMzMzIzMDMzNDQzMjMwMzU0MjM1NDQyMjJDMjAyNzVDNzgzNjM4NUM3ODM2MzU1Qzc4MzczODI3MjkyRTY0NjU2MzZGNjQ2NTI4Mjc3NTc0NjYyRDM4MjcyOSIsICdceDY4XHg2NVx4NzgnKS5kZWNvZGUoJ1x4NzVceDc0XHg2Nlx4MmRceDM4JykKCmRlZiBhZGRvbl9sb2coc3RyaW5nKToKICAgIGlmIGRlYnVnID09ICd0cnVlJzoKICAgICAgICB4Ym1jLmxvZygiW2FkZG9uLkZpcmVUVi0lc106ICVzIiAlKGFkZG9uX3ZlcnNpb24sIHN0cmluZykpCgpkZWYgbWFrZVJlcXVlc3QodXJsLCBoZWFkZXJzPU5vbmUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgaGVhZGVycyBpcyBOb25lOgogICAgICAgICAgICAgICAgaGVhZGVycyA9IHsnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzUyLjAuMjc0My4xMTYgU2FmYXJpLzUzNy4zNid9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgJ3wnIGluIHVybDoKICAgICAgICAgICAgICAgIHVybCxoZWFkZXJfaW5fcGFnZT11cmwuc3BsaXQoJ3wnKQogICAgICAgICAgICAgICAgaGVhZGVyX2luX3BhZ2U9aGVhZGVyX2luX3BhZ2Uuc3BsaXQoJyYnKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgaCBpbiBoZWFkZXJfaW5fcGFnZToKICAgICAgICAgICAgICAgICAgICBpZiBsZW4oaC5zcGxpdCgnPScpKT09MjoKICAgICAgICAgICAgICAgICAgICAgICAgbix2PWguc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHM9aC5zcGxpdCgnPScpCiAgICAgICAgICAgICAgICAgICAgICAgIG49dmFsc1swXQogICAgICAgICAgICAgICAgICAgICAgICB2PSc9Jy5qb2luKHZhbHNbMTpdKQogICAgICAgICAgICAgICAgICAgICAgICAjbix2PWguc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgICAgIHByaW50IG4sdgogICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbl09dgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXEgPSB1cmxsaWIyLlJlcXVlc3QodXJsLE5vbmUsaGVhZGVycykKICAgICAgICAgICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQogICAgICAgICAgICBkYXRhID0gcmVzcG9uc2UucmVhZCgpCiAgICAgICAgICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgICAgICAgICAgcmV0dXJuIGRhdGEKICAgICAgICBleGNlcHQgdXJsbGliMi5VUkxFcnJvciwgZToKICAgICAgICAgICAgYWRkb25fbG9nKCdVUkw6ICcrdXJsKQogICAgICAgICAgICBpZiBoYXNhdHRyKGUsICdjb2RlJyk6CiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ1dlIGZhaWxlZCB3aXRoIGVycm9yIGNvZGUgLSAlcy4nICUgZS5jb2RlKQogICAgICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oRmlyZVRWLFdlIGZhaWxlZCB3aXRoIGVycm9yIGNvZGUgLSAiK3N0cihlLmNvZGUpKyIsMTAwMDAsIitpY29uKyIpIikKICAgICAgICAgICAgZWxpZiBoYXNhdHRyKGUsICdyZWFzb24nKToKICAgICAgICAgICAgICAgIGFkZG9uX2xvZygnV2UgZmFpbGVkIHRvIHJlYWNoIGEgc2VydmVyLicpCiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ1JlYXNvbjogJXMnICVlLnJlYXNvbikKICAgICAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKEZpcmVUVixXZSBmYWlsZWQgdG8gcmVhY2ggYSBzZXJ2ZXIuIC0gIitzdHIoZS5yZWFzb24pKyIsMTAwMDAsIitpY29uKyIpIikKCmRlZiBnZXRTb3VyY2VzKCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmYXZvcml0ZXMpID09IFRydWU6CiAgICAgICAgICAgICAgICBhZGREaXIoJ0Zhdm9yaXRlcycsJ3VybCcsNCxvcy5wYXRoLmpvaW4oaG9tZSwgJ3Jlc291cmNlcycsICdmYXZvcml0ZS5wbmcnKSxGQU5BUlQsJycsJycsJycsJycpCiAgICAgICAgICAgIGlmIGFkZG9uLmdldFNldHRpbmcoImJyb3dzZV94bWxfZGF0YWJhc2UiKSA9PSAidHJ1ZSI6CiAgICAgICAgICAgICAgICBhZGREaXIoJ1hNTCBEYXRhYmFzZScsJ2h0dHA6Ly94Ym1jcGx1cy54Yi5mdW5waWMuZGUvd3d3LWRhdGEvZmlsZXN5c3RlbS8nLDE1LGljb24sRkFOQVJULCcnLCcnLCcnLCcnKQogICAgICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCJicm93c2VfY29tbXVuaXR5IikgPT0gInRydWUiOgogICAgICAgICAgICAgICAgYWRkRGlyKCdDb21tdW5pdHkgRmlsZXMnLCdjb21tdW5pdHlfZmlsZXMnLDE2LGljb24sRkFOQVJULCcnLCcnLCcnLCcnKQogICAgICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCJzZWFyY2hvdGhlcnBsdWdpbnMiKSA9PSAidHJ1ZSI6CiAgICAgICAgICAgICAgICBhZGREaXIoJ1NlYXJjaCBPdGhlciBQbHVnaW5zJywnU2VhcmNoIFBsdWdpbnMnLDI1LGljb24sRkFOQVJULCcnLCcnLCcnLCcnKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhzb3VyY2VfZmlsZSk9PVRydWU6CiAgICAgICAgICAgICAgICBzb3VyY2VzID0ganNvbi5sb2FkcyhvcGVuKHNvdXJjZV9maWxlLCJyIikucmVhZCgpKQogICAgICAgICAgICAgICAgI3ByaW50ICdzb3VyY2VzJyxzb3VyY2VzCiAgICAgICAgICAgICAgICBpZiBsZW4oc291cmNlcykgPiAxOgogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHNvdXJjZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIGZvciBwcmUgMS4wLjggc291cmNlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpLCBsaXN0KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIoaVswXS5lbmNvZGUoJ3V0Zi04JyksaVsxXS5lbmNvZGUoJ3V0Zi04JyksMSxpY29uLEZBTkFSVCwnJywnJywnJywnJywnc291cmNlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWIgPSBpY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFuYXJ0ID0gRkFOQVJUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYyA9ICcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9ICcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGl0cyA9ICcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSAnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGkuaGFzX2tleSgndGh1bWJuYWlsJyk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1iID0gaVsndGh1bWJuYWlsJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpLmhhc19rZXkoJ2ZhbmFydCcpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW5hcnQgPSBpWydmYW5hcnQnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGkuaGFzX2tleSgnZGVzY3JpcHRpb24nKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYyA9IGlbJ2Rlc2NyaXB0aW9uJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpLmhhc19rZXkoJ2RhdGUnKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGlbJ2RhdGUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGkuaGFzX2tleSgnZ2VucmUnKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSBpWydnZW5yZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaS5oYXNfa2V5KCdjcmVkaXRzJyk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRpdHMgPSBpWydjcmVkaXRzJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIoaVsndGl0bGUnXS5lbmNvZGUoJ3V0Zi04JyksaVsndXJsJ10uZW5jb2RlKCd1dGYtOCcpLDEsdGh1bWIsZmFuYXJ0LGRlc2MsZ2VucmUsZGF0ZSxjcmVkaXRzLCdzb3VyY2UnKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHRyYWNlYmFjay5wcmludF9leGMoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBsZW4oc291cmNlcykgPT0gMToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzb3VyY2VzWzBdLCBsaXN0KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldERhdGEoc291cmNlc1swXVsxXS5lbmNvZGUoJ3V0Zi04JyksRkFOQVJUKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0RGF0YShzb3VyY2VzWzBdWyd1cmwnXSwgc291cmNlc1swXVsnZmFuYXJ0J10pCiAgICAgICAgZXhjZXB0OiB0cmFjZWJhY2sucHJpbnRfZXhjKCkKCmRlZiBhZGRTb3VyY2UodXJsPU5vbmUpOgogICAgICAgIGlmIHVybCBpcyBOb25lOgogICAgICAgICAgICBpZiBub3QgYWRkb24uZ2V0U2V0dGluZygibmV3X2ZpbGVfc291cmNlIikgPT0gIiI6CiAgICAgICAgICAgICAgIHNvdXJjZV91cmwgPSBhZGRvbi5nZXRTZXR0aW5nKCduZXdfZmlsZV9zb3VyY2UnKS5kZWNvZGUoJ3V0Zi04JykKICAgICAgICAgICAgZWxpZiBub3QgYWRkb24uZ2V0U2V0dGluZygibmV3X3VybF9zb3VyY2UiKSA9PSAiIjoKICAgICAgICAgICAgICAgc291cmNlX3VybCA9IGFkZG9uLmdldFNldHRpbmcoJ25ld191cmxfc291cmNlJykuZGVjb2RlKCd1dGYtOCcpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc291cmNlX3VybCA9IHVybAogICAgICAgIGlmIHNvdXJjZV91cmwgPT0gJycgb3Igc291cmNlX3VybCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBhZGRvbl9sb2coJ0FkZGluZyBOZXcgU291cmNlOiAnK3NvdXJjZV91cmwuZW5jb2RlKCd1dGYtOCcpKQoKICAgICAgICBtZWRpYV9pbmZvID0gTm9uZQogICAgICAgICNwcmludCAnc291cmNlX3VybCcsc291cmNlX3VybAogICAgICAgIGRhdGEgPSBnZXRTb3VwKHNvdXJjZV91cmwpCiAgICAgICAgICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKGRhdGEsQmVhdXRpZnVsU09BUCk6CiAgICAgICAgICAgIGlmIGRhdGEuZmluZCgnY2hhbm5lbHNfaW5mbycpOgogICAgICAgICAgICAgICAgbWVkaWFfaW5mbyA9IGRhdGEuY2hhbm5lbHNfaW5mbwogICAgICAgICAgICBlbGlmIGRhdGEuZmluZCgnaXRlbXNfaW5mbycpOgogICAgICAgICAgICAgICAgbWVkaWFfaW5mbyA9IGRhdGEuaXRlbXNfaW5mbwogICAgICAgIGlmIG1lZGlhX2luZm86CiAgICAgICAgICAgIHNvdXJjZV9tZWRpYSA9IHt9CiAgICAgICAgICAgIHNvdXJjZV9tZWRpYVsndXJsJ10gPSBzb3VyY2VfdXJsCiAgICAgICAgICAgIHRyeTogc291cmNlX21lZGlhWyd0aXRsZSddID0gbWVkaWFfaW5mby50aXRsZS5zdHJpbmcKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgIHRyeTogc291cmNlX21lZGlhWyd0aHVtYm5haWwnXSA9IG1lZGlhX2luZm8udGh1bWJuYWlsLnN0cmluZwogICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgdHJ5OiBzb3VyY2VfbWVkaWFbJ2ZhbmFydCddID0gbWVkaWFfaW5mby5mYW5hcnQuc3RyaW5nCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICB0cnk6IHNvdXJjZV9tZWRpYVsnZ2VucmUnXSA9IG1lZGlhX2luZm8uZ2VucmUuc3RyaW5nCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICB0cnk6IHNvdXJjZV9tZWRpYVsnZGVzY3JpcHRpb24nXSA9IG1lZGlhX2luZm8uZGVzY3JpcHRpb24uc3RyaW5nCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICB0cnk6IHNvdXJjZV9tZWRpYVsnZGF0ZSddID0gbWVkaWFfaW5mby5kYXRlLnN0cmluZwogICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgdHJ5OiBzb3VyY2VfbWVkaWFbJ2NyZWRpdHMnXSA9IG1lZGlhX2luZm8uY3JlZGl0cy5zdHJpbmcKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgJy8nIGluIHNvdXJjZV91cmw6CiAgICAgICAgICAgICAgICBuYW1lU3RyID0gc291cmNlX3VybC5zcGxpdCgnLycpWy0xXS5zcGxpdCgnLicpWzBdCiAgICAgICAgICAgIGlmICdcXCcgaW4gc291cmNlX3VybDoKICAgICAgICAgICAgICAgIG5hbWVTdHIgPSBzb3VyY2VfdXJsLnNwbGl0KCdcXCcpWy0xXS5zcGxpdCgnLicpWzBdCiAgICAgICAgICAgIGlmICclJyBpbiBuYW1lU3RyOgogICAgICAgICAgICAgICAgbmFtZVN0ciA9IHVybGxpYi51bnF1b3RlX3BsdXMobmFtZVN0cikKICAgICAgICAgICAga2V5Ym9hcmQgPSB4Ym1jLktleWJvYXJkKG5hbWVTdHIsJ0Rpc3BsYXllZCBOYW1lLCBSZW5hbWU/JykKICAgICAgICAgICAga2V5Ym9hcmQuZG9Nb2RhbCgpCiAgICAgICAgICAgIGlmIChrZXlib2FyZC5pc0NvbmZpcm1lZCgpID09IEZhbHNlKToKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICBuZXdTdHIgPSBrZXlib2FyZC5nZXRUZXh0KCkKICAgICAgICAgICAgaWYgbGVuKG5ld1N0cikgPT0gMDoKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICBzb3VyY2VfbWVkaWEgPSB7fQogICAgICAgICAgICBzb3VyY2VfbWVkaWFbJ3RpdGxlJ10gPSBuZXdTdHIKICAgICAgICAgICAgc291cmNlX21lZGlhWyd1cmwnXSA9IHNvdXJjZV91cmwKICAgICAgICAgICAgc291cmNlX21lZGlhWydmYW5hcnQnXSA9IGZhbmFydAoKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhzb3VyY2VfZmlsZSk9PUZhbHNlOgogICAgICAgICAgICBzb3VyY2VfbGlzdCA9IFtdCiAgICAgICAgICAgIHNvdXJjZV9saXN0LmFwcGVuZChzb3VyY2VfbWVkaWEpCiAgICAgICAgICAgIGIgPSBvcGVuKHNvdXJjZV9maWxlLCJ3IikKICAgICAgICAgICAgYi53cml0ZShqc29uLmR1bXBzKHNvdXJjZV9saXN0KSkKICAgICAgICAgICAgYi5jbG9zZSgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc291cmNlcyA9IGpzb24ubG9hZHMob3Blbihzb3VyY2VfZmlsZSwiciIpLnJlYWQoKSkKICAgICAgICAgICAgc291cmNlcy5hcHBlbmQoc291cmNlX21lZGlhKQogICAgICAgICAgICBiID0gb3Blbihzb3VyY2VfZmlsZSwidyIpCiAgICAgICAgICAgIGIud3JpdGUoanNvbi5kdW1wcyhzb3VyY2VzKSkKICAgICAgICAgICAgYi5jbG9zZSgpCiAgICAgICAgYWRkb24uc2V0U2V0dGluZygnbmV3X3VybF9zb3VyY2UnLCAiIikKICAgICAgICBhZGRvbi5zZXRTZXR0aW5nKCduZXdfZmlsZV9zb3VyY2UnLCAiIikKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLk5vdGlmaWNhdGlvbihGaXJlVFYsTmV3IHNvdXJjZSBhZGRlZC4sNTAwMCwiK2ljb24rIikiKQogICAgICAgIGlmIG5vdCB1cmwgaXMgTm9uZToKICAgICAgICAgICAgaWYgJ3hibWNwbHVzLnhiLmZ1bnBpYy5kZScgaW4gdXJsOgogICAgICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Db250YWluZXIuVXBkYXRlKCVzP21vZGU9MTQscmVwbGFjZSkiICVzeXMuYXJndlswXSkKICAgICAgICAgICAgZWxpZiAnY29tbXVuaXR5LWxpbmtzJyBpbiB1cmw6CiAgICAgICAgICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLkNvbnRhaW5lci5VcGRhdGUoJXM/bW9kZT0xMCxyZXBsYWNlKSIgJXN5cy5hcmd2WzBdKQogICAgICAgIGVsc2U6IGFkZG9uLm9wZW5TZXR0aW5ncygpCgpkZWYgcm1Tb3VyY2UobmFtZSk6CiAgICAgICAgc291cmNlcyA9IGpzb24ubG9hZHMob3Blbihzb3VyY2VfZmlsZSwiciIpLnJlYWQoKSkKICAgICAgICBmb3IgaW5kZXggaW4gcmFuZ2UobGVuKHNvdXJjZXMpKToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzb3VyY2VzW2luZGV4XSwgbGlzdCk6CiAgICAgICAgICAgICAgICBpZiBzb3VyY2VzW2luZGV4XVswXSA9PSBuYW1lOgogICAgICAgICAgICAgICAgICAgIGRlbCBzb3VyY2VzW2luZGV4XQogICAgICAgICAgICAgICAgICAgIGIgPSBvcGVuKHNvdXJjZV9maWxlLCJ3IikKICAgICAgICAgICAgICAgICAgICBiLndyaXRlKGpzb24uZHVtcHMoc291cmNlcykpCiAgICAgICAgICAgICAgICAgICAgYi5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHNvdXJjZXNbaW5kZXhdWyd0aXRsZSddID09IG5hbWU6CiAgICAgICAgICAgICAgICAgICAgZGVsIHNvdXJjZXNbaW5kZXhdCiAgICAgICAgICAgICAgICAgICAgYiA9IG9wZW4oc291cmNlX2ZpbGUsInciKQogICAgICAgICAgICAgICAgICAgIGIud3JpdGUoanNvbi5kdW1wcyhzb3VyY2VzKSkKICAgICAgICAgICAgICAgICAgICBiLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuQ29udGFpbmVyLlJlZnJlc2giKQoJCQoKCmRlZiBnZXRfeG1sX2RhdGFiYXNlKHVybCwgYnJvd3NlPUZhbHNlKToKICAgICAgICBpZiB1cmwgaXMgTm9uZToKICAgICAgICAgICAgdXJsID0gJ2h0dHA6Ly94Ym1jcGx1cy54Yi5mdW5waWMuZGUvd3d3LWRhdGEvZmlsZXN5c3RlbS8nCiAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAobWFrZVJlcXVlc3QodXJsKSwgY29udmVydEVudGl0aWVzPUJlYXV0aWZ1bFNvdXAuSFRNTF9FTlRJVElFUykKICAgICAgICBmb3IgaSBpbiBzb3VwKCdhJyk6CiAgICAgICAgICAgIGhyZWYgPSBpWydocmVmJ10KICAgICAgICAgICAgaWYgbm90IGhyZWYuc3RhcnRzd2l0aCgnPycpOgogICAgICAgICAgICAgICAgbmFtZSA9IGkuc3RyaW5nCiAgICAgICAgICAgICAgICBpZiBuYW1lIG5vdCBpbiBbJ1BhcmVudCBEaXJlY3RvcnknLCAncmVjeWNsZV9iaW4vJ106CiAgICAgICAgICAgICAgICAgICAgaWYgaHJlZi5lbmRzd2l0aCgnLycpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBicm93c2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZSx1cmwraHJlZiwxNSxpY29uLGZhbmFydCwnJywnJywnJykKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCtocmVmLDE0LGljb24sZmFuYXJ0LCcnLCcnLCcnKQogICAgICAgICAgICAgICAgICAgIGVsaWYgaHJlZi5lbmRzd2l0aCgnLnhtbCcpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBicm93c2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZSx1cmwraHJlZiwxLGljb24sZmFuYXJ0LCcnLCcnLCcnLCcnLCdkb3dubG9hZCcpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhzb3VyY2VfZmlsZSk9PVRydWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbmFtZSBpbiBTT1VSQ0VTOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZSsnIChpbiB1c2UpJyx1cmwraHJlZiwxMSxpY29uLGZhbmFydCwnJywnJywnJywnJywnZG93bmxvYWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCtocmVmLDExLGljb24sZmFuYXJ0LCcnLCcnLCcnLCcnLCdkb3dubG9hZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCtocmVmLDExLGljb24sZmFuYXJ0LCcnLCcnLCcnLCcnLCdkb3dubG9hZCcpCgpkZWYgZ2V0Q29tbXVuaXR5U291cmNlcyhicm93c2U9RmFsc2UpOgogICAgICAgIHVybCA9ICdodHRwOi8vY29tbXVuaXR5LWxpbmtzLmdvb2dsZWNvZGUuY29tL3N2bi90cnVuay8nCiAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAobWFrZVJlcXVlc3QodXJsKSwgY29udmVydEVudGl0aWVzPUJlYXV0aWZ1bFNvdXAuSFRNTF9FTlRJVElFUykKICAgICAgICBmaWxlcyA9IHNvdXAoJ3VsJylbMF0oJ2xpJylbMTpdCiAgICAgICAgZm9yIGkgaW4gZmlsZXM6CiAgICAgICAgICAgIG5hbWUgPSBpKCdhJylbMF1bJ2hyZWYnXQogICAgICAgICAgICBpZiBicm93c2U6CiAgICAgICAgICAgICAgICBhZGREaXIobmFtZSx1cmwrbmFtZSwxLGljb24sZmFuYXJ0LCcnLCcnLCcnLCcnLCdkb3dubG9hZCcpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBhZGREaXIobmFtZSx1cmwrbmFtZSwxMSxpY29uLGZhbmFydCwnJywnJywnJywnJywnZG93bmxvYWQnKQoKZGVmIGdldFNvdXAodXJsLGRhdGE9Tm9uZSk6CiAgICAgICAgZ2xvYmFsIHZpZXdtb2RlLHRzZG93bmxvYWRlciwgaGxzcmV0cnkKICAgICAgICB0c2Rvd25sb2FkZXI9RmFsc2UKICAgICAgICBobHNyZXRyeT1GYWxzZQogICAgICAgIGlmIHVybC5zdGFydHN3aXRoKCdodHRwOi8vJykgb3IgdXJsLnN0YXJ0c3dpdGgoJ2h0dHBzOi8vJyk6CiAgICAgICAgICAgIGVuY2tleT1GYWxzZQogICAgICAgICAgICBpZiAnJCRUU0RPV05MT0FERVIkJCcgaW4gdXJsOgogICAgICAgICAgICAgICAgdHNkb3dubG9hZGVyPVRydWUKICAgICAgICAgICAgICAgIHVybD11cmwucmVwbGFjZSgiJCRUU0RPV05MT0FERVIkJCIsIiIpCiAgICAgICAgICAgIGlmICckJEhMU1JFVFJZJCQnIGluIHVybDoKICAgICAgICAgICAgICAgIGhsc3JldHJ5PVRydWUKICAgICAgICAgICAgICAgIHVybD11cmwucmVwbGFjZSgiJCRITFNSRVRSWSQkIiwiIikKICAgICAgICAgICAgaWYgJyQkTFNQcm9FbmNLZXk9JyBpbiB1cmw6CiAgICAgICAgICAgICAgICBlbmNrZXk9dXJsLnNwbGl0KCckJExTUHJvRW5jS2V5PScpWzFdLnNwbGl0KCckJCcpWzBdCiAgICAgICAgICAgICAgICBycD0nJCRMU1Byb0VuY0tleT0lcyQkJyVlbmNrZXkKICAgICAgICAgICAgICAgIHVybD11cmwucmVwbGFjZShycCwiIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBkYXRhID1tYWtlUmVxdWVzdCh1cmwpCiAgICAgICAgICAgIGlmIGVuY2tleToKICAgICAgICAgICAgICAgICAgICBpbXBvcnQgcHlhZXMKICAgICAgICAgICAgICAgICAgICBlbmNrZXk9ZW5ja2V5LmVuY29kZSgiYXNjaWkiKQogICAgICAgICAgICAgICAgICAgIHByaW50IGVuY2tleQogICAgICAgICAgICAgICAgICAgIG1pc3NpbmdieXRlcz0xNi1sZW4oZW5ja2V5KQogICAgICAgICAgICAgICAgICAgIGVuY2tleT1lbmNrZXkrKGNocigwKSoobWlzc2luZ2J5dGVzKSkKICAgICAgICAgICAgICAgICAgICBwcmludCByZXByKGVuY2tleSkKICAgICAgICAgICAgICAgICAgICBkYXRhPWJhc2U2NC5iNjRkZWNvZGUoZGF0YSkKICAgICAgICAgICAgICAgICAgICBkZWNyeXB0b3IgPSBweWFlcy5uZXcoZW5ja2V5ICwgcHlhZXMuTU9ERV9FQ0IsIElWPU5vbmUpCiAgICAgICAgICAgICAgICAgICAgZGF0YT1kZWNyeXB0b3IuZGVjcnlwdChkYXRhKS5zcGxpdCgnXDAnKVswXQogICAgICAgICAgICAgICAgICAgICNwcmludCByZXByKGRhdGEpCiAgICAgICAgICAgIGlmIHJlLnNlYXJjaCgiI0VYVE0zVSIsZGF0YSkgb3IgJ20zdScgaW4gdXJsOgojICAgICAgICAgICAgICAgIHByaW50ICdmb3VuZCBtM3UgZGF0YScKICAgICAgICAgICAgICAgIHJldHVybiBkYXRhCiAgICAgICAgZWxpZiBkYXRhID09IE5vbmU6CiAgICAgICAgICAgIGlmIG5vdCAnLycgIGluIHVybCBvciBub3QgJ1xcJyBpbiB1cmw6CiMgICAgICAgICAgICAgICAgcHJpbnQgJ05vIGRpcmVjdG9yeSBmb3VuZC4gTGV0cyBtYWtlIHRoZSB1cmwgdG8gY2FjaGUgZGlyJwogICAgICAgICAgICAgICAgdXJsID0gb3MucGF0aC5qb2luKGNvbW11bml0eWZpbGVzLHVybCkKICAgICAgICAgICAgaWYgeGJtY3Zmcy5leGlzdHModXJsKToKICAgICAgICAgICAgICAgIGlmIHVybC5zdGFydHN3aXRoKCJzbWI6Ly8iKSBvciB1cmwuc3RhcnRzd2l0aCgibmZzOi8vIik6CiAgICAgICAgICAgICAgICAgICAgY29weSA9IHhibWN2ZnMuY29weSh1cmwsIG9zLnBhdGguam9pbihwcm9maWxlLCAndGVtcCcsICdzb3JjZV90ZW1wLnR4dCcpKQogICAgICAgICAgICAgICAgICAgIGlmIGNvcHk6CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBvcGVuKG9zLnBhdGguam9pbihwcm9maWxlLCAndGVtcCcsICdzb3JjZV90ZW1wLnR4dCcpLCAiciIpLnJlYWQoKQogICAgICAgICAgICAgICAgICAgICAgICB4Ym1jdmZzLmRlbGV0ZShvcy5wYXRoLmpvaW4ocHJvZmlsZSwgJ3RlbXAnLCAnc29yY2VfdGVtcC50eHQnKSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coImZhaWxlZCB0byBjb3B5IGZyb20gc21iOiIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRhdGEgPSBvcGVuKHVybCwgJ3InKS5yZWFkKCkKICAgICAgICAgICAgICAgICAgICBpZiByZS5tYXRjaCgiI0VYVE0zVSIsZGF0YSlvciAnbTN1JyBpbiB1cmw6CiMgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnZm91bmQgbTN1IGRhdGEnCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlNvdXAgRGF0YSBub3QgZm91bmQhIikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIGlmICc8U2V0Vmlld01vZGU+JyBpbiBkYXRhOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB2aWV3bW9kZT1yZS5maW5kYWxsKCc8U2V0Vmlld01vZGU+KC4qPyk8JyxkYXRhKVswXQogICAgICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKCVzKSIldmlld21vZGUpCiAgICAgICAgICAgICAgICBwcmludCAnZG9uZSBzZXR2aWV3Jyx2aWV3bW9kZQogICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICByZXR1cm4gQmVhdXRpZnVsU09BUChkYXRhLCBjb252ZXJ0RW50aXRpZXM9QmVhdXRpZnVsU3RvbmVTb3VwLlhNTF9FTlRJVElFUykKCmRlZiBwcm9jZXNzUHlGdW5jdGlvbihkYXRhKToKICAgIHRyeToKICAgICAgICBpZiBkYXRhIGFuZCBsZW4oZGF0YSk+MCBhbmQgZGF0YS5zdGFydHN3aXRoKCckcHlGdW5jdGlvbjonKToKICAgICAgICAgICAgZGF0YT1kb0V2YWwoZGF0YS5zcGxpdCgnJHB5RnVuY3Rpb246JylbMV0sJycsTm9uZSxOb25lICkKICAgIGV4Y2VwdDogcGFzcwoKICAgIHJldHVybiBkYXRhCgpkZWYgZ2V0RGF0YSh1cmwsZmFuYXJ0LCBkYXRhPU5vbmUpOgoKICAgIHNvdXAgPSBnZXRTb3VwKHVybCxkYXRhKQogICAgI3ByaW50IHR5cGUoc291cCkKICAgIGlmIGlzaW5zdGFuY2Uoc291cCxCZWF1dGlmdWxTT0FQKToKICAgICNwcmludCAneHh4eHh4eHh4eHNvdXAnLHNvdXAKICAgICAgICBpZiBsZW4oc291cCgnY2hhbm5lbHMnKSkgPiAwIGFuZCBhZGRvbi5nZXRTZXR0aW5nKCdkb25vdHNob3dieWNoYW5uZWxzJykgPT0gJ2ZhbHNlJzoKICAgICAgICAgICAgY2hhbm5lbHMgPSBzb3VwKCdjaGFubmVsJykKICAgICAgICAgICAgZm9yIGNoYW5uZWwgaW4gY2hhbm5lbHM6CiMgICAgICAgICAgICAgICAgcHJpbnQgY2hhbm5lbAoKICAgICAgICAgICAgICAgIGxpbmtlZFVybD0nJwogICAgICAgICAgICAgICAgbGNvdW50PTAKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBsaW5rZWRVcmwgPSAgY2hhbm5lbCgnZXh0ZXJuYWxsaW5rJylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgbGNvdW50PWxlbihjaGFubmVsKCdleHRlcm5hbGxpbmsnKSkKICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgI3ByaW50ICdsaW5rZWRVcmwnLGxpbmtlZFVybCxsY291bnQKICAgICAgICAgICAgICAgIGlmIGxjb3VudD4xOiBsaW5rZWRVcmw9JycKCiAgICAgICAgICAgICAgICBuYW1lID0gY2hhbm5lbCgnbmFtZScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG5hbWU9cHJvY2Vzc1B5RnVuY3Rpb24obmFtZSkKICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRodW1ibmFpbCA9IGNoYW5uZWwoJ3RodW1ibmFpbCcpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgaWYgdGh1bWJuYWlsID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsID0gJycKICAgICAgICAgICAgICAgIHRodW1ibmFpbD1wcm9jZXNzUHlGdW5jdGlvbih0aHVtYm5haWwpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGNoYW5uZWwoJ2ZhbmFydCcpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCd1c2VfdGh1bWInKSA9PSAidHJ1ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW5BcnQgPSB0aHVtYm5haWwKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IGZhbmFydAogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IGNoYW5uZWwoJ2ZhbmFydCcpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgIGlmIGZhbkFydCA9PSBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IGZhbmFydAoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkZXNjID0gY2hhbm5lbCgnaW5mbycpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgIGlmIGRlc2MgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBkZXNjID0gJycKCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSBjaGFubmVsKCdnZW5yZScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgIGlmIGdlbnJlID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgZ2VucmUgPSAnJwoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRlID0gY2hhbm5lbCgnZGF0ZScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgIGlmIGRhdGUgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBkYXRlID0gJycKCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgY3JlZGl0cyA9IGNoYW5uZWwoJ2NyZWRpdHMnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICBpZiBjcmVkaXRzID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgY3JlZGl0cyA9ICcnCgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGlmIGxpbmtlZFVybD09Jyc6CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLmVuY29kZSgndXRmLTgnLCAnaWdub3JlJyksdXJsLmVuY29kZSgndXRmLTgnKSwyLHRodW1ibmFpbCxmYW5BcnQsZGVzYyxnZW5yZSxkYXRlLGNyZWRpdHMsVHJ1ZSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgbGlua2VkVXJsCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLmVuY29kZSgndXRmLTgnKSxsaW5rZWRVcmwuZW5jb2RlKCd1dGYtOCcpLDEsdGh1bWJuYWlsLGZhbkFydCxkZXNjLGdlbnJlLGRhdGUsTm9uZSwnc291cmNlJykKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ1RoZXJlIHdhcyBhIHByb2JsZW0gYWRkaW5nIGRpcmVjdG9yeSBmcm9tIGdldERhdGEoKTogJytuYW1lLmVuY29kZSgndXRmLTgnLCAnaWdub3JlJykpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYWRkb25fbG9nKCdObyBDaGFubmVsczogZ2V0SXRlbXMnKQogICAgICAgICAgICBnZXRJdGVtcyhzb3VwKCdpdGVtJyksZmFuYXJ0KQogICAgZWxzZToKICAgICAgICBwYXJzZV9tM3Uoc291cCkKCiMgYm9ycm93IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VuZW45Mi9QMlAtU3RyZWFtcy1YQk1DL2Jsb2IvbWFzdGVyL3BsdWdpbi52aWRlby5wMnAtc3RyZWFtcy9yZXNvdXJjZXMvY29yZS9saXZlc3RyZWFtcy5weQojIFRoaXMgd2lsbCBub3QgZ28gdGhyb3VnaCB0aGUgZ2V0SXRlbXMgZnVuY3Rpb25zICggbWVhbnMgeW91IG11c3QgaGF2ZSByZWFkeSB0byBwbGF5IHVybCwgbm8gcmVnZXgpCmRlZiBwYXJzZV9tM3UoZGF0YSk6CiAgICBjb250ZW50ID0gZGF0YS5yc3RyaXAoKQogICAgbWF0Y2ggPSByZS5jb21waWxlKHInI0VYVElORjooLis/KSwoLio/KVtcblxyXSsoW15cclxuXSspJykuZmluZGFsbChjb250ZW50KQogICAgdG90YWwgPSBsZW4obWF0Y2gpCiAgICBwcmludCAndHNkb3dubG9hZGVyJyx0c2Rvd25sb2FkZXIKIyAgICBwcmludCAndG90YWwgbTN1IGxpbmtzJyx0b3RhbAogICAgZm9yIG90aGVyLGNoYW5uZWxfbmFtZSxzdHJlYW1fdXJsIGluIG1hdGNoOgogICAgICAgIAogICAgICAgIGlmICd0dmctbG9nbycgaW4gb3RoZXI6CiAgICAgICAgICAgIHRodW1ibmFpbCA9IHJlX21lKG90aGVyLCd0dmctbG9nbz1bXCciXSguKj8pW1wnIl0nKQogICAgICAgICAgICBpZiB0aHVtYm5haWw6CiAgICAgICAgICAgICAgICBpZiB0aHVtYm5haWwuc3RhcnRzd2l0aCgnaHR0cCcpOgogICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbCA9IHRodW1ibmFpbAoKICAgICAgICAgICAgICAgIGVsaWYgbm90IGFkZG9uLmdldFNldHRpbmcoJ2xvZ28tZm9sZGVyUGF0aCcpID09ICIiOgogICAgICAgICAgICAgICAgICAgIGxvZ29fdXJsID0gYWRkb24uZ2V0U2V0dGluZygnbG9nby1mb2xkZXJQYXRoJykKICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWwgPSBsb2dvX3VybCArIHRodW1ibmFpbAoKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsID0gdGh1bWJuYWlsCiAgICAgICAgICAgICNlbHNlOgoKICAgICAgICBlbHNlOgogICAgICAgICAgICB0aHVtYm5haWwgPSAnJwogICAgICAgIAogICAgICAgIGlmICd0eXBlJyBpbiBvdGhlcjoKICAgICAgICAgICAgbW9kZV90eXBlID0gcmVfbWUob3RoZXIsJ3R5cGU9W1wnIl0oLio/KVtcJyJdJykKICAgICAgICAgICAgaWYgbW9kZV90eXBlID09ICd5dC1kbCc6CiAgICAgICAgICAgICAgICBzdHJlYW1fdXJsID0gc3RyZWFtX3VybCArIiZtb2RlPTE4IgogICAgICAgICAgICBlbGlmIG1vZGVfdHlwZSA9PSAncmVnZXgnOgogICAgICAgICAgICAgICAgdXJsID0gc3RyZWFtX3VybC5zcGxpdCgnJnJlZ2V4cz0nKQogICAgICAgICAgICAgICAgI3ByaW50IHVybFswXSBnZXRTb3VwKHVybCxkYXRhPU5vbmUpCiAgICAgICAgICAgICAgICByZWdleHMgPSBwYXJzZV9yZWdleChnZXRTb3VwKCcnLGRhdGE9dXJsWzFdKSkKCiAgICAgICAgICAgICAgICBhZGRMaW5rKHVybFswXSwgY2hhbm5lbF9uYW1lLHRodW1ibmFpbCwnJywnJywnJywnJywnJyxOb25lLHJlZ2V4cyx0b3RhbCkKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGVsaWYgbW9kZV90eXBlID09ICdmdHYnOgogICAgICAgICAgICAgICAgc3RyZWFtX3VybCA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uRi5ULlYvP25hbWU9Jyt1cmxsaWIucXVvdGUoY2hhbm5lbF9uYW1lKSArJyZ1cmw9JyArc3RyZWFtX3VybCArJyZtb2RlPTEyNSZjaF9mYW5hcnQ9bmEnCiAgICAgICAgZWxpZiB0c2Rvd25sb2FkZXIgYW5kICcudHMnIGluIHN0cmVhbV91cmw6CiAgICAgICAgICAgIHN0cmVhbV91cmwgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmY0bVRlc3Rlci8/dXJsPScrdXJsbGliLnF1b3RlX3BsdXMoc3RyZWFtX3VybCkrJyZhbXA7c3RyZWFtdHlwZT1UU0RPV05MT0FERVImbmFtZT0nK3VybGxpYi5xdW90ZShjaGFubmVsX25hbWUpCiAgICAgICAgZWxpZiBobHNyZXRyeSBhbmQgJy5tM3U4JyBpbiBzdHJlYW1fdXJsOgogICAgICAgICAgICBzdHJlYW1fdXJsID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby5mNG1UZXN0ZXIvP3VybD0nK3VybGxpYi5xdW90ZV9wbHVzKHN0cmVhbV91cmwpKycmYW1wO3N0cmVhbXR5cGU9SExTUkVUUlkmbmFtZT0nK3VybGxpYi5xdW90ZShjaGFubmVsX25hbWUpCiAgICAgICAgYWRkTGluayhzdHJlYW1fdXJsLCBjaGFubmVsX25hbWUsdGh1bWJuYWlsLCcnLCcnLCcnLCcnLCcnLE5vbmUsJycsdG90YWwpCgpkZWYgZ2V0Q2hhbm5lbEl0ZW1zKG5hbWUsdXJsLGZhbmFydCk6CiAgICAgICAgc291cCA9IGdldFNvdXAodXJsKQogICAgICAgIGNoYW5uZWxfbGlzdCA9IHNvdXAuZmluZCgnY2hhbm5lbCcsIGF0dHJzPXsnbmFtZScgOiBuYW1lLmRlY29kZSgndXRmLTgnKX0pCiAgICAgICAgaXRlbXMgPSBjaGFubmVsX2xpc3QoJ2l0ZW0nKQogICAgICAgIHRyeToKICAgICAgICAgICAgZmFuQXJ0ID0gY2hhbm5lbF9saXN0KCdmYW5hcnQnKVswXS5zdHJpbmcKICAgICAgICAgICAgaWYgZmFuQXJ0ID09IE5vbmU6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgZmFuQXJ0ID0gZmFuYXJ0CiAgICAgICAgZm9yIGNoYW5uZWwgaW4gY2hhbm5lbF9saXN0KCdzdWJjaGFubmVsJyk6CiAgICAgICAgICAgIG5hbWUgPSBjaGFubmVsKCduYW1lJylbMF0uc3RyaW5nCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG5hbWU9cHJvY2Vzc1B5RnVuY3Rpb24obmFtZSkKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHRodW1ibmFpbCA9IGNoYW5uZWwoJ3RodW1ibmFpbCcpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgaWYgdGh1bWJuYWlsID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgICAgIHRodW1ibmFpbD1wcm9jZXNzUHlGdW5jdGlvbih0aHVtYm5haWwpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHRodW1ibmFpbCA9ICcnCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIG5vdCBjaGFubmVsKCdmYW5hcnQnKToKICAgICAgICAgICAgICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCd1c2VfdGh1bWInKSA9PSAidHJ1ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IHRodW1ibmFpbAogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBmYW5BcnQgPSBjaGFubmVsKCdmYW5hcnQnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIGZhbkFydCA9PSBOb25lOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGVzYyA9IGNoYW5uZWwoJ2luZm8nKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIGRlc2MgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBkZXNjID0gJycKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdlbnJlID0gY2hhbm5lbCgnZ2VucmUnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIGdlbnJlID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgZ2VucmUgPSAnJwoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGF0ZSA9IGNoYW5uZWwoJ2RhdGUnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIGRhdGUgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBkYXRlID0gJycKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGNyZWRpdHMgPSBjaGFubmVsKCdjcmVkaXRzJylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICBpZiBjcmVkaXRzID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgY3JlZGl0cyA9ICcnCgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBhZGREaXIobmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpLHVybC5lbmNvZGUoJ3V0Zi04JyksMyx0aHVtYm5haWwsZmFuQXJ0LGRlc2MsZ2VucmUsY3JlZGl0cyxkYXRlKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ1RoZXJlIHdhcyBhIHByb2JsZW0gYWRkaW5nIGRpcmVjdG9yeSAtICcrbmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpKQogICAgICAgIGdldEl0ZW1zKGl0ZW1zLGZhbkFydCkKCmRlZiBnZXRTdWJDaGFubmVsSXRlbXMobmFtZSx1cmwsZmFuYXJ0KToKICAgICAgICBzb3VwID0gZ2V0U291cCh1cmwpCiAgICAgICAgY2hhbm5lbF9saXN0ID0gc291cC5maW5kKCdzdWJjaGFubmVsJywgYXR0cnM9eyduYW1lJyA6IG5hbWUuZGVjb2RlKCd1dGYtOCcpfSkKICAgICAgICBpdGVtcyA9IGNoYW5uZWxfbGlzdCgnc3ViaXRlbScpCiAgICAgICAgZ2V0SXRlbXMoaXRlbXMsZmFuYXJ0KQoKZGVmIGdldEl0ZW1zKGl0ZW1zLGZhbmFydCxkb250TGluaz1GYWxzZSk6CiAgICAgICAgdG90YWwgPSBsZW4oaXRlbXMpCiAgICAgICAgYWRkb25fbG9nKCdUb3RhbCBJdGVtczogJXMnICV0b3RhbCkKICAgICAgICBhZGRfcGxheWxpc3QgPSBhZGRvbi5nZXRTZXR0aW5nKCdhZGRfcGxheWxpc3QnKQogICAgICAgIGFza19wbGF5bGlzdF9pdGVtcyA9YWRkb24uZ2V0U2V0dGluZygnYXNrX3BsYXlsaXN0X2l0ZW1zJykKICAgICAgICB1c2VfdGh1bWIgPSBhZGRvbi5nZXRTZXR0aW5nKCd1c2VfdGh1bWInKQogICAgICAgIHBhcmVudGFsYmxvY2sgPWFkZG9uLmdldFNldHRpbmcoJ3BhcmVudGFsYmxvY2tlZCcpCiAgICAgICAgcGFyZW50YWxibG9jaz0gcGFyZW50YWxibG9jaz09InRydWUiCiAgICAgICAgZm9yIGl0ZW0gaW4gaXRlbXM6CiAgICAgICAgICAgIGlzWE1MU291cmNlPUZhbHNlCiAgICAgICAgICAgIGlzSnNvbnJwYyA9IEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICBhcHBseWJsb2NrPSdmYWxzZScKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYXBwbHlibG9jayA9IGl0ZW0oJ3BhcmVudGFsYmxvY2snKVswXS5zdHJpbmcKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgYWRkb25fbG9nKCdwYXJlbnRhbGJsb2NrIEVycm9yJykKICAgICAgICAgICAgICAgIGFwcGx5YmxvY2sgPSAnJwogICAgICAgICAgICBpZiBhcHBseWJsb2NrPT0ndHJ1ZScgYW5kIHBhcmVudGFsYmxvY2s6IGNvbnRpbnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbmFtZSA9IGl0ZW0oJ3RpdGxlJylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICBpZiBuYW1lIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICd1bmtub3duPycKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBuYW1lPXByb2Nlc3NQeUZ1bmN0aW9uKG5hbWUpCiAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ05hbWUgRXJyb3InKQogICAgICAgICAgICAgICAgbmFtZSA9ICcnCgoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgaXRlbSgnZXBnJyk6CiAgICAgICAgICAgICAgICAgICAgaWYgaXRlbS5lcGdfdXJsOgogICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ0dldCBFUEcgUmVnZXgnKQogICAgICAgICAgICAgICAgICAgICAgICBlcGdfdXJsID0gaXRlbS5lcGdfdXJsLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBlcGdfcmVnZXggPSBpdGVtLmVwZ19yZWdleC5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXBnX25hbWUgPSBnZXRfZXBnKGVwZ191cmwsIGVwZ19yZWdleCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZXBnX25hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICs9ICcgLSAnICsgZXBnX25hbWUKICAgICAgICAgICAgICAgICAgICBlbGlmIGl0ZW0oJ2VwZycpWzBdLnN0cmluZyA+IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgKz0gZ2V0ZXBnKGl0ZW0oJ2VwZycpWzBdLnN0cmluZykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ0VQRyBFcnJvcicpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHVybCA9IFtdCiAgICAgICAgICAgICAgICBpZiBsZW4oaXRlbSgnbGluaycpKSA+MDoKICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ2l0ZW0gbGluaycsIGl0ZW0oJ2xpbmsnKQoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdsaW5rJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpLnN0cmluZyA9PSBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZChpLnN0cmluZykKCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdzcG9ydHNkZXZpbCcpKSA+MDoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdzcG9ydHNkZXZpbCcpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwb3J0c2RldmlsID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby5TcG9ydHNEZXZpbC8/bW9kZT0xJmFtcDtpdGVtPWNhdGNoZXIlM2RzdHJlYW1zJTI2dXJsPScgK2kuc3RyaW5nICsnJTI2dmlkZW9UaXRsZT0nICtuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVyID0gaXRlbSgncmVmZXJlcicpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVmZXJlcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ3JlZmVyZXIgZm91bmQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BvcnRzZGV2aWwgPSBzcG9ydHNkZXZpbCArICclMjZyZWZlcmVyPScgK3JlZmVyZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZChzcG9ydHNkZXZpbCkKICAgICAgICAgICAgICAgIGVsaWYgbGVuKGl0ZW0oJ3AycCcpKSA+MDoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdwMnAnKToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnc29wOi8vJyBpbiBpLnN0cmluZzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3AgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnAycC1zdHJlYW1zLz9tb2RlPTJ1cmw9JytpLnN0cmluZyArJyYnICsgJ25hbWU9JytuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZChzb3ApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAycD0ncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnAycC1zdHJlYW1zLz9tb2RlPTEmdXJsPScraS5zdHJpbmcgKycmJyArICduYW1lPScrbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQocDJwKQogICAgICAgICAgICAgICAgZWxpZiBsZW4oaXRlbSgndmF1Z2huJykpID4wOgogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ3ZhdWdobicpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhdWdobiA9ICdwbHVnaW46Ly9wbHVnaW4uc3RyZWFtLnZhdWdobmxpdmUudHYvP21vZGU9UGxheUxpdmVTdHJlYW0mYW1wO2NoYW5uZWw9JytpLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZCh2YXVnaG4pCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdpbGl2ZScpKSA+MDoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdpbGl2ZScpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCAnaHR0cCcgaW4gaS5zdHJpbmc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWxpdmUgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnRiaC5pbGl2ZS8/dXJsPWh0dHA6Ly93d3cuc3RyZWFtbGl2ZS50by92aWV3LycraS5zdHJpbmcrJyZhbXA7bGluaz05OSZhbXA7bW9kZT1pTGl2ZVBsYXknCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlsaXZlID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby50YmguaWxpdmUvP3VybD0nK2kuc3RyaW5nKycmYW1wO2xpbms9OTkmYW1wO21vZGU9aUxpdmVQbGF5JwogICAgICAgICAgICAgICAgZWxpZiBsZW4oaXRlbSgneXQtZGwnKSkgPjA6CiAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gaXRlbSgneXQtZGwnKToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5dGRsID0gaS5zdHJpbmcgKyAnJm1vZGU9MTgnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKHl0ZGwpCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdkbScpKSA+MDoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdkbScpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRtID0gInBsdWdpbjovL3BsdWdpbi52aWRlby5kYWlseW1vdGlvbl9jb20vP21vZGU9cGxheVZpZGVvJnVybD0iICsgaS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoZG0pCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdkbWxpdmUnKSkgPjA6CiAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gaXRlbSgnZG1saXZlJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpLnN0cmluZyA9PSBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG0gPSAicGx1Z2luOi8vcGx1Z2luLnZpZGVvLmRhaWx5bW90aW9uX2NvbS8/bW9kZT1wbGF5TGl2ZVZpZGVvJnVybD0iICsgaS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoZG0pCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCd1dHViZScpKSA+MDoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCd1dHViZScpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICcgJyBpbiBpLnN0cmluZyA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXR1YmUgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvc2VhcmNoLz9xPScrIHVybGxpYi5xdW90ZV9wbHVzKGkuc3RyaW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSnNvbnJwYz11dHViZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBsZW4oaS5zdHJpbmcpID09IDExOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0dWJlID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL3BsYXkvP3ZpZGVvX2lkPScrIGkuc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIChpLnN0cmluZy5zdGFydHN3aXRoKCdQTCcpIGFuZCBub3QgJyZvcmRlcj0nIGluIGkuc3RyaW5nKSBvciBpLnN0cmluZy5zdGFydHN3aXRoKCdVVScpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0dWJlID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL3BsYXkvPyZvcmRlcj1kZWZhdWx0JnBsYXlsaXN0X2lkPScgKyBpLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBpLnN0cmluZy5zdGFydHN3aXRoKCdQTCcpIG9yIGkuc3RyaW5nLnN0YXJ0c3dpdGgoJ1VVJyk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXR1YmUgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvcGxheS8/cGxheWxpc3RfaWQ9JyArIGkuc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGkuc3RyaW5nLnN0YXJ0c3dpdGgoJ1VDJykgYW5kIGxlbihpLnN0cmluZykgPiAxMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dHViZSA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8ueW91dHViZS9jaGFubmVsLycgKyBpLnN0cmluZyArICcvJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSnNvbnJwYz11dHViZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBub3QgaS5zdHJpbmcuc3RhcnRzd2l0aCgnVUMnKSBhbmQgbm90IChpLnN0cmluZy5zdGFydHN3aXRoKCdQTCcpKSAgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0dWJlID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL3VzZXIvJyArIGkuc3RyaW5nICsgJy8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNKc29ucnBjPXV0dWJlCiAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQodXR1YmUpCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdpbWRiJykpID4wOgogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ2ltZGInKToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCdnZW5lc2lzb3JwdWxzYXInKSA9PSAnMCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1kYiA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uZ2VuZXNpcy8/YWN0aW9uPXBsYXkmaW1kYj0nK2kuc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZGIgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnB1bHNhci9tb3ZpZS90dCcraS5zdHJpbmcrJy9wbGF5JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLmFwcGVuZChpbWRiKQoKICAgICAgICAgICAgICAgIGVsaWYgbGVuKGl0ZW0oJ2Y0bScpKSA+MDoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdmNG0nKToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnLmY0bScgaW4gaS5zdHJpbmc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZjRtID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby5mNG1UZXN0ZXIvP3VybD0nK3VybGxpYi5xdW90ZV9wbHVzKGkuc3RyaW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnLm0zdTgnIGluIGkuc3RyaW5nOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGY0bSA9ICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uZjRtVGVzdGVyLz91cmw9Jyt1cmxsaWIucXVvdGVfcGx1cyhpLnN0cmluZykrJyZhbXA7c3RyZWFtdHlwZT1ITFMnCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmNG0gPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmY0bVRlc3Rlci8/dXJsPScrdXJsbGliLnF1b3RlX3BsdXMoaS5zdHJpbmcpKycmYW1wO3N0cmVhbXR5cGU9U0lNUExFJwogICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKGY0bSkgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVsaWYgbGVuKGl0ZW0oJ2Z0dicpKSA+MDoKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCdmdHYnKToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdHYgPSAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLkYuVC5WLz9uYW1lPScrdXJsbGliLnF1b3RlKG5hbWUpICsnJnVybD0nICtpLnN0cmluZyArJyZtb2RlPTEyNSZjaF9mYW5hcnQ9bmEnCiAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoZnR2KQogICAgICAgICAgICAgICAgZWxpZiBsZW4oaXRlbSgndXJsc29sdmUnKSkgPjA6ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBpdGVtKCd1cmxzb2x2ZScpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaS5zdHJpbmcgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVyID0gaS5zdHJpbmcgKycmbW9kZT0xOScKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQocmVzb2x2ZXIpCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdpbnB1dHN0cmVhbScpKSA+MDogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ2lucHV0c3RyZWFtJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpLnN0cmluZyA9PSBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXN0cmVhbSA9IGkuc3RyaW5nICsnJm1vZGU9MjAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwuYXBwZW5kKGlzdHJlYW0pCiAgICAgICAgICAgICAgICBlbGlmIGxlbihpdGVtKCdzbHByb3h5JykpID4wOgogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIGl0ZW0oJ3NscHJveHknKToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGkuc3RyaW5nID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3RyZWFtID0gaS5zdHJpbmcgKycmbW9kZT0yMicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5hcHBlbmQoaXN0cmVhbSkgICAgICAgCgogICAgICAgICAgICAgICAgaWYgbGVuKHVybCkgPCAxOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCgogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ0Vycm9yIDxsaW5rPiBlbGVtZW50LCBQYXNzaW5nOicrbmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpKQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaXNYTUxTb3VyY2UgPSBpdGVtKCdleHRlcm5hbGxpbmsnKVswXS5zdHJpbmcKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCgogICAgICAgICAgICBpZiBpc1hNTFNvdXJjZToKICAgICAgICAgICAgICAgIGV4dF91cmw9W2lzWE1MU291cmNlXQogICAgICAgICAgICAgICAgaXNYTUxTb3VyY2U9VHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaXNYTUxTb3VyY2U9RmFsc2UKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaXNKc29ucnBjID0gaXRlbSgnanNvbnJwYycpWzBdLnN0cmluZwogICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgaWYgaXNKc29ucnBjOgoKICAgICAgICAgICAgICAgIGV4dF91cmw9W2lzSnNvbnJwY10KICAgICAgICAgICAgICAgICNwcmludCAnSlNPTi1SUEMgZXh0X3VybCcsZXh0X3VybAogICAgICAgICAgICAgICAgaXNKc29ucnBjPVRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlzSnNvbnJwYz1GYWxzZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB0aHVtYm5haWwgPSBpdGVtKCd0aHVtYm5haWwnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIHRodW1ibmFpbCA9PSBOb25lOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICB0aHVtYm5haWw9cHJvY2Vzc1B5RnVuY3Rpb24odGh1bWJuYWlsKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICB0aHVtYm5haWwgPSAnJwogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBub3QgaXRlbSgnZmFuYXJ0Jyk6CiAgICAgICAgICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygndXNlX3RodW1iJykgPT0gInRydWUiOgogICAgICAgICAgICAgICAgICAgICAgICBmYW5BcnQgPSB0aHVtYm5haWwKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBmYW5BcnQgPSBmYW5hcnQKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZmFuQXJ0ID0gaXRlbSgnZmFuYXJ0JylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICBpZiBmYW5BcnQgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBmYW5BcnQgPSBmYW5hcnQKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGVzYyA9IGl0ZW0oJ2luZm8nKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIGRlc2MgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBkZXNjID0gJycKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdlbnJlID0gaXRlbSgnZ2VucmUnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIGdlbnJlID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgZ2VucmUgPSAnJwoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGF0ZSA9IGl0ZW0oJ2RhdGUnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgIGlmIGRhdGUgPT0gTm9uZToKICAgICAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBkYXRlID0gJycKCiAgICAgICAgICAgIHJlZ2V4cyA9IE5vbmUKICAgICAgICAgICAgaWYgaXRlbSgncmVnZXgnKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZWdfaXRlbSA9IGl0ZW0oJ3JlZ2V4JykKICAgICAgICAgICAgICAgICAgICByZWdleHMgPSBwYXJzZV9yZWdleChyZWdfaXRlbSkKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbGVuKHVybCkgPiAxOgogICAgICAgICAgICAgICAgICAgIGFsdCA9IDAKICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdCA9IFtdCiAgICAgICAgICAgICAgICAgICAgaWdub3JlbGlzdHNldHRpbmc9VHJ1ZSBpZiAnJCRMU1BsYXlPbmx5T25lJCQnIGluIHVybFswXSBlbHNlIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gdXJsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgIGFkZF9wbGF5bGlzdCA9PSAiZmFsc2UiIGFuZCBub3QgaWdub3JlbGlzdHNldHRpbmc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRMaW5rKGksJyVzKSAlcycgJShhbHQsIG5hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSksdGh1bWJuYWlsLGZhbkFydCxkZXNjLGdlbnJlLGRhdGUsVHJ1ZSxwbGF5bGlzdCxyZWdleHMsdG90YWwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICAoYWRkX3BsYXlsaXN0ID09ICJ0cnVlIiBhbmQgIGFza19wbGF5bGlzdF9pdGVtcyA9PSAndHJ1ZScpIG9yIGlnbm9yZWxpc3RzZXR0aW5nOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlZ2V4czoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QuYXBwZW5kKGkrJyZyZWdleHM9JytyZWdleHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAgYW55KHggaW4gaSBmb3IgeCBpbiByZXNvbHZlX3VybCkgYW5kICBpLnN0YXJ0c3dpdGgoJ2h0dHAnKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QuYXBwZW5kKGkrJyZtb2RlPTE5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC5hcHBlbmQoaSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QuYXBwZW5kKGkpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHBsYXlsaXN0KSA+IDE6ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZExpbmsoJycsIG5hbWUuZW5jb2RlKCd1dGYtOCcpLHRodW1ibmFpbCxmYW5BcnQsZGVzYyxnZW5yZSxkYXRlLFRydWUscGxheWxpc3QscmVnZXhzLHRvdGFsKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiBkb250TGluazoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUsdXJsWzBdLHJlZ2V4cwogICAgICAgICAgICAgICAgICAgIGlmIGlzWE1MU291cmNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHJlZ2V4cyA9PSBOb25lOiAjPGV4dGVybmFsbGluaz4gYW5kIDxyZWdleD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZS5lbmNvZGUoJ3V0Zi04JyksZXh0X3VybFswXS5lbmNvZGUoJ3V0Zi04JyksMSx0aHVtYm5haWwsZmFuQXJ0LGRlc2MsZ2VucmUsZGF0ZSxOb25lLCchIXVwZGF0ZScscmVnZXhzLHVybFswXS5lbmNvZGUoJ3V0Zi04JykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2FkZExpbmsodXJsWzBdLG5hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSsgICdbQ09MT1IgeWVsbG93XWJ1aWxkIFhNTFsvQ09MT1JdJyx0aHVtYm5haWwsZmFuQXJ0LGRlc2MsZ2VucmUsZGF0ZSxUcnVlLE5vbmUscmVnZXhzLHRvdGFsKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZS5lbmNvZGUoJ3V0Zi04JyksZXh0X3VybFswXS5lbmNvZGUoJ3V0Zi04JyksMSx0aHVtYm5haWwsZmFuQXJ0LGRlc2MsZ2VucmUsZGF0ZSxOb25lLCdzb3VyY2UnLE5vbmUsTm9uZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYWRkRGlyKG5hbWUuZW5jb2RlKCd1dGYtOCcpLHVybFswXS5lbmNvZGUoJ3V0Zi04JyksMSx0aHVtYm5haWwsZmFuYXJ0LGRlc2MsZ2VucmUsZGF0ZSxOb25lLCdzb3VyY2UnKQogICAgICAgICAgICAgICAgICAgIGVsaWYgaXNKc29ucnBjOgogICAgICAgICAgICAgICAgICAgICAgICBhZGREaXIobmFtZS5lbmNvZGUoJ3V0Zi04JyksZXh0X3VybFswXSw1Myx0aHVtYm5haWwsZmFuQXJ0LGRlc2MsZ2VucmUsZGF0ZSxOb25lLCdzb3VyY2UnKQogICAgICAgICAgICAgICAgICAgICAgICAjeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKDUwMCkiKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICckZG9yZWdleCcgaW4gbmFtZSBhbmQgbm90IGdldFJlZ2V4UGFyc2VkPT1Ob25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRuYW1lLHNldHJlcz1nZXRSZWdleFBhcnNlZChyZWdleHMsIG5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHRuYW1lPT1Ob25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnJGRvcmVnZXgnIGluIHRodW1ibmFpbCBhbmQgbm90IGdldFJlZ2V4UGFyc2VkPT1Ob25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRuYW1lLHNldHJlcz1nZXRSZWdleFBhcnNlZChyZWdleHMsIHRodW1ibmFpbCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgdG5hbWU9PU5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbD10bmFtZQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgYWRkTGluayh1cmxbMF0sbmFtZS5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpLHRodW1ibmFpbCxmYW5BcnQsZGVzYyxnZW5yZSxkYXRlLFRydWUsTm9uZSxyZWdleHMsdG90YWwpCiAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdzdWNjZXNzJwogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBhZGRvbl9sb2coJ1RoZXJlIHdhcyBhIHByb2JsZW0gYWRkaW5nIGl0ZW0gLSAnK25hbWUuZW5jb2RlKCd1dGYtOCcsICdpZ25vcmUnKSkKCmRlZiBwYXJzZV9yZWdleChyZWdfaXRlbSk6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmVnZXhzID0ge30KICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiByZWdfaXRlbToKICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddID0ge30KICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWyduYW1lJ109aSgnbmFtZScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAjcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydleHByZXMnXSA9IGkoJ2V4cHJlcycpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2V4cHJlcyddID0gaSgnZXhwcmVzJylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydleHByZXMnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2V4cHJlcyddPScnCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIFJlZmVyZXIgLS0iKQogICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3BhZ2UnXSA9IGkoJ3BhZ2UnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydyZWZlcmVyJ10gPSBpKCdyZWZlcmVyJylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIFJlZmVyZXIgLS0iKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2Nvbm5lY3Rpb24nXSA9IGkoJ2Nvbm5lY3Rpb24nKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8gY29ubmVjdGlvbiAtLSIpCgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ25vdHBsYXlhYmxlJ10gPSBpKCdub3RwbGF5YWJsZScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBub3RwbGF5YWJsZSAtLSIpCgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ25vcmVkaXJlY3QnXSA9IGkoJ25vcmVkaXJlY3QnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8gbm9yZWRpcmVjdCAtLSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnb3JpZ2luJ10gPSBpKCdvcmlnaW4nKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8gb3JpZ2luIC0tIikKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydhY2NlcHQnXSA9IGkoJ2FjY2VwdCcpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBhY2NlcHQgLS0iKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2luY2x1ZGVoZWFkZXJzJ10gPSBpKCdpbmNsdWRlaGVhZGVycycpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBpbmNsdWRlaGVhZGVycyAtLSIpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnbGlzdHJlcGVhdCddID0gaSgnbGlzdHJlcGVhdCcpWzBdLnN0cmluZwojICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdsaXN0cmVwZWF0JyxyZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2xpc3RyZXBlYXQnXSxpKCdsaXN0cmVwZWF0JylbMF0uc3RyaW5nLCBpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIGxpc3RyZXBlYXQgLS0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3Byb3h5J10gPSBpKCdwcm94eScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBwcm94eSAtLSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWyd4LXJlcSddID0gaSgneC1yZXEnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm8geC1yZXEgLS0iKQoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWyd4LWFkZHInXSA9IGkoJ3gtYWRkcicpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyB4LWFkZHIgLS0iKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3gtZm9yd2FyZCddID0gaSgneC1mb3J3YXJkJylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vIHgtZm9yd2FyZCAtLSIpCgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2FnZW50J10gPSBpKCdhZ2VudCcpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBObyBVc2VyIEFnZW50IC0tIikKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydwb3N0J10gPSBpKCdwb3N0JylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vdCBhIHBvc3QiKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3Jhd3Bvc3QnXSA9IGkoJ3Jhd3Bvc3QnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm90IGEgcmF3cG9zdCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnaHRtbHVuZXNjYXBlJ10gPSBpKCdodG1sdW5lc2NhcGUnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm90IGEgaHRtbHVuZXNjYXBlIikKCgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ3JlYWRjb29raWVvbmx5J10gPSBpKCdyZWFkY29va2llb25seScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBOb3QgYSByZWFkQ29va2llT25seSIpCiAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCBpCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnY29va2llamFyJ10gPSBpKCdjb29raWVqYXInKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2Nvb2tpZWphciddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4c1tpKCduYW1lJylbMF0uc3RyaW5nXVsnY29va2llamFyJ109JycKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCJSZWdleDogLS0gTm90IGEgY29va2llSmFyIikKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydzZXRjb29raWUnXSA9IGkoJ3NldGNvb2tpZScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBOb3QgYSBzZXRjb29raWUiKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2FwcGVuZGNvb2tpZSddID0gaSgnYXBwZW5kY29va2llJylbMF0uc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZygiUmVnZXg6IC0tIE5vdCBhIGFwcGVuZGNvb2tpZSIpCgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleHNbaSgnbmFtZScpWzBdLnN0cmluZ11bJ2lnbm9yZWNhY2hlJ10gPSBpKCdpZ25vcmVjYWNoZScpWzBdLnN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBubyBpZ25vcmVjYWNoZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICN0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgcmVnZXhzW2koJ25hbWUnKVswXS5zdHJpbmddWydpZ25vcmVjYWNoZSddID0gaSgnaWdub3JlY2FjaGUnKVswXS5zdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgI2V4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICBhZGRvbl9sb2coIlJlZ2V4OiAtLSBubyBpZ25vcmVjYWNoZSIpCgogICAgICAgICAgICAgICAgICAgIHJlZ2V4cyA9IHVybGxpYi5xdW90ZShyZXByKHJlZ2V4cykpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2V4cwogICAgICAgICAgICAgICAgICAgICNwcmludCByZWdleHMKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICByZWdleHMgPSBOb25lCiAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKCdyZWdleCBFcnJvcjogJytuYW1lLmVuY29kZSgndXRmLTgnLCAnaWdub3JlJykpCiNjb3BpZXMgZnJvbSBsYW1kYSdzIGltcGxlbWVudGF0aW9uCmRlZiBnZXRfdXN0cmVhbSh1cmwpOgogICAgdHJ5OgogICAgICAgIGZvciBpIGluIHJhbmdlKDEsIDUxKToKICAgICAgICAgICAgcmVzdWx0ID0gZ2V0VXJsKHVybCkKICAgICAgICAgICAgaWYgIkVYVC1YLVNUUkVBTS1JTkYiIGluIHJlc3VsdDogcmV0dXJuIHVybAogICAgICAgICAgICBpZiBub3QgIkVYVE0zVSIgaW4gcmVzdWx0OiByZXR1cm4KICAgICAgICAgICAgeGJtYy5zbGVlcCgyMDAwKQogICAgICAgIHJldHVybgogICAgZXhjZXB0OgogICAgICAgIHJldHVybgoKZGVmIGdldFJlZ2V4UGFyc2VkKHJlZ2V4cywgdXJsLGNvb2tpZUphcj1Ob25lLGZvckNvb2tpZUphck9ubHk9RmFsc2UscmVjdXJzaXZlQ2FsbD1GYWxzZSxjYWNoZWRQYWdlcz17fSwgcmF3UG9zdD1GYWxzZSwgY29va2llX2phcl9maWxlPU5vbmUpOiMwLDEsMiA9IFVSTCwgcmVnZXhPbmx5LCBDb29raWVKYXJPbmx5CiAgICAgICAgaWYgbm90IHJlY3Vyc2l2ZUNhbGw6CiAgICAgICAgICAgIHJlZ2V4cyA9IGV2YWwodXJsbGliLnVucXVvdGUocmVnZXhzKSkKICAgICAgICAjY2FjaGVkUGFnZXMgPSB7fQogICAgICAgICNwcmludCAndXJsJyx1cmwKICAgICAgICBkb1JlZ2V4cyA9IHJlLmNvbXBpbGUoJ1wkZG9yZWdleFxbKFteXF1dKilcXScpLmZpbmRhbGwodXJsKQogICAgICAgICNwcmludCAnZG9SZWdleHMnLGRvUmVnZXhzLHJlZ2V4cwogICAgICAgIHNldHJlc29sdmVkPVRydWUKICAgICAgICBmb3IgayBpbiBkb1JlZ2V4czoKICAgICAgICAgICAgaWYgayBpbiByZWdleHM6CiAgICAgICAgICAgICAgICAjcHJpbnQgJ3Byb2Nlc3NpbmcgJyAsawogICAgICAgICAgICAgICAgbSA9IHJlZ2V4c1trXQogICAgICAgICAgICAgICAgI3ByaW50IG0KICAgICAgICAgICAgICAgIGNvb2tpZUphclBhcmFtPUZhbHNlCiAgICAgICAgICAgICAgICBpZiAgJ2Nvb2tpZWphcicgaW4gbTogIyBzbyBlaXRoZXIgY3JlYXRlIG9yIHJldXNlIGV4aXN0aW5nIGphcgogICAgICAgICAgICAgICAgICAgICNwcmludCAnY29va2llamFyIGV4aXN0cycsbVsnY29va2llamFyJ10KICAgICAgICAgICAgICAgICAgICBjb29raWVKYXJQYXJhbT1tWydjb29raWVqYXInXQogICAgICAgICAgICAgICAgICAgIGlmICAnJGRvcmVnZXgnIGluIGNvb2tpZUphclBhcmFtOgogICAgICAgICAgICAgICAgICAgICAgICBjb29raWVKYXI9Z2V0UmVnZXhQYXJzZWQocmVnZXhzLCBtWydjb29raWVqYXInXSxjb29raWVKYXIsVHJ1ZSwgVHJ1ZSxjYWNoZWRQYWdlcykKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZUphclBhcmFtPVRydWUKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBjb29raWVKYXJQYXJhbT1UcnVlCiAgICAgICAgICAgICAgICAjcHJpbnQgJ21bY29va2llamFyXScsbVsnY29va2llamFyJ10sY29va2llSmFyCiAgICAgICAgICAgICAgICBpZiBjb29raWVKYXJQYXJhbToKICAgICAgICAgICAgICAgICAgICBpZiBjb29raWVKYXI9PU5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnY3JlYXRlIGNvb2tpZSBqYXInCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZV9qYXJfZmlsZT1Ob25lCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdvcGVuWycgaW4gbVsnY29va2llamFyJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVfamFyX2ZpbGU9bVsnY29va2llamFyJ10uc3BsaXQoJ29wZW5bJylbMV0uc3BsaXQoJ10nKVswXQojICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdjb29raWVKYXIgZnJvbSBmaWxlIG5hbWUnLGNvb2tpZV9qYXJfZmlsZQoKICAgICAgICAgICAgICAgICAgICAgICAgY29va2llSmFyPWdldENvb2tpZUphcihjb29raWVfamFyX2ZpbGUpCiMgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnY29va2llSmFyIGZyb20gZmlsZScsY29va2llSmFyCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNvb2tpZV9qYXJfZmlsZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVDb29raWVKYXIoY29va2llSmFyLGNvb2tpZV9qYXJfZmlsZSkKICAgICAgICAgICAgICAgICAgICAgICAgI2ltcG9ydCBjb29raWVsaWIKICAgICAgICAgICAgICAgICAgICAgICAgI2Nvb2tpZUphciA9IGNvb2tpZWxpYi5MV1BDb29raWVKYXIoKQogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ2Nvb2tpZUphciBuZXcnLGNvb2tpZUphcgogICAgICAgICAgICAgICAgICAgIGVsaWYgJ3NhdmVbJyBpbiBtWydjb29raWVqYXInXToKICAgICAgICAgICAgICAgICAgICAgICAgY29va2llX2phcl9maWxlPW1bJ2Nvb2tpZWphciddLnNwbGl0KCdzYXZlWycpWzFdLnNwbGl0KCddJylbMF0KICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVfcGF0aD1vcy5wYXRoLmpvaW4ocHJvZmlsZSxjb29raWVfamFyX2ZpbGUpCiMgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnY29tcGxldGVfcGF0aCcsY29tcGxldGVfcGF0aAogICAgICAgICAgICAgICAgICAgICAgICBzYXZlQ29va2llSmFyKGNvb2tpZUphcixjb29raWVfamFyX2ZpbGUpCiAgICAgICAgICAgICAgICBpZiAgbVsncGFnZSddIGFuZCAnJGRvcmVnZXgnIGluIG1bJ3BhZ2UnXToKICAgICAgICAgICAgICAgICAgICBwZz1nZXRSZWdleFBhcnNlZChyZWdleHMsIG1bJ3BhZ2UnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihwZyk9PTA6CiAgICAgICAgICAgICAgICAgICAgICAgIHBnPSdodHRwOi8vcmVnZXhmYWlsZWQnCiAgICAgICAgICAgICAgICAgICAgbVsncGFnZSddPXBnCgogICAgICAgICAgICAgICAgaWYgJ3NldGNvb2tpZScgaW4gbSBhbmQgbVsnc2V0Y29va2llJ10gYW5kICckZG9yZWdleCcgaW4gbVsnc2V0Y29va2llJ106CiAgICAgICAgICAgICAgICAgICAgbVsnc2V0Y29va2llJ109Z2V0UmVnZXhQYXJzZWQocmVnZXhzLCBtWydzZXRjb29raWUnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzKQogICAgICAgICAgICAgICAgaWYgJ2FwcGVuZGNvb2tpZScgaW4gbSBhbmQgbVsnYXBwZW5kY29va2llJ10gYW5kICckZG9yZWdleCcgaW4gbVsnYXBwZW5kY29va2llJ106CiAgICAgICAgICAgICAgICAgICAgbVsnYXBwZW5kY29va2llJ109Z2V0UmVnZXhQYXJzZWQocmVnZXhzLCBtWydhcHBlbmRjb29raWUnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzKQoKCiAgICAgICAgICAgICAgICBpZiAgJ3Bvc3QnIGluIG0gYW5kICckZG9yZWdleCcgaW4gbVsncG9zdCddOgogICAgICAgICAgICAgICAgICAgIG1bJ3Bvc3QnXT1nZXRSZWdleFBhcnNlZChyZWdleHMsIG1bJ3Bvc3QnXSxjb29raWVKYXIscmVjdXJzaXZlQ2FsbD1UcnVlLGNhY2hlZFBhZ2VzPWNhY2hlZFBhZ2VzKQojICAgICAgICAgICAgICAgICAgICBwcmludCAncG9zdCBpcyBub3cnLG1bJ3Bvc3QnXQoKICAgICAgICAgICAgICAgIGlmICAncmF3cG9zdCcgaW4gbSBhbmQgJyRkb3JlZ2V4JyBpbiBtWydyYXdwb3N0J106CiAgICAgICAgICAgICAgICAgICAgbVsncmF3cG9zdCddPWdldFJlZ2V4UGFyc2VkKHJlZ2V4cywgbVsncmF3cG9zdCddLGNvb2tpZUphcixyZWN1cnNpdmVDYWxsPVRydWUsY2FjaGVkUGFnZXM9Y2FjaGVkUGFnZXMscmF3UG9zdD1UcnVlKQogICAgICAgICAgICAgICAgICAgICNwcmludCAncmF3cG9zdCBpcyBub3cnLG1bJ3Jhd3Bvc3QnXQoKICAgICAgICAgICAgICAgIGlmICdyYXdwb3N0JyBpbiBtIGFuZCAnJGVwb2N0aW1lJCcgaW4gbVsncmF3cG9zdCddOgogICAgICAgICAgICAgICAgICAgIG1bJ3Jhd3Bvc3QnXT1tWydyYXdwb3N0J10ucmVwbGFjZSgnJGVwb2N0aW1lJCcsZ2V0RXBvY1RpbWUoKSkKCiAgICAgICAgICAgICAgICBpZiAncmF3cG9zdCcgaW4gbSBhbmQgJyRlcG9jdGltZTIkJyBpbiBtWydyYXdwb3N0J106CiAgICAgICAgICAgICAgICAgICAgbVsncmF3cG9zdCddPW1bJ3Jhd3Bvc3QnXS5yZXBsYWNlKCckZXBvY3RpbWUyJCcsZ2V0RXBvY1RpbWUyKCkpCgoKICAgICAgICAgICAgICAgIGxpbms9JycKICAgICAgICAgICAgICAgIGlmIG1bJ3BhZ2UnXSBhbmQgbVsncGFnZSddIGluIGNhY2hlZFBhZ2VzIGFuZCBub3QgJ2lnbm9yZWNhY2hlJyBpbiBtIGFuZCBmb3JDb29raWVKYXJPbmx5PT1GYWxzZSA6CiAgICAgICAgICAgICAgICAgICAgI3ByaW50ICd1c2luZyBjYWNoZSBwYWdlJyxtWydwYWdlJ10KICAgICAgICAgICAgICAgICAgICBsaW5rID0gY2FjaGVkUGFnZXNbbVsncGFnZSddXQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBtWydwYWdlJ10gYW5kICBub3QgbVsncGFnZSddPT0nJyBhbmQgIG1bJ3BhZ2UnXS5zdGFydHN3aXRoKCdodHRwJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICckZXBvY3RpbWUkJyBpbiBtWydwYWdlJ106CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtWydwYWdlJ109bVsncGFnZSddLnJlcGxhY2UoJyRlcG9jdGltZSQnLGdldEVwb2NUaW1lKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICckZXBvY3RpbWUyJCcgaW4gbVsncGFnZSddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbVsncGFnZSddPW1bJ3BhZ2UnXS5yZXBsYWNlKCckZXBvY3RpbWUyJCcsZ2V0RXBvY1RpbWUyKCkpCgogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ0luZ29yaW5nIENhY2hlJyxtWydwYWdlJ10KICAgICAgICAgICAgICAgICAgICAgICAgcGFnZV9zcGxpdD1tWydwYWdlJ10uc3BsaXQoJ3wnKQogICAgICAgICAgICAgICAgICAgICAgICBwYWdlVXJsPXBhZ2Vfc3BsaXRbMF0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyX2luX3BhZ2U9Tm9uZQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4ocGFnZV9zcGxpdCk+MToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcl9pbl9wYWdlPXBhZ2Vfc3BsaXRbMV0KCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdXJsbGliMi5Qcm94eUhhbmRsZXIoeyAoJ2h0dHBzJyA/IHByb3h5dG91c2VbOjVdPT0iaHR0cHMiOiJodHRwIikgOiBwcm94eXRvdXNlfSkKIyAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmJ1aWxkX29wZW5lcihwcm94eSkKIyAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG9wZW5lcikKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiMgICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnQgdXJsbGliMgojICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ3VybGxpYjIuZ2V0cHJveGllcycsdXJsbGliMi5nZXRwcm94aWVzKCkKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm94aWVzPXVybGxpYjIuUHJveHlIYW5kbGVyKHVybGxpYjIuZ2V0cHJveGllcygpKQogICAgICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnZ2V0dGluZyBwYWdlVXJsJyxwYWdlVXJsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdChwYWdlVXJsKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAncHJveHknIGluIG06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm94eXRvdXNlPSBtWydwcm94eSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ3Byb3h5dG91c2UnLHByb3h5dG91c2UKIyAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxsaWIyLmdldHByb3hpZXM9IGxhbWJkYToge30KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBhZ2VVcmxbOjVdPT0iaHR0cHMiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5ID0gdXJsbGliMi5Qcm94eUhhbmRsZXIoeyAnaHR0cHMnIDogcHJveHl0b3VzZX0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlcS5zZXRfcHJveHkocHJveHl0b3VzZSwgJ2h0dHBzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcih7ICdodHRwJyAgOiBwcm94eXRvdXNlfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVxLnNldF9wcm94eShwcm94eXRvdXNlLCAnaHR0cCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgcmUuc2VhcmNoKHInaHR0cHM/OlwvXC8uKj9ALio6XGQrJywgcHJveHl0b3VzZSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgICBhdXRoID0gdXJsbGliMi5IVFRQQmFzaWNBdXRoSGFuZGxlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgICBvcGVuZXIgPSB1cmxsaWIyLmJ1aWxkX29wZW5lcihwcm94eSwgYXV0aCwgdXJsbGliMi5IVFRQSGFuZGxlcikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKHByb3h5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgcnY6MTQuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xNC4wLjEnKQogICAgICAgICAgICAgICAgICAgICAgICBwcm94eXRvdXNlPU5vbmUKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdyZWZlcmVyJyBpbiBtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ1JlZmVyZXInLCBtWydyZWZlcmVyJ10pCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdhY2NlcHQnIGluIG06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuYWRkX2hlYWRlcignQWNjZXB0JywgbVsnYWNjZXB0J10pCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdhZ2VudCcgaW4gbToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLWFnZW50JywgbVsnYWdlbnQnXSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3gtcmVxJyBpbiBtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCBtWyd4LXJlcSddKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAneC1hZGRyJyBpbiBtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ3gtYWRkcicsIG1bJ3gtYWRkciddKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAneC1mb3J3YXJkJyBpbiBtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ1gtRm9yd2FyZGVkLUZvcicsIG1bJ3gtZm9yd2FyZCddKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnc2V0Y29va2llJyBpbiBtOgojICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdhZGRpbmcgY29va2llJyxtWydzZXRjb29raWUnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ0Nvb2tpZScsIG1bJ3NldGNvb2tpZSddKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnYXBwZW5kY29va2llJyBpbiBtOgojICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdhcHBlbmRpbmcgY29va2llIHRvIGNvb2tpZWphcicsbVsnYXBwZW5kY29va2llJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZXN0b0FwZW5kPW1bJ2FwcGVuZGNvb2tpZSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVzdG9BcGVuZD1jb29raWVzdG9BcGVuZC5zcGxpdCgnOycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaCBpbiBjb29raWVzdG9BcGVuZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLHY9aC5zcGxpdCgnPScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyxuPSBuLnNwbGl0KCc6JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjayA9IGNvb2tpZWxpYi5Db29raWUodmVyc2lvbj0wLCBuYW1lPW4sIHZhbHVlPXYsIHBvcnQ9Tm9uZSwgcG9ydF9zcGVjaWZpZWQ9RmFsc2UsIGRvbWFpbj13LCBkb21haW5fc3BlY2lmaWVkPUZhbHNlLCBkb21haW5faW5pdGlhbF9kb3Q9RmFsc2UsIHBhdGg9Jy8nLCBwYXRoX3NwZWNpZmllZD1UcnVlLCBzZWN1cmU9RmFsc2UsIGV4cGlyZXM9Tm9uZSwgZGlzY2FyZD1UcnVlLCBjb21tZW50PU5vbmUsIGNvbW1lbnRfdXJsPU5vbmUsIHJlc3Q9eydIdHRwT25seSc6IE5vbmV9LCByZmMyMTA5PUZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZUphci5zZXRfY29va2llKGNrKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnb3JpZ2luJyBpbiBtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ09yaWdpbicsIG1bJ29yaWdpbiddKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBoZWFkZXJfaW5fcGFnZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcl9pbl9wYWdlPWhlYWRlcl9pbl9wYWdlLnNwbGl0KCcmJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBoIGluIGhlYWRlcl9pbl9wYWdlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGguc3BsaXQoJz0nKT09MjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbix2PWguc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHM9aC5zcGxpdCgnPScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG49dmFsc1swXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2PSc9Jy5qb2luKHZhbHNbMTpdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNuLHY9aC5zcGxpdCgnPScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxLmFkZF9oZWFkZXIobix2KQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGNvb2tpZUphcj09Tm9uZToKIyAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnY29va2llSmFyVmFsJyxjb29raWVKYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZV9oYW5kbGVyID0gdXJsbGliMi5IVFRQQ29va2llUHJvY2Vzc29yKGNvb2tpZUphcikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGNvb2tpZV9oYW5kbGVyLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lciA9IHVybGxpYjIuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQojICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdub3JlZGlyZWN0Jywnbm9yZWRpcmVjdCcgaW4gbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnbm9yZWRpcmVjdCcgaW4gbToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmJ1aWxkX29wZW5lcihjb29raWVfaGFuZGxlcixOb1JlZGlyZWN0aW9uLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG9wZW5lcikKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnbm9yZWRpcmVjdCcgaW4gbToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKE5vUmVkaXJlY3Rpb24sIHVybGxpYjIuSFRUUEJhc2ljQXV0aEhhbmRsZXIoKSwgdXJsbGliMi5IVFRQSGFuZGxlcigpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVyID0gdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdjb25uZWN0aW9uJyBpbiBtOgojICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICcuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLmNvbm5lY3Rpb24vLy8vLy8uJyxtWydjb25uZWN0aW9uJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20ga2VlcGFsaXZlIGltcG9ydCBIVFRQSGFuZGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcGFsaXZlX2hhbmRsZXIgPSBIVFRQSGFuZGxlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXIgPSB1cmxsaWIyLmJ1aWxkX29wZW5lcihrZWVwYWxpdmVfaGFuZGxlcikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybGxpYjIuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQoKCiAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnYWZ0ZXIgY29va2llIGphcicKICAgICAgICAgICAgICAgICAgICAgICAgcG9zdD1Ob25lCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAncG9zdCcgaW4gbToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3REYXRhPW1bJ3Bvc3QnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgI2lmICckTGl2ZVN0cmVhbVJlY2FwdGNoYScgaW4gcG9zdERhdGE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgIChjYXB0Y2hhX2NoYWxsZW5nZSxjYXRwY2hhX3dvcmQsaWRmaWVsZCk9cHJvY2Vzc1JlY2FwdGNoYShtWydwYWdlJ10sY29va2llSmFyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICBpZiBjYXB0Y2hhX2NoYWxsZW5nZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgIHBvc3REYXRhPXBvc3REYXRhLnJlcGxhY2UoJyRMaXZlU3RyZWFtUmVjYXB0Y2hhJywnbWFudWFsX3JlY2FwdGNoYV9jaGFsbGVuZ2VfZmllbGQ6JytjYXB0Y2hhX2NoYWxsZW5nZSsnLHJlY2FwdGNoYV9yZXNwb25zZV9maWVsZDonK2NhdHBjaGFfd29yZCsnLGlkOicraWRmaWVsZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0cG9zdD1wb3N0RGF0YS5zcGxpdCgnLCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0PXt9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgcCBpbiBzcGxpdHBvc3Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbj1wLnNwbGl0KCc6JylbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2PXAuc3BsaXQoJzonKVsxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rbbl09dgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdCA9IHVybGxpYi51cmxlbmNvZGUocG9zdCkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdyYXdwb3N0JyBpbiBtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdD1tWydyYXdwb3N0J10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpZiAnJExpdmVTdHJlYW1SZWNhcHRjaGEnIGluIHBvc3Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgIChjYXB0Y2hhX2NoYWxsZW5nZSxjYXRwY2hhX3dvcmQsaWRmaWVsZCk9cHJvY2Vzc1JlY2FwdGNoYShtWydwYWdlJ10sY29va2llSmFyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICBpZiBjYXB0Y2hhX2NoYWxsZW5nZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgcG9zdD1wb3N0LnJlcGxhY2UoJyRMaXZlU3RyZWFtUmVjYXB0Y2hhJywnJm1hbnVhbF9yZWNhcHRjaGFfY2hhbGxlbmdlX2ZpZWxkPScrY2FwdGNoYV9jaGFsbGVuZ2UrJyZyZWNhcHRjaGFfcmVzcG9uc2VfZmllbGQ9JytjYXRwY2hhX3dvcmQrJyZpZD0nK2lkZmllbGQpCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9JycKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwb3N0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gdXJsbGliMi51cmxvcGVuKHJlcSxwb3N0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHVybGxpYjIudXJsb3BlbihyZXEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiByZXNwb25zZS5pbmZvKCkuZ2V0KCdDb250ZW50LUVuY29kaW5nJykgPT0gJ2d6aXAnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU3RyaW5nSU8gaW1wb3J0IFN0cmluZ0lPCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0IGd6aXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWYgPSBTdHJpbmdJTyggcmVzcG9uc2UucmVhZCgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBnemlwLkd6aXBGaWxlKGZpbGVvYmo9YnVmKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsgPSBmLnJlYWQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPXJlc3BvbnNlLnJlYWQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdwcm94eScgaW4gbSBhbmQgbm90IGN1cnJlbnRfcHJveGllcyBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybGxpYjIuaW5zdGFsbF9vcGVuZXIodXJsbGliMi5idWlsZF9vcGVuZXIoY3VycmVudF9wcm94aWVzKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1qYXZhc2NyaXB0VW5Fc2NhcGUobGluaykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCByZXByKGxpbmspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgbGluayBUaGlzIGp1c3QgcHJpbnQgd2hvbGUgd2VicGFnZSBpbiBMT0cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdpbmNsdWRlaGVhZGVycycgaW4gbToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGluays9c3RyKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdTZXQtQ29va2llJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluays9JyQkSEVBREVSU19TVEFSVCQkOicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgYiBpbiByZXNwb25zZS5oZWFkZXJzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rKz0gYisnOicrcmVzcG9uc2UuaGVhZGVycy5nZXQoYikrJ1xuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsrPSckJEhFQURFUlNfRU5EJCQ6JwogICAgIyAgICAgICAgICAgICAgICAgICAgICAgIHByaW50IGxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZG9uX2xvZyhsaW5rKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25fbG9nKGNvb2tpZUphciApCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRQYWdlc1ttWydwYWdlJ11dID0gbGluawogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgbGluawogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ3N0b3JlIGxpbmsgZm9yJyxtWydwYWdlJ10sZm9yQ29va2llSmFyT25seQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZm9yQ29va2llSmFyT25seToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb29raWVKYXIjIGRvIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICBlbGlmIG1bJ3BhZ2UnXSBhbmQgIG5vdCBtWydwYWdlJ10uc3RhcnRzd2l0aCgnaHR0cCcpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBtWydwYWdlJ10uc3RhcnRzd2l0aCgnJHB5RnVuY3Rpb246Jyk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9ZG9FdmFsKG1bJ3BhZ2UnXS5zcGxpdCgnJHB5RnVuY3Rpb246JylbMV0sJycsY29va2llSmFyLG0gKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZm9yQ29va2llSmFyT25seToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llSmFyIyBkbyBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPXZhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1qYXZhc2NyaXB0VW5Fc2NhcGUobGluaykKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9bVsncGFnZSddCgogICAgICAgICAgICAgICAgaWYgJyRweUZ1bmN0aW9uOnBsYXltZWRpYSgnIGluIG1bJ2V4cHJlcyddIG9yICdBY3RpdmF0ZVdpbmRvdycgIGluIG1bJ2V4cHJlcyddIG9yICdSdW5QbHVnaW4nICBpbiBtWydleHByZXMnXSAgb3IgJyRQTEFZRVJQUk9YWSQ9JyBpbiB1cmwgIG9yICBhbnkoeCBpbiB1cmwgZm9yIHggaW4gZ19pZ25vcmVTZXRSZXNvbHZlZCk6CiAgICAgICAgICAgICAgICAgICAgc2V0cmVzb2x2ZWQ9RmFsc2UKICAgICAgICAgICAgICAgIGlmICAnJGRvcmVnZXgnIGluIG1bJ2V4cHJlcyddOgogICAgICAgICAgICAgICAgICAgIG1bJ2V4cHJlcyddPWdldFJlZ2V4UGFyc2VkKHJlZ2V4cywgbVsnZXhwcmVzJ10sY29va2llSmFyLHJlY3Vyc2l2ZUNhbGw9VHJ1ZSxjYWNoZWRQYWdlcz1jYWNoZWRQYWdlcykKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgbVsnZXhwcmVzJ109PScnOgogICAgICAgICAgICAgICAgICAgICNwcmludCAnZG9pbmcgaXQgJyxtWydleHByZXMnXQogICAgICAgICAgICAgICAgICAgIGlmICckTGl2ZVN0cmVhbUNhcHRjaGEnIGluIG1bJ2V4cHJlcyddOgogICAgICAgICAgICAgICAgICAgICAgICB2YWw9YXNrQ2FwdGNoYShtLGxpbmssY29va2llSmFyKQogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ3VybCBhbmQgdmFsJyx1cmwsdmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCIkZG9yZWdleFsiICsgayArICJdIiwgdmFsKQoKICAgICAgICAgICAgICAgICAgICBlbGlmIG1bJ2V4cHJlcyddLnN0YXJ0c3dpdGgoJyRweUZ1bmN0aW9uOicpIG9yICcjJHB5RnVuY3Rpb24nIGluIG1bJ2V4cHJlcyddOgogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ2V4cGVlZWVlZWVlZWVlZWVlZWVlZWUnLG1bJ2V4cHJlcyddCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0nJwogICAgICAgICAgICAgICAgICAgICAgICBpZiBtWydleHByZXMnXS5zdGFydHN3aXRoKCckcHlGdW5jdGlvbjonKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1kb0V2YWwobVsnZXhwcmVzJ10uc3BsaXQoJyRweUZ1bmN0aW9uOicpWzFdLGxpbmssY29va2llSmFyLG0pCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9ZG9FdmFsRnVuY3Rpb24obVsnZXhwcmVzJ10sbGluayxjb29raWVKYXIsbSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ0FjdGl2YXRlV2luZG93JyBpbiBtWydleHByZXMnXSBvciAnUnVuUGx1Z2luJyBpbiBtWydleHByZXMnXSAgOiByZXR1cm4gJycsRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZm9yQ29va2llSmFyT25seToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb29raWVKYXIjIGRvIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2xpc3RyZXBlYXQnIGluIG06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0cmVwZWF0PW1bJ2xpc3RyZXBlYXQnXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZXQ9cmUuZmluZGFsbChtWydleHByZXMnXSxsaW5rKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdyZXQnLHZhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RyZXBlYXQsZXZhbCh2YWwpLCBtLHJlZ2V4cyxjb29raWVKYXIKIyAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICd1cmwgayB2YWwnLHVybCxrLHZhbAogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ3JlcHInLHJlcHIodmFsKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UodSIkZG9yZWdleFsiICsgayArICJdIiwgdmFsKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHVybCA9IHVybC5yZXBsYWNlKCIkZG9yZWdleFsiICsgayArICJdIiwgdmFsLmRlY29kZSgidXRmLTgiKSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBpZiAnbGlzdHJlcGVhdCcgaW4gbToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RyZXBlYXQ9bVsnbGlzdHJlcGVhdCddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ2xpc3RyZXBlYXQnLG1bJ2V4cHJlcyddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgbVsnZXhwcmVzJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnYWFhYScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCBsaW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQ9cmUuZmluZGFsbChtWydleHByZXMnXSxsaW5rKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50ICdyZXQnLHJldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RyZXBlYXQscmV0LCBtLHJlZ2V4cyxjb29raWVKYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdmFsPScnCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBsaW5rPT0nJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAnbGluaycsbGluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnID0gcmUuY29tcGlsZShtWydleHByZXMnXSkuc2VhcmNoKGxpbmspICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1yZWcuZ3JvdXAoMSkuc3RyaXAoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBtWydwYWdlJ109PScnIG9yIG1bJ3BhZ2UnXT09Tm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1tWydleHByZXMnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJhd1Bvc3Q6CiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ3Jhd3Bvc3QnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9dXJsbGliLnF1b3RlX3BsdXModmFsKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnaHRtbHVuZXNjYXBlJyBpbiBtOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ZhbD11cmxsaWIudW5xdW90ZV9wbHVzKHZhbCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydCBIVE1MUGFyc2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9SFRNTFBhcnNlci5IVE1MUGFyc2VyKCkudW5lc2NhcGUodmFsKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgiJGRvcmVnZXhbIiArIGsgKyAiXSIsIHZhbCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiB1cmwgPSB1cmwucmVwbGFjZSgiJGRvcmVnZXhbIiArIGsgKyAiXSIsIHZhbC5kZWNvZGUoInV0Zi04IikpCiAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCAndXInLHVybAogICAgICAgICAgICAgICAgICAgICAgICAjcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgiJGRvcmVnZXhbIiArIGsgKyAiXSIsJycpCgogICAgICAgIGlmICckZXBvY3RpbWUkJyBpbiB1cmw6CiAgICAgICAgICAgIHVybD11cmwucmVwbGFjZSgnJGVwb2N0aW1lJCcsZ2V0RXBvY1RpbWUoKSkKICAgICAgICBpZiAnJGVwb2N0aW1lMiQnIGluIHVybDoKICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCckZXBvY3RpbWUyJCcsZ2V0RXBvY1RpbWUyKCkpCgogICAgICAgIGlmICckR1VJRCQnIGluIHVybDoKICAgICAgICAgICAgaW1wb3J0IHV1aWQKICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCckR1VJRCQnLHN0cih1dWlkLnV1aWQxKCkpLnVwcGVyKCkpCiAgICAgICAgaWYgJyRnZXRfY29va2llcyQnIGluIHVybDoKICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCckZ2V0X2Nvb2tpZXMkJyxnZXRDb29raWVzU3RyaW5nKGNvb2tpZUphcikpCgogICAgICAgIGlmIHJlY3Vyc2l2ZUNhbGw6IHJldHVybiB1cmwKICAgICAgICAjcHJpbnQgJ2ZpbmFsIHVybCcscmVwcih1cmwpCiAgICAgICAgaWYgdXJsPT0iIjoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHVybCxzZXRyZXNvbHZlZAoKZGVmIGdldG1kNSh0KToKICAgIGltcG9ydCBoYXNobGliCiAgICBoPWhhc2hsaWIubWQ1KCkKICAgIGgudXBkYXRlKHQpCiAgICByZXR1cm4gaC5oZXhkaWdlc3QoKQoKZGVmIGRlY3J5cHRfdmF1Z2hubGl2ZShlbmNyeXB0ZWQpOgogICAgcmV0VmFsPSIiCiMgICAgcHJpbnQgJ2VuYycsZW5jcnlwdGVkCiAgICAjZm9yIHZhbCBpbiBlbmNyeXB0ZWQuc3BsaXQoJzonKToKICAgICMgICAgcmV0VmFsKz1jaHIoaW50KHZhbC5yZXBsYWNlKCIwbTAiLCIiKSkpCiAgICAjcmV0dXJuIHJldFZhbAoKZGVmIHBsYXltZWRpYShtZWRpYV91cmwpOgogICAgdHJ5OgogICAgICAgIGltcG9ydCAgQ3VzdG9tUGxheWVyCiAgICAgICAgcGxheWVyID0gQ3VzdG9tUGxheWVyLk15WEJNQ1BsYXllcigpCiAgICAgICAgbGlzdGl0ZW0gPSB4Ym1jZ3VpLkxpc3RJdGVtKCBsYWJlbCA9IHN0cihuYW1lKSwgaWNvbkltYWdlID0gIkRlZmF1bHRWaWRlby5wbmciLCB0aHVtYm5haWxJbWFnZSA9IHhibWMuZ2V0SW5mb0ltYWdlKCAiTGlzdEl0ZW0uVGh1bWIiICksIHBhdGg9bWVkaWFfdXJsICkKICAgICAgICBwbGF5ZXIucGxheSggbWVkaWFfdXJsLGxpc3RpdGVtKQogICAgICAgIHhibWMuc2xlZXAoMTAwMCkKICAgICAgICB3aGlsZSBwbGF5ZXIuaXNfYWN0aXZlOgogICAgICAgICAgICB4Ym1jLnNsZWVwKDIwMCkKICAgIGV4Y2VwdDoKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIHJldHVybiAnJwoKZGVmIGtvZGlKc29uUmVxdWVzdChwYXJhbXMpOgogICAgZGF0YSA9IGpzb24uZHVtcHMocGFyYW1zKQogICAgcmVxdWVzdCA9IHhibWMuZXhlY3V0ZUpTT05SUEMoZGF0YSkKCiAgICB0cnk6CiAgICAgICAgcmVzcG9uc2UgPSBqc29uLmxvYWRzKHJlcXVlc3QpCiAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgIHJlc3BvbnNlID0ganNvbi5sb2FkcyhyZXF1ZXN0LmRlY29kZSgndXRmLTgnLCAnaWdub3JlJykpCgogICAgdHJ5OgogICAgICAgIGlmICdyZXN1bHQnIGluIHJlc3BvbnNlOgogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbJ3Jlc3VsdCddCiAgICAgICAgcmV0dXJuIE5vbmUKICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICBsb2dnZXIud2FybigiWyVzXSAlcyIgJSAocGFyYW1zWydtZXRob2QnXSwgcmVzcG9uc2VbJ2Vycm9yJ11bJ21lc3NhZ2UnXSkpCiAgICAgICAgcmV0dXJuIE5vbmUKCmRlZiBzZXRLb2RpUHJveHkocHJveHlzZXR0aW5ncz1Ob25lKToKCiAgICBpZiBwcm94eXNldHRpbmdzPT1Ob25lOgojICAgICAgICBwcmludCAncHJveHkgc2V0IHRvIG5vdGhpbmcnCiAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsudXNlaHR0cHByb3h5IiwgInZhbHVlIjpmYWxzZX0sICJpZCI6MX0nKQogICAgZWxzZToKICAgICAgICAKICAgICAgICBwcz1wcm94eXNldHRpbmdzLnNwbGl0KCc6JykKICAgICAgICBwcm94eVVSTD1wc1swXQogICAgICAgIHByb3h5UG9ydD1wc1sxXQogICAgICAgIHByb3h5VHlwZT1wc1syXQogICAgICAgIHByb3h5VXNlcm5hbWU9Tm9uZQogICAgICAgIHByb3h5UGFzc3dvcmQ9Tm9uZQogICAgICAgIAogICAgICAgIGlmIGxlbihwcyk+MyBhbmQgJ0AnIGluIHBzWzNdOiAjamFpcm94ICMjI3Byb3h5c2V0dGluZ3MKICAgICAgICAgICAgcHJveHlVc2VybmFtZT1wc1szXS5zcGxpdCgnQCcpWzBdICNqYWlyb3ggIyMjcHNbM10KICAgICAgICAgICAgcHJveHlQYXNzd29yZD1wc1szXS5zcGxpdCgnQCcpWzFdICNqYWlyb3ggIyMjcHJveHlzZXR0aW5ncy5zcGxpdCgnQCcpWy0xXQoKICAgICAgICAjcHJpbnQgJ3Byb3h5IHNldCB0bycsIHByb3h5VHlwZSwgcHJveHlVUkwscHJveHlQb3J0CiAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsudXNlaHR0cHByb3h5IiwgInZhbHVlIjp0cnVlfSwgImlkIjoxfScpCiAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5dHlwZSIsICJ2YWx1ZSI6JyArIHN0cihwcm94eVR5cGUpICsnfSwgImlkIjoxfScpCiAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5c2VydmVyIiwgInZhbHVlIjoiJyArIHN0cihwcm94eVVSTCkgKycifSwgImlkIjoxfScpCiAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5cG9ydCIsICJ2YWx1ZSI6JyArIHN0cihwcm94eVBvcnQpICsnfSwgImlkIjoxfScpCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgaWYgbm90IHByb3h5VXNlcm5hbWU9PU5vbmU6CiAgICAgICAgICAgIHhibWMuZXhlY3V0ZUpTT05SUEMoJ3sianNvbnJwYyI6IjIuMCIsICJtZXRob2QiOiJTZXR0aW5ncy5TZXRTZXR0aW5nVmFsdWUiLCAicGFyYW1zIjp7InNldHRpbmciOiJuZXR3b3JrLmh0dHBwcm94eXVzZXJuYW1lIiwgInZhbHVlIjoiJyArIHN0cihwcm94eVVzZXJuYW1lKSArJyJ9LCAiaWQiOjF9JykKICAgICAgICAgICAgeGJtYy5leGVjdXRlSlNPTlJQQygneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5cGFzc3dvcmQiLCAidmFsdWUiOiInICsgc3RyKHByb3h5UGFzc3dvcmQpICsnIn0sICJpZCI6MX0nKQogICAgICAgCmRlZiBnZXRDb25maWd1cmVkUHJveHkoKToKICAgIHByb3h5QWN0aXZlID0ga29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay51c2VodHRwcHJveHkifSwgJ2lkJzogMX0pWyd2YWx1ZSddCiMgICAgcHJpbnQgJ3Byb3h5QWN0aXZlJyxwcm94eUFjdGl2ZQogICAgcHJveHlUeXBlID0ga29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay5odHRwcHJveHl0eXBlIn0sICdpZCc6IDF9KVsndmFsdWUnXQoKICAgIGlmIHByb3h5QWN0aXZlOiAjIFBST1hZX0hUVFAKICAgICAgICBwcm94eVVSTCA9IGtvZGlKc29uUmVxdWVzdCh7J2pzb25ycGMnOiAnMi4wJywgIm1ldGhvZCI6IlNldHRpbmdzLkdldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6Im5ldHdvcmsuaHR0cHByb3h5c2VydmVyIn0sICdpZCc6IDF9KVsndmFsdWUnXQogICAgICAgIHByb3h5UG9ydCA9IHVuaWNvZGUoa29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay5odHRwcHJveHlwb3J0In0sICdpZCc6IDF9KVsndmFsdWUnXSkKICAgICAgICBwcm94eVVzZXJuYW1lID0ga29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay5odHRwcHJveHl1c2VybmFtZSJ9LCAnaWQnOiAxfSlbJ3ZhbHVlJ10KICAgICAgICBwcm94eVBhc3N3b3JkID0ga29kaUpzb25SZXF1ZXN0KHsnanNvbnJwYyc6ICcyLjAnLCAibWV0aG9kIjoiU2V0dGluZ3MuR2V0U2V0dGluZ1ZhbHVlIiwgInBhcmFtcyI6eyJzZXR0aW5nIjoibmV0d29yay5odHRwcHJveHlwYXNzd29yZCJ9LCAnaWQnOiAxfSlbJ3ZhbHVlJ10KCiAgICAgICAgaWYgcHJveHlVc2VybmFtZSBhbmQgcHJveHlQYXNzd29yZCBhbmQgcHJveHlVUkwgYW5kIHByb3h5UG9ydDoKICAgICAgICAgICAgcmV0dXJuIHByb3h5VVJMICsgJzonICsgc3RyKHByb3h5UG9ydCkrJzonK3N0cihwcm94eVR5cGUpICsgJzonICsgcHJveHlVc2VybmFtZSArICdAJyArIHByb3h5UGFzc3dvcmQKICAgICAgICBlbGlmIHByb3h5VVJMIGFuZCBwcm94eVBvcnQ6CiAgICAgICAgICAgIHJldHVybiBwcm94eVVSTCArICc6JyArIHN0cihwcm94eVBvcnQpKyc6JytzdHIocHJveHlUeXBlKQogICAgZWxzZToKICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIApkZWYgcGxheW1lZGlhd2l0aHByb3h5KG1lZGlhX3VybCwgbmFtZSwgaWNvbkltYWdlLHByb3h5aXAscG9ydCwgcHJveHl1c2VyPU5vbmUsIHByb3h5cGFzcz1Ob25lKTogI2phaXJveAoKICAgIGlmIG1lZGlhX3VybD09Tm9uZSBvciBtZWRpYV91cmw9PScnOgogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKEZpcmVUVixVbmFibGUgdG8gcGxheSBlbXB0eSBVcmwsNTAwMCwiK2ljb24rIikiKQogICAgICAgIHJldHVybgogICAgcHJvZ3Jlc3MgPSB4Ym1jZ3VpLkRpYWxvZ1Byb2dyZXNzKCkKICAgIHByb2dyZXNzLmNyZWF0ZSgnUHJvZ3Jlc3MnLCAnUGxheWluZyB3aXRoIGN1c3RvbSBwcm94eScpCiAgICBwcm9ncmVzcy51cGRhdGUoIDEwLCAiIiwgInNldHRpbmcgcHJveHkuLiIsICIiICkKICAgIHByb3h5c2V0PUZhbHNlCiAgICBleGlzdGluZ19wcm94eT0nJwogICAgI3ByaW50ICdwbGF5bWVkaWF3aXRocHJveHknCiAgICB0cnk6CiAgICAgICAgCiAgICAgICAgZXhpc3RpbmdfcHJveHk9Z2V0Q29uZmlndXJlZFByb3h5KCkKICAgICAgICBwcmludCAnZXhpc3RpbmdfcHJveHknLGV4aXN0aW5nX3Byb3h5CiAgICAgICAgI3JlYWQgYW5kIHNldCBoZXJlCiAgICAgICAgI2phaXJveAogICAgICAgIGlmIG5vdCBwcm94eXVzZXIgPT0gTm9uZToKICAgICAgICAgICAgc2V0S29kaVByb3h5KCBwcm94eWlwICsgJzonICsgcG9ydCArICc6MDonICsgcHJveHl1c2VyICsgJ0AnICsgcHJveHlwYXNzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNldEtvZGlQcm94eSggcHJveHlpcCArICc6JyArIHBvcnQgKyAnOjAnKQoKICAgICAgICBwcmludCAncHJveHkgc2V0dGluZyBjb21wbGV0ZSBwbGF5aW5nJyxtZWRpYV91cmwKICAgICAgICBwcm94eXNldD1UcnVlCiAgICAgICAgcHJvZ3Jlc3MudXBkYXRlKCA4MCwgIiIsICJzZXR0aW5nIHByb3h5IGNvbXBsZXRlLCBub3cgcGxheWluZyIsICIiICkKICAgICAgICAKCiAgICAgICAgaW1wb3J0ICBDdXN0b21QbGF5ZXIKICAgICAgICBwbGF5ZXIgPSBDdXN0b21QbGF5ZXIuTXlYQk1DUGxheWVyKCkKICAgICAgICBwbGF5ZXIucGRpYWxvZ3VlPT1wcm9ncmVzcwogICAgICAgIGxpc3RpdGVtID0geGJtY2d1aS5MaXN0SXRlbSggbGFiZWwgPSBzdHIobmFtZSksIGljb25JbWFnZSA9IGljb25JbWFnZSwgdGh1bWJuYWlsSW1hZ2UgPSB4Ym1jLmdldEluZm9JbWFnZSggIkxpc3RJdGVtLlRodW1iIiApLCBwYXRoPW1lZGlhX3VybCApCiAgICAgICAgcGxheWVyLnBsYXkoIG1lZGlhX3VybCxsaXN0aXRlbSkKICAgICAgICB4Ym1jLnNsZWVwKDEwMDApCiAgICAgICAgI3doaWxlIHBsYXllci5pc19hY3RpdmU6CiAgICAgICAgIyAgICB4Ym1jLnNsZWVwKDIwMCkKICAgICAgICBpbXBvcnQgdGltZQogICAgICAgIGJlZm9yZXN0YXJ0PXRpbWUudGltZSgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBwbGF5ZXIuaXNfYWN0aXZlOgogICAgICAgICAgICAgICAgeGJtYy5zbGVlcCgxMDAwKSAgICAgICAKICAgICAgICAgICAgICAgIGlmIHBsYXllci51cmxwbGF5ZWQ9PUZhbHNlIGFuZCB0aW1lLnRpbWUoKS1iZWZvcmVzdGFydD4xMjoKICAgICAgICAgICAgICAgICAgICBwcmludCAnZmFpbGVkISEhJwogICAgICAgICAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKEZpcmVUVixVbmFibGUgdG8gcGxheSBjaGVjayBwcm94eSw1MDAwLCIraWNvbisiKSIpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICN4Ym1jLnNsZWVwKDEwMDApCiAgICAgICAgZXhjZXB0OiBwYXNzCgogICAgICAgIHByb2dyZXNzLmNsb3NlKCkKICAgICAgICBwcm9ncmVzcz1Ob25lCiAgICBleGNlcHQ6CiAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpCiAgICBpZiBwcm9ncmVzczoKICAgICAgICBwcm9ncmVzcy5jbG9zZSgpCiAgICBpZiBwcm94eXNldDoKICAgICAgICBwcmludCAnbm93IHJlc2V0dGluZyB0aGUgcHJveHkgYmFjaycKICAgICAgICBzZXRLb2RpUHJveHkoZXhpc3RpbmdfcHJveHkpCiAgICAgICAgcHJpbnQgJ3Jlc2V0IGhlcmUnCiAgICByZXR1cm4gJycKCmRlZiBnZXRfc2F3X3J0bXAocGFnZV92YWx1ZSwgcmVmZXJlcj1Ob25lKToKICAgIGlmIHJlZmVyZXI6CiAgICAgICAgcmVmZXJlcj1bKCdSZWZlcmVyJyxyZWZlcmVyKV0KICAgIGlmIHBhZ2VfdmFsdWUuc3RhcnRzd2l0aCgiaHR0cCIpOgogICAgICAgIHBhZ2VfdXJsPXBhZ2VfdmFsdWUKICAgICAgICBwYWdlX3ZhbHVlPSBnZXRVcmwocGFnZV92YWx1ZSxoZWFkZXJzPXJlZmVyZXIpCgogICAgc3RyX3BhdHRlcm49IihldmFsXChmdW5jdGlvblwocCxhLGMsayxlLCg/OnJ8ZCkuKikiCgogICAgcmVnX3Jlcz1yZS5jb21waWxlKHN0cl9wYXR0ZXJuKS5maW5kYWxsKHBhZ2VfdmFsdWUpCiAgICByPSIiCiAgICBpZiByZWdfcmVzIGFuZCBsZW4ocmVnX3Jlcyk+MDoKICAgICAgICBmb3IgdiBpbiByZWdfcmVzOgogICAgICAgICAgICByMT1nZXRfdW5wYWNrZWQodikKICAgICAgICAgICAgcjI9cmVfbWUocjEsJ1wnKC4qPylcJycpCiAgICAgICAgICAgIGlmICd1bmVzY2FwZScgaW4gcjE6CiAgICAgICAgICAgICAgICByMT11cmxsaWIudW5xdW90ZShyMikKICAgICAgICAgICAgcis9cjErJ1xuJwojICAgICAgICBwcmludCAnZmluYWwgdmFsdWUgaXMgJyxyCgogICAgICAgIHBhZ2VfdXJsPXJlX21lKHIsJ3NyYz0iKC4qPykiJykKCiAgICAgICAgcGFnZV92YWx1ZT0gZ2V0VXJsKHBhZ2VfdXJsLGhlYWRlcnM9cmVmZXJlcikKCiAgICAjcHJpbnQgcGFnZV92YWx1ZQoKICAgIHJ0bXA9cmVfbWUocGFnZV92YWx1ZSwnc3RyZWFtZXJcJy4qP1wnKC4qPylcJ1wpJykKICAgIHBsYXlwYXRoPXJlX21lKHBhZ2VfdmFsdWUsJ2ZpbGVcJyxcc1wnKC4qPylcJycpCgoKICAgIHJldHVybiBydG1wKycgcGxheXBhdGg9JytwbGF5cGF0aCArJyBwYWdlVXJsPScrcGFnZV91cmwKCmRlZiBnZXRfbGV0b25fcnRtcChwYWdlX3ZhbHVlLCByZWZlcmVyPU5vbmUpOgogICAgaWYgcmVmZXJlcjoKICAgICAgICByZWZlcmVyPVsoJ1JlZmVyZXInLHJlZmVyZXIpXQogICAgaWYgcGFnZV92YWx1ZS5zdGFydHN3aXRoKCJodHRwIik6CiAgICAgICAgcGFnZV92YWx1ZT0gZ2V0VXJsKHBhZ2VfdmFsdWUsaGVhZGVycz1yZWZlcmVyKQogICAgc3RyX3BhdHRlcm49InZhciBhID0gKC4qPyk7XHMqdmFyIGIgPSAoLio/KTtccyp2YXIgYyA9ICguKj8pO1xzKnZhciBkID0gKC4qPyk7XHMqdmFyIGYgPSAoLio/KTtccyp2YXIgdl9wYXJ0ID0gJyguKj8pJzsiCiAgICByZWdfcmVzPXJlLmNvbXBpbGUoc3RyX3BhdHRlcm4pLmZpbmRhbGwocGFnZV92YWx1ZSlbMF0KCiAgICBhLGIsYyxkLGYsdj0ocmVnX3JlcykKICAgIGY9aW50KGYpCiAgICBhPWludChhKS9mCiAgICBiPWludChiKS9mCiAgICBjPWludChjKS9mCiAgICBkPWludChkKS9mCgogICAgcmV0PSAncnRtcDovLycgKyBzdHIoYSkgKyAnLicgKyBzdHIoYikgKyAnLicgKyBzdHIoYykgKyAnLicgKyBzdHIoZCkgKyB2CiAgICByZXR1cm4gcmV0CgpkZWYgY3JlYXRlTTN1Rm9yRGFzaCh1cmwsdXNlcmFnZW50PU5vbmUpOgogICAgc3RyPScjRVhUTTNVJwogICAgc3RyKz0nXG4jRVhULVgtU1RSRUFNLUlORjpQUk9HUkFNLUlEPTEsQkFORFdJRFRIPTM2MTgxNicKICAgIHN0cis9J1xuJyt1cmwrJyZieXRlcz0wLTIwMDAwMCcjKyd8VXNlci1BZ2VudD0nK3VzZXJhZ2VudAogICAgc291cmNlX2ZpbGUgPSBvcy5wYXRoLmpvaW4ocHJvZmlsZSwgJ3Rlc3RmaWxlLm0zdScpCiAgICBzdHIrPSdcbicKICAgIFNhdmVUb0ZpbGUoc291cmNlX2ZpbGUsc3RyKQogICAgI3JldHVybiAnQzovVXNlcnMvc2hhbmkvRG93bmxvYWRzL3Rlc3QubTN1OCcKICAgIHJldHVybiBzb3VyY2VfZmlsZQoKZGVmIFNhdmVUb0ZpbGUoZmlsZV9uYW1lLHBhZ2VfZGF0YSxhcHBlbmQ9RmFsc2UpOgogICAgaWYgYXBwZW5kOgogICAgICAgIGYgPSBvcGVuKGZpbGVfbmFtZSwgJ2EnKQogICAgICAgIGYud3JpdGUocGFnZV9kYXRhKQogICAgICAgIGYuY2xvc2UoKQogICAgZWxzZToKICAgICAgICBmPW9wZW4oZmlsZV9uYW1lLCd3YicpCiAgICAgICAgZi53cml0ZShwYWdlX2RhdGEpCiAgICAgICAgZi5jbG9zZSgpCiAgICAgICAgcmV0dXJuICcnCgpkZWYgTG9hZEZpbGUoZmlsZV9uYW1lKToKICAgIGY9b3BlbihmaWxlX25hbWUsJ3JiJykKICAgIGQ9Zi5yZWFkKCkKICAgIGYuY2xvc2UoKQogICAgcmV0dXJuIGQKCmRlZiBnZXRfcGFja2VkX2lwaG9uZXR2X3VybChwYWdlX2RhdGEpOgogICAgaW1wb3J0IHJlLGJhc2U2NCx1cmxsaWIKICAgIHM9cGFnZV9kYXRhCiAgICB3aGlsZSAnZ2VoKCcgaW4gczoKICAgICAgICBpZiBzLnN0YXJ0c3dpdGgoJ2xvbCgnKTogcz1zWzU6LTFdCiMgICAgICAgcHJpbnQgJ3MgaXMgJyxzCiAgICAgICAgcz1yZS5jb21waWxlKCciKC4qPykiJykuZmluZGFsbChzKVswXQogICAgICAgIHM9ICBiYXNlNjQuYjY0ZGVjb2RlKHMpCiAgICAgICAgcz11cmxsaWIudW5xdW90ZShzKQogICAgcHJpbnQgcwogICAgcmV0dXJuIHMKCmRlZiBnZXRfZmVycmFyaV91cmwocGFnZV9kYXRhKToKIyAgICBwcmludCAnZ2V0X2RhZ191cmwyJyxwYWdlX2RhdGEKICAgIHBhZ2VfZGF0YTI9Z2V0VXJsKHBhZ2VfZGF0YSkKICAgIHBhdHQ9JyhodHRwLiopJwogICAgaW1wb3J0IHV1aWQKICAgIHBsYXliYWNrPXN0cih1dWlkLnV1aWQxKCkpLnVwcGVyKCkKICAgIGxpbmtzPXJlLmNvbXBpbGUocGF0dCkuZmluZGFsbChwYWdlX2RhdGEyKQogICAgaGVhZGVycz1bKCdYLVBsYXliYWNrLVNlc3Npb24tSWQnLHBsYXliYWNrKV0KICAgIGZvciBsIGluIGxpbmtzOgogICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHBhZ2VfZGF0YXRlbXA9Z2V0VXJsKGwsaGVhZGVycz1oZWFkZXJzKQoKICAgICAgICBleGNlcHQ6IHBhc3MKCiAgICByZXR1cm4gcGFnZV9kYXRhKyd8JlgtUGxheWJhY2stU2Vzc2lvbi1JZD0nK3BsYXliYWNrCgpkZWYgZ2V0X2RhZ191cmwocGFnZV9kYXRhKToKIyAgICBwcmludCAnZ2V0X2RhZ191cmwnLHBhZ2VfZGF0YQogICAgaWYgcGFnZV9kYXRhLnN0YXJ0c3dpdGgoJ2h0dHA6Ly9kYWcudG90YWwtc3RyZWFtLm5ldCcpOgogICAgICAgIGhlYWRlcnM9WygnVXNlci1BZ2VudCcsJ1ZlcmlzbW8tQmxhY2tVSV8oMi40LjcuNS44LjAuMzQpJyldCiAgICAgICAgcGFnZV9kYXRhPWdldFVybChwYWdlX2RhdGEsaGVhZGVycz1oZWFkZXJzKQoKICAgIGlmICcxMjcuMC4wLjEnIGluIHBhZ2VfZGF0YToKICAgICAgICByZXR1cm4gcmV2aXN0X2RhZyhwYWdlX2RhdGEpCiAgICBlbGlmIHJlX21lKHBhZ2VfZGF0YSwgJ3dtc0F1dGhTaWduJTNEKFteJSZdKyknKSAhPSAnJzoKICAgICAgICBmaW5hbF91cmwgPSByZV9tZShwYWdlX2RhdGEsICcmdmVyX3Q9KFteJl0rKSYnKSArICc/d21zQXV0aFNpZ249JyArIHJlX21lKHBhZ2VfZGF0YSwgJ3dtc0F1dGhTaWduJTNEKFteJSZdKyknKSArICc9PS9tcDQ6JyArIHJlX21lKHBhZ2VfZGF0YSwgJ1xcP3k9KFteJl0rKSYnKQogICAgZWxzZToKICAgICAgICBmaW5hbF91cmwgPSByZV9tZShwYWdlX2RhdGEsICdocmVmPSIoW14iXSspIlteIl0rJCcpCiAgICAgICAgaWYgbGVuKGZpbmFsX3VybCk9PTA6CiAgICAgICAgICAgIGZpbmFsX3VybD1wYWdlX2RhdGEKICAgIGZpbmFsX3VybCA9IGZpbmFsX3VybC5yZXBsYWNlKCcgJywgJyUyMCcpCiAgICByZXR1cm4gZmluYWxfdXJsCgpkZWYgcmVfbWUoZGF0YSwgcmVfcGF0dGVuKToKICAgIG1hdGNoID0gJycKICAgIG0gPSByZS5zZWFyY2gocmVfcGF0dGVuLCBkYXRhKQogICAgaWYgbSAhPSBOb25lOgogICAgICAgIG1hdGNoID0gbS5ncm91cCgxKQogICAgZWxzZToKICAgICAgICBtYXRjaCA9ICcnCiAgICByZXR1cm4gbWF0Y2gKCmRlZiByZXZpc3RfZGFnKHBhZ2VfZGF0YSk6CiAgICBmaW5hbF91cmwgPSAnJwogICAgaWYgJzEyNy4wLjAuMScgaW4gcGFnZV9kYXRhOgogICAgICAgIGZpbmFsX3VybCA9IHJlX21lKHBhZ2VfZGF0YSwgJyZ2ZXJfdD0oW14mXSspJicpICsgJyBsaXZlPXRydWUgdGltZW91dD0xNSBwbGF5cGF0aD0nICsgcmVfbWUocGFnZV9kYXRhLCAnXFw/eT0oW2EtekEtWjAtOS1fXFwuQF0rKScpCgogICAgaWYgcmVfbWUocGFnZV9kYXRhLCAndG9rZW49KFteJl0rKSYnKSAhPSAnJzoKICAgICAgICBmaW5hbF91cmwgPSBmaW5hbF91cmwgKyAnP3Rva2VuPScgKyByZV9tZShwYWdlX2RhdGEsICd0b2tlbj0oW14mXSspJicpCiAgICBlbGlmIHJlX21lKHBhZ2VfZGF0YSwgJ3dtc0F1dGhTaWduJTNEKFteJSZdKyknKSAhPSAnJzoKICAgICAgICBmaW5hbF91cmwgPSByZV9tZShwYWdlX2RhdGEsICcmdmVyX3Q9KFteJl0rKSYnKSArICc/d21zQXV0aFNpZ249JyArIHJlX21lKHBhZ2VfZGF0YSwgJ3dtc0F1dGhTaWduJTNEKFteJSZdKyknKSArICc9PS9tcDQ6JyArIHJlX21lKHBhZ2VfZGF0YSwgJ1xcP3k9KFteJl0rKSYnKQogICAgZWxzZToKICAgICAgICBmaW5hbF91cmwgPSByZV9tZShwYWdlX2RhdGEsICdIUkVGPSIoW14iXSspIicpCgogICAgaWYgJ2RhZzEuYXN4JyBpbiBmaW5hbF91cmw6CiAgICAgICAgcmV0dXJuIGdldF9kYWdfdXJsKGZpbmFsX3VybCkKCiAgICBpZiAnZGV2aW5saXZlZnMuZnBsaXZlLm5ldCcgbm90IGluIGZpbmFsX3VybDoKICAgICAgICBmaW5hbF91cmwgPSBmaW5hbF91cmwucmVwbGFjZSgnZGV2aW5saXZlJywgJ2ZsaXZlJykKICAgIGlmICdwZXJtbGl2ZWZzLmZwbGl2ZS5uZXQnIG5vdCBpbiBmaW5hbF91cmw6CiAgICAgICAgZmluYWxfdXJsID0gZmluYWxfdXJsLnJlcGxhY2UoJ3Blcm1saXZlJywgJ2ZsaXZlJykKICAgIHJldHVybiBmaW5hbF91cmwKCmRlZiBnZXRfdW53aXNlKCBzdHJfZXZhbCk6CiAgICBwYWdlX3ZhbHVlPSIiCiAgICB0cnk6CiAgICAgICAgc3M9IncsaSxzLGU9KCIrc3RyX2V2YWwrJyknCiAgICAgICAgZXhlYyAoc3MpCiAgICAgICAgcGFnZV92YWx1ZT11bndpc2VfZnVuYyh3LGkscyxlKQogICAgZXhjZXB0OiB0cmFjZWJhY2sucHJpbnRfZXhjKGZpbGU9c3lzLnN0ZG91dCkKICAgICNwcmludCAndW5wYWNrZWQnLHBhZ2VfdmFsdWUKICAgIHJldHVybiBwYWdlX3ZhbHVlCgpkZWYgdW53aXNlX2Z1bmMoIHcsIGksIHMsIGUpOgogICAgbElsbCA9IDAKICAgIGxsMUkgPSAwCiAgICBJbDFsID0gMAogICAgbGwxbCA9IFtdCiAgICBsMWxJID0gW10KICAgIHdoaWxlIFRydWU6CiAgICAgICAgaWYgKGxJbGwgPCA1KToKICAgICAgICAgICAgbDFsSS5hcHBlbmQod1tsSWxsXSkKICAgICAgICBlbGlmIChsSWxsIDwgbGVuKHcpKToKICAgICAgICAgICAgbGwxbC5hcHBlbmQod1tsSWxsXSkKICAgICAgICBsSWxsKz0xCiAgICAgICAgaWYgKGxsMUkgPCA1KToKICAgICAgICAgICAgbDFsSS5hcHBlbmQoaVtsbDFJXSkKICAgICAgICBlbGlmIChsbDFJIDwgbGVuKGkpKToKICAgICAgICAgICAgbGwxbC5hcHBlbmQoaVtsbDFJXSkKICAgICAgICBsbDFJKz0xCiAgICAgICAgaWYgKElsMWwgPCA1KToKICAgICAgICAgICAgbDFsSS5hcHBlbmQoc1tJbDFsXSkKICAgICAgICBlbGlmIChJbDFsIDwgbGVuKHMpKToKICAgICAgICAgICAgbGwxbC5hcHBlbmQoc1tJbDFsXSkKICAgICAgICBJbDFsKz0xCiAgICAgICAgaWYgKGxlbih3KSArIGxlbihpKSArIGxlbihzKSArIGxlbihlKSA9PSBsZW4obGwxbCkgKyBsZW4obDFsSSkgKyBsZW4oZSkpOgogICAgICAgICAgICBicmVhawoKICAgIGxJMWwgPSAnJy5qb2luKGxsMWwpIy5qb2luKCcnKTsKICAgIEkxbEkgPSAnJy5qb2luKGwxbEkpIy5qb2luKCcnKTsKICAgIGxsMUkgPSAwCiAgICBsMWxsID0gW10KICAgIGZvciBsSWxsIGluIHJhbmdlKDAsbGVuKGxsMWwpLDIpOgogICAgICAgICNwcmludCAnYXJyYXkgaScsbElsbCxsZW4obGwxbCkKICAgICAgICBsbDExID0gLTEKICAgICAgICBpZiAoIG9yZChJMWxJW2xsMUldKSAlIDIpOgogICAgICAgICAgICBsbDExID0gMQogICAgICAgICNwcmludCAndmFsIGlzICcsIGxJMWxbbElsbDogbElsbCsyXQogICAgICAgIGwxbGwuYXBwZW5kKGNociggICAgaW50KGxJMWxbbElsbDogbElsbCsyXSwgMzYpIC0gbGwxMSkpCiAgICAgICAgbGwxSSs9MQogICAgICAgIGlmIChsbDFJID49IGxlbihsMWxJKSk6CiAgICAgICAgICAgIGxsMUkgPSAwCiAgICByZXQ9Jycuam9pbihsMWxsKQogICAgaWYgJ2V2YWwoZnVuY3Rpb24odyxpLHMsZSknIGluIHJldDoKIyAgICAgICAgcHJpbnQgJ1NUSUxMIEdPaW5nJwogICAgICAgIHJldD1yZS5jb21waWxlKCdldmFsXChmdW5jdGlvblwodyxpLHMsZVwpLip9XCgoLio/KVwpJykuZmluZGFsbChyZXQpWzBdCiAgICAgICAgcmV0dXJuIGdldF91bndpc2UocmV0KQogICAgZWxzZToKIyAgICAgICAgcHJpbnQgJ0ZJTklTSEVEJwogICAgICAgIHJldHVybiByZXQKCmRlZiBnZXRfdW5wYWNrZWQoIHBhZ2VfdmFsdWUsIHJlZ2V4X2Zvcl90ZXh0PScnLCBpdGVyYXRpb25zPTEsIHRvdGFsX2l0ZXJhdGlvbj0xKToKICAgIHRyeToKICAgICAgICByZWdfZGF0YT1Ob25lCiAgICAgICAgaWYgcGFnZV92YWx1ZS5zdGFydHN3aXRoKCJodHRwIik6CiAgICAgICAgICAgIHBhZ2VfdmFsdWU9IGdldFVybChwYWdlX3ZhbHVlKQojICAgICAgICBwcmludCAncGFnZV92YWx1ZScscGFnZV92YWx1ZQogICAgICAgIGlmIHJlZ2V4X2Zvcl90ZXh0IGFuZCBsZW4ocmVnZXhfZm9yX3RleHQpPjA6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHBhZ2VfdmFsdWU9cmUuY29tcGlsZShyZWdleF9mb3JfdGV4dCkuZmluZGFsbChwYWdlX3ZhbHVlKVswXSAjZ2V0IHRoZSBqcyB2YXJpYWJsZQogICAgICAgICAgICBleGNlcHQ6IHJldHVybiAnTk9UUEFDS0VEJwoKICAgICAgICBwYWdlX3ZhbHVlPXVucGFjayhwYWdlX3ZhbHVlLGl0ZXJhdGlvbnMsdG90YWxfaXRlcmF0aW9uKQogICAgZXhjZXB0OgogICAgICAgIHBhZ2VfdmFsdWU9J1VOUEFDS0VERkFJTEVEJwogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoZmlsZT1zeXMuc3Rkb3V0KQojICAgIHByaW50ICd1bnBhY2tlZCcscGFnZV92YWx1ZQogICAgaWYgJ3NhdjFsaXZlLnR2JyBpbiBwYWdlX3ZhbHVlOgogICAgICAgIHBhZ2VfdmFsdWU9cGFnZV92YWx1ZS5yZXBsYWNlKCdzYXYxbGl2ZS50dicsJ3Nhd2xpdmUudHYnKSAjcXVpY2sgZml4IHNvbWUgYnVnIHNvbWV3aGVyZQojICAgICAgICBwcmludCAnc2F2MSB1bnBhY2tlZCcscGFnZV92YWx1ZQogICAgcmV0dXJuIHBhZ2VfdmFsdWUKCmRlZiB1bnBhY2soc0phdmFzY3JpcHQsaXRlcmF0aW9uPTEsIHRvdGFsaXRlcmF0aW9ucz0yICApOgojICAgIHByaW50ICdpdGVyYXRpb24nLGl0ZXJhdGlvbgogICAgaWYgc0phdmFzY3JpcHQuc3RhcnRzd2l0aCgndmFyIF8weGNiOGE9Jyk6CiAgICAgICAgYVNwbGl0PXNKYXZhc2NyaXB0LnNwbGl0KCd2YXIgXzB4Y2I4YT0nKQogICAgICAgIHNzPSJteWFycmF5PSIrYVNwbGl0WzFdLnNwbGl0KCJldmFsKCIpWzBdCiAgICAgICAgZXhlYyhzcykKICAgICAgICBhMT02MgogICAgICAgIGMxPWludChhU3BsaXRbMV0uc3BsaXQoIiw2MiwiKVsxXS5zcGxpdCgnLCcpWzBdKQogICAgICAgIHAxPW15YXJyYXlbMF0KICAgICAgICBrMT1teWFycmF5WzNdCiAgICAgICAgd2l0aCBvcGVuKCd0ZW1wIGZpbGUnK3N0cihpdGVyYXRpb24pKycuanMnLCAid2IiKSBhcyBmaWxld3JpdGVyOgogICAgICAgICAgICBmaWxld3JpdGVyLndyaXRlKHN0cihrMSkpCiAgICAgICAgI2FhPTEvMAogICAgZWxzZToKCiAgICAgICAgaWYgInJuIHB9KCciIGluIHNKYXZhc2NyaXB0OgogICAgICAgICAgICBhU3BsaXQgPSBzSmF2YXNjcmlwdC5zcGxpdCgicm4gcH0oJyIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYVNwbGl0ID0gc0phdmFzY3JpcHQuc3BsaXQoInJuIEF9KCciKQojICAgICAgICBwcmludCBhU3BsaXQKCiAgICAgICAgcDEsYTEsYzEsazE9KCcnLCcwJywnMCcsJycpCgogICAgICAgIHNzPSJwMSxhMSxjMSxrMT0oJyIrYVNwbGl0WzFdLnNwbGl0KCIuc3BsaSIpWzBdKycpJwogICAgICAgIGV4ZWMoc3MpCiAgICBrMT1rMS5zcGxpdCgnfCcpCiAgICBhU3BsaXQgPSBhU3BsaXRbMV0uc3BsaXQoIikpJyIpCiMgICAgcHJpbnQgJyBwIGFycmF5IGlzICcsbGVuKGFTcGxpdCkKIyAgIHByaW50IGxlbihhU3BsaXQgKQoKICAgICNwPXN0cihhU3BsaXRbMF0rJykpJykjLnJlcGxhY2UoIlxcIiwiIikjLnJlcGxhY2UoJ1xcXFwnLCdcXCcpCgogICAgI3ByaW50IGFTcGxpdFsxXQogICAgI2FTcGxpdCA9IGFTcGxpdFsxXS5zcGxpdCgiLCIpCiAgICAjcHJpbnQgYVNwbGl0WzBdCiAgICAjYSA9IGludChhU3BsaXRbMV0pCiAgICAjYyA9IGludChhU3BsaXRbMl0pCiAgICAjayA9IGFTcGxpdFszXS5zcGxpdCgiLiIpWzBdLnJlcGxhY2UoIiciLCAnJykuc3BsaXQoJ3wnKQogICAgI2E9aW50KGEpCiAgICAjYz1pbnQoYykKCiAgICAjcD1wLnJlcGxhY2UoJ1xcJywgJycpCiMgICAgcHJpbnQgJ3AgdmFsIGlzICcscFswOjEwMF0sJy4uLi4uLi4uLi4uLicscFstMTAwOl0sbGVuKHApCiMgICAgcHJpbnQgJ3AxIHZhbCBpcyAnLHAxWzA6MTAwXSwnLi4uLi4uLi4uLi4uJyxwMVstMTAwOl0sbGVuKHAxKQoKICAgICNwcmludCBhLGExCiAgICAjcHJpbnQgYyxhMQogICAgI3ByaW50ICdrIHZhbCBpcyAnLGtbLTEwOl0sbGVuKGspCiMgICAgcHJpbnQgJ2sxIHZhbCBpcyAnLGsxWy0xMDpdLGxlbihrMSkKICAgIGUgPSAnJwogICAgZCA9ICcnIzMyODIzCgogICAgI3NVbnBhY2tlZCA9IHN0cihfX3VucGFjayhwLCBhLCBjLCBrLCBlLCBkKSkKICAgIHNVbnBhY2tlZDEgPSBzdHIoX191bnBhY2socDEsIGExLCBjMSwgazEsIGUsIGQsaXRlcmF0aW9uKSkKCiAgICAjcHJpbnQgc1VucGFja2VkWzoyMDBdKycuLi4uJytzVW5wYWNrZWRbLTEwMDpdLCBsZW4oc1VucGFja2VkKQojICAgIHByaW50IHNVbnBhY2tlZDFbOjIwMF0rJy4uLi4nK3NVbnBhY2tlZDFbLTEwMDpdLCBsZW4oc1VucGFja2VkMSkKCiAgICAjZXhlYygnc1VucGFja2VkMT0iJytzVW5wYWNrZWQxKyciJykKICAgIGlmIGl0ZXJhdGlvbj49dG90YWxpdGVyYXRpb25zOgojICAgICAgICBwcmludCAnZmluYWwgcmVzJyxzVW5wYWNrZWQxWzoyMDBdKycuLi4uJytzVW5wYWNrZWQxWy0xMDA6XSwgbGVuKHNVbnBhY2tlZDEpCiAgICAgICAgcmV0dXJuIHNVbnBhY2tlZDEjLnJlcGxhY2UoJ1xcXFwnLCAnXFwnKQogICAgZWxzZToKIyAgICAgICAgcHJpbnQgJ2ZpbmFsIHJlcyBmb3IgdGhpcyBpdGVyYXRpb24gaXMnLGl0ZXJhdGlvbgogICAgICAgIHJldHVybiB1bnBhY2soc1VucGFja2VkMSxpdGVyYXRpb24rMSkjLnJlcGxhY2UoJ1xcJywgJycpLGl0ZXJhdGlvbikjLnJlcGxhY2UoJ1xcJywgJycpOyN1bnBhY2soc1VucGFja2VkLnJlcGxhY2UoJ1xcJywgJycpKQoKZGVmIF9fdW5wYWNrKHAsIGEsIGMsIGssIGUsIGQsIGl0ZXJhdGlvbix2PTEpOgoKICAgICN3aXRoIG9wZW4oJ2JlZm9yZSBmaWxlJytzdHIoaXRlcmF0aW9uKSsnLmpzJywgIndiIikgYXMgZmlsZXdyaXRlcjoKICAgICMgICAgZmlsZXdyaXRlci53cml0ZShzdHIocCkpCiAgICB3aGlsZSAoYyA+PSAxKToKICAgICAgICBjID0gYyAtMQogICAgICAgIGlmIChrW2NdKToKICAgICAgICAgICAgYWE9c3RyKF9faXRvYU5ldyhjLCBhKSkKICAgICAgICAgICAgaWYgdj09MToKICAgICAgICAgICAgICAgIHA9cmUuc3ViKCdcXGInICsgYWEgKydcXGInLCBrW2NdLCBwKSMgVEhJUyBJUyBCbG9vZHkgc2xvdyEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHA9ZmluZEFuZFJlcGxhY2VXb3JkKHAsYWEsa1tjXSkKCiAgICAgICAgICAgICNwPWZpbmRBbmRSZXBsYWNlV29yZChwLGFhLGtbY10pCgoKICAgICN3aXRoIG9wZW4oJ2FmdGVyIGZpbGUnK3N0cihpdGVyYXRpb24pKycuanMnLCAid2IiKSBhcyBmaWxld3JpdGVyOgogICAgIyAgICBmaWxld3JpdGVyLndyaXRlKHN0cihwKSkKICAgIHJldHVybiBwCgojCiNmdW5jdGlvbiBlcXVhbGF2ZW50IHRvIHJlLnN1YignXFxiJyArIGFhICsnXFxiJywga1tjXSwgcCkKZGVmIGZpbmRBbmRSZXBsYWNlV29yZChzb3VyY2Vfc3RyLCB3b3JkX3RvX2ZpbmQscmVwbGFjZV93aXRoKToKICAgIHNwbGl0cz1Ob25lCiAgICBzcGxpdHM9c291cmNlX3N0ci5zcGxpdCh3b3JkX3RvX2ZpbmQpCiAgICBpZiBsZW4oc3BsaXRzKT4xOgogICAgICAgIG5ld19zdHJpbmc9W10KICAgICAgICBjdXJyZW50X2luZGV4PTAKICAgICAgICBmb3IgY3VycmVudF9zcGxpdCBpbiBzcGxpdHM6CiAgICAgICAgICAgICNwcmludCAnaGVyZScsaQogICAgICAgICAgICBuZXdfc3RyaW5nLmFwcGVuZChjdXJyZW50X3NwbGl0KQogICAgICAgICAgICB2YWw9d29yZF90b19maW5kI2J5IGRlZmF1bHQgYXNzdW1lIGl0IHdhcyB3cm9uZyB0byBzcGxpdAoKICAgICAgICAgICAgI2lmIGl0cyBmaXJzdCBvbmUgYW5kIGl0ZW0gaXMgYmxhbmsgdGhlbiBjaGVjayBuZXh0IGl0ZW0gaXMgdmFsaWQgb3Igbm90CiAgICAgICAgICAgIGlmIGN1cnJlbnRfaW5kZXg9PWxlbihzcGxpdHMpLTE6CiAgICAgICAgICAgICAgICB2YWw9JycgIyBsYXN0IG9uZSBub3RoaW5nIHRvIGFwcGVuZCBub3JtYWxseQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgbGVuKGN1cnJlbnRfc3BsaXQpPT0wOiAjaWYgYmxhbmsgY2hlY2sgbmV4dCBvbmUgd2l0aCBjdXJyZW50IHNwbGl0IHZhbHVlCiAgICAgICAgICAgICAgICAgICAgaWYgKCBsZW4oc3BsaXRzW2N1cnJlbnRfaW5kZXgrMV0pPT0wIGFuZCB3b3JkX3RvX2ZpbmRbMF0ubG93ZXIoKSBub3QgaW4gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MF8nKSBvciAobGVuKHNwbGl0c1tjdXJyZW50X2luZGV4KzFdKT4wICBhbmQgc3BsaXRzW2N1cnJlbnRfaW5kZXgrMV1bMF0ubG93ZXIoKSBub3QgaW4gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MF8nKTojIGZpcnN0IGp1c3QganVzdCBjaGVjayBuZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1yZXBsYWNlX3dpdGgKICAgICAgICAgICAgICAgICNub3QgYmxhbmssIHRoZW4gY2hlY2sgY3VycmVudCBlbmR2YWx1ZSBhbmQgbmV4dCBmaXJzdCB2YWx1ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXRzW2N1cnJlbnRfaW5kZXhdWy0xXS5sb3dlcigpIG5vdCBpbiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwXycpIGFuZCAoKCBsZW4oc3BsaXRzW2N1cnJlbnRfaW5kZXgrMV0pPT0wIGFuZCB3b3JkX3RvX2ZpbmRbMF0ubG93ZXIoKSBub3QgaW4gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MF8nKSBvciAobGVuKHNwbGl0c1tjdXJyZW50X2luZGV4KzFdKT4wICBhbmQgc3BsaXRzW2N1cnJlbnRfaW5kZXgrMV1bMF0ubG93ZXIoKSBub3QgaW4gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MF8nKSk6IyBmaXJzdCBqdXN0IGp1c3QgY2hlY2sgbmV4dAogICAgICAgICAgICAgICAgICAgICAgICB2YWw9cmVwbGFjZV93aXRoCgogICAgICAgICAgICBuZXdfc3RyaW5nLmFwcGVuZCh2YWwpCiAgICAgICAgICAgIGN1cnJlbnRfaW5kZXgrPTEKICAgICAgICAjYWFhYT0xLzAKICAgICAgICBzb3VyY2Vfc3RyPScnLmpvaW4obmV3X3N0cmluZykKICAgIHJldHVybiBzb3VyY2Vfc3RyCgpkZWYgX19pdG9hKG51bSwgcmFkaXgpOgojICAgIHByaW50ICdudW0gcmVkJyxudW0sIHJhZGl4CiAgICByZXN1bHQgPSAiIgogICAgaWYgbnVtPT0wOiByZXR1cm4gJzAnCiAgICB3aGlsZSBudW0gPiAwOgogICAgICAgIHJlc3VsdCA9ICIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoiW251bSAlIHJhZGl4XSArIHJlc3VsdAogICAgICAgIG51bSAvPSByYWRpeAogICAgcmV0dXJuIHJlc3VsdAoKZGVmIF9faXRvYU5ldyhjYywgYSk6CiAgICBhYT0iIiBpZiBjYyA8IGEgZWxzZSBfX2l0b2FOZXcoaW50KGNjIC8gYSksYSkKICAgIGNjID0gKGNjICUgYSkKICAgIGJiPWNocihjYyArIDI5KSBpZiBjYz4gMzUgZWxzZSBzdHIoX19pdG9hKGNjLDM2KSkKICAgIHJldHVybiBhYStiYgoKZGVmIGdldENvb2tpZXNTdHJpbmcoY29va2llSmFyKToKICAgIHRyeToKICAgICAgICBjb29raWVTdHJpbmc9IiIKICAgICAgICBmb3IgaW5kZXgsIGNvb2tpZSBpbiBlbnVtZXJhdGUoY29va2llSmFyKToKICAgICAgICAgICAgY29va2llU3RyaW5nKz1jb29raWUubmFtZSArICI9IiArIGNvb2tpZS52YWx1ZSArIjsiCiAgICBleGNlcHQ6IHBhc3MKICAgICNwcmludCAnY29va2llU3RyaW5nJyxjb29raWVTdHJpbmcKICAgIHJldHVybiBjb29raWVTdHJpbmcKCmRlZiBzYXZlQ29va2llSmFyKGNvb2tpZUphcixDT09LSUVGSUxFKToKICAgIHRyeToKICAgICAgICBjb21wbGV0ZV9wYXRoPW9zLnBhdGguam9pbihwcm9maWxlLENPT0tJRUZJTEUpCiAgICAgICAgY29va2llSmFyLnNhdmUoY29tcGxldGVfcGF0aCxpZ25vcmVfZGlzY2FyZD1UcnVlKQogICAgZXhjZXB0OiBwYXNzCgpkZWYgZ2V0Q29va2llSmFyKENPT0tJRUZJTEUpOgoKICAgIGNvb2tpZUphcj1Ob25lCiAgICBpZiBDT09LSUVGSUxFOgogICAgICAgIHRyeToKICAgICAgICAgICAgY29tcGxldGVfcGF0aD1vcy5wYXRoLmpvaW4ocHJvZmlsZSxDT09LSUVGSUxFKQogICAgICAgICAgICBjb29raWVKYXIgPSBjb29raWVsaWIuTFdQQ29va2llSmFyKCkKICAgICAgICAgICAgY29va2llSmFyLmxvYWQoY29tcGxldGVfcGF0aCxpZ25vcmVfZGlzY2FyZD1UcnVlKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgY29va2llSmFyPU5vbmUKCiAgICBpZiBub3QgY29va2llSmFyOgogICAgICAgIGNvb2tpZUphciA9IGNvb2tpZWxpYi5MV1BDb29raWVKYXIoKQoKICAgIHJldHVybiBjb29raWVKYXIKCmRlZiBkb0V2YWwoZnVuX2NhbGwscGFnZV9kYXRhLENvb2tpZV9KYXIsbSk6CiAgICByZXRfdmFsPScnCiAgICAjcHJpbnQgZnVuX2NhbGwKICAgIGlmIGZ1bmN0aW9uc19kaXIgbm90IGluIHN5cy5wYXRoOgogICAgICAgIHN5cy5wYXRoLmFwcGVuZChmdW5jdGlvbnNfZGlyKQoKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhmdW5jdGlvbnNfZGlyKToKICAgICAgICBvcy5tYWtlZGlycyhmdW5jdGlvbnNfZGlyKQogCgogICAgdHJ5OgogICAgICAgIHB5X2ZpbGU9J2ltcG9ydCAnK2Z1bl9jYWxsLnNwbGl0KCcuJylbMF0KIyAgICAgICAgcHJpbnQgcHlfZmlsZSxzeXMucGF0aAogICAgICAgIGV4ZWMoIHB5X2ZpbGUpCiMgICAgICAgIHByaW50ICdkb25lJwogICAgZXhjZXB0OgogICAgICAgIHByaW50ICdkb0V2YWw6IGVycm9yIGluIGltcG9ydCcKICAgICAgICAjdHJhY2ViYWNrLnByaW50X2V4YyhmaWxlPXN5cy5zdGRvdXQpCiMgICAgcHJpbnQgJ3JldF92YWw9JytmdW5fY2FsbAogICAgZXhlYyAoJ3JldF92YWw9JytmdW5fY2FsbCkKIyAgIHByaW50IHJldF92YWwKICAgICNleGVjKCdyZXRfdmFsPTErMScpCiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHN0cihyZXRfdmFsKQogICAgZXhjZXB0OiByZXR1cm4gcmV0X3ZhbAoKZGVmIGRvRXZhbEZ1bmN0aW9uKGZ1bl9jYWxsLHBhZ2VfZGF0YSxDb29raWVfSmFyLG0pOgojICAgIHByaW50ICdkb0V2YWxGdW5jdGlvbicKICAgIHRyeToKICAgICAgICBnbG9iYWwgZ0xTUHJvRHluYW1pY0NvZGVOdW1iZXIKICAgICAgICBnTFNQcm9EeW5hbWljQ29kZU51bWJlcj1nTFNQcm9EeW5hbWljQ29kZU51bWJlcisxCiAgICAgICAgcmV0X3ZhbD0nJwogICAgICAgIHByaW50ICdkb29vb2RvbycKICAgICAgICBpZiBmdW5jdGlvbnNfZGlyIG5vdCBpbiBzeXMucGF0aDoKICAgICAgICAgICAgc3lzLnBhdGguYXBwZW5kKGZ1bmN0aW9uc19kaXIpCiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhmdW5jdGlvbnNfZGlyKToKICAgICAgICAgICAgb3MubWFrZWRpcnMoZnVuY3Rpb25zX2RpcikKCiAgICAgICAgZmlsZW5hbWU9J0xTUHJvZHluYW1pY0NvZGUlcy5weSclc3RyKGdMU1Byb0R5bmFtaWNDb2RlTnVtYmVyKQogICAgICAgIGZpbGVuYW1ld2l0aHBhdGg9b3MucGF0aC5qb2luKGZ1bmN0aW9uc19kaXIsZmlsZW5hbWUpCiAgICAgICAgZj1vcGVuKGZpbGVuYW1ld2l0aHBhdGgsIndiIikKICAgICAgICBmLndyaXRlKCIjIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuIikKICAgICAgICBmLndyaXRlKGZ1bl9jYWxsLmVuY29kZSgidXRmLTgiKSkKICAgICAgICBmLmNsb3NlKCkKICAgICAgICBwcmludCAnYmVmb3JlIGRvJwogICAgICAgIExTUHJvZHluYW1pY0NvZGUgPSBpbXBvcnRfYnlfc3RyaW5nKGZpbGVuYW1lLnNwbGl0KCcuJylbMF0sZmlsZW5hbWV3aXRocGF0aCkKICAgICAgICBwcmludCAnYWZ0ZXInCiAgICAgICAgIAogICAgICAgIHJldF92YWw9TFNQcm9keW5hbWljQ29kZS5HZXRMU1Byb0RhdGEocGFnZV9kYXRhLENvb2tpZV9KYXIsbSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBzdHIocmV0X3ZhbCkKICAgICAgICBleGNlcHQ6IHJldHVybiByZXRfdmFsCiAgICBleGNlcHQ6IHRyYWNlYmFjay5wcmludF9leGMoKQogICAgcmV0dXJuICIiCgpkZWYgaW1wb3J0X2J5X3N0cmluZyhmdWxsX25hbWUsZmlsZW5hbWV3aXRocGF0aCk6CiAgICB0cnk6CiAgICAgICAgCiAgICAgICAgaW1wb3J0IGltcG9ydGxpYgogICAgICAgIHJldHVybiBpbXBvcnRsaWIuaW1wb3J0X21vZHVsZShmdWxsX25hbWUsIHBhY2thZ2U9Tm9uZSkKICAgIGV4Y2VwdDoKICAgICAgICBpbXBvcnQgaW1wCiAgICAgICAgcmV0dXJuIGltcC5sb2FkX3NvdXJjZShmdWxsX25hbWUsZmlsZW5hbWV3aXRocGF0aCkKCmRlZiBnZXRHb29nbGVSZWNhcHRjaGFSZXNwb25zZShjYXB0Y2hha2V5LCBjaix0eXBlPTEpOiAjMSBmb3IgZ2V0LCAyIGZvciBwb3N0LCAzIGZvciByYXdwb3N0CiMgICAgI2hlYWRlcnM9WygnVXNlci1BZ2VudCcsJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgcnY6MTQuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xNC4wLjEnKV0KIyAgICBodG1sX3RleHQ9Z2V0VXJsKHVybCxub3JlZGlyPVRydWUsIGNvb2tpZUphcj1jaixoZWFkZXJzPWhlYWRlcnMpCiAjICAgcHJpbnQgJ2h0bWxfdGV4dCcsaHRtbF90ZXh0CiAgICByZWNhcENoYWxsZW5nZT0iIgogICAgc29sdXRpb249IiIKIyAgICBjYXBfcmVnPSJyZWNhcC4qP1w/az0oLio/KVwiIiAgICAKIyAgICBtYXRjaCA9cmUuZmluZGFsbChjYXBfcmVnLCBodG1sX3RleHQpCiAgICAKICAgICAgICAKIyAgICBwcmludCAnbWF0Y2gnLG1hdGNoCiAgICBjYXB0Y2hhPUZhbHNlCiAgICBjYXB0Y2hhX3JlbG9hZF9yZXNwb25zZV9jaGFsbD1Ob25lCiAgICBzb2x1dGlvbj1Ob25lCiAgICBpZiBsZW4oY2FwdGNoYWtleSk+MDogI25ldyBzaGlueSBjYXB0Y2hhIQogICAgICAgIGNhcHRjaGFfdXJsPWNhcHRjaGFrZXkKICAgICAgICBpZiBub3QgY2FwdGNoYV91cmwuc3RhcnRzd2l0aCgnaHR0cCcpOgogICAgICAgICAgICBjYXB0Y2hhX3VybD0naHR0cDovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkvY2hhbGxlbmdlP2s9JytjYXB0Y2hhX3VybCsnJmFqYXg9MScKIyAgICAgICAgcHJpbnQgJ2NhcHRjaGFfdXJsJyxjYXB0Y2hhX3VybAogICAgICAgIGNhcHRjaGE9VHJ1ZQoKICAgICAgICBjYXBfY2hhbGxfcmVnPSdjaGFsbGVuZ2UuKj9cJyguKj8pXCcnCiAgICAgICAgY2FwX2ltYWdlX3JlZz0nXCcoLio/KVwnJwogICAgICAgIGNhcHRjaGFfc2NyaXB0PWdldFVybChjYXB0Y2hhX3VybCxjb29raWVKYXI9Y2opCiAgICAgICAgcmVjYXBDaGFsbGVuZ2U9cmUuZmluZGFsbChjYXBfY2hhbGxfcmVnLCBjYXB0Y2hhX3NjcmlwdClbMF0KICAgICAgICBjYXB0Y2hhX3JlbG9hZD0naHR0cDovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkvcmVsb2FkP2M9JwogICAgICAgIGNhcHRjaGFfaz1jYXB0Y2hhX3VybC5zcGxpdCgnaz0nKVsxXQogICAgICAgIGNhcHRjaGFfcmVsb2FkKz1yZWNhcENoYWxsZW5nZSsnJms9JytjYXB0Y2hhX2srJyZyZWFzb249aSZ0eXBlPWltYWdlJmxhbmc9ZW4nCiAgICAgICAgY2FwdGNoYV9yZWxvYWRfanM9Z2V0VXJsKGNhcHRjaGFfcmVsb2FkLGNvb2tpZUphcj1jaikKICAgICAgICBjYXB0Y2hhX3JlbG9hZF9yZXNwb25zZV9jaGFsbD1yZS5maW5kYWxsKGNhcF9pbWFnZV9yZWcsIGNhcHRjaGFfcmVsb2FkX2pzKVswXQogICAgICAgIGNhcHRjaGFfaW1hZ2VfdXJsPSdodHRwOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS9pbWFnZT9jPScrY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGwKICAgICAgICBpZiBub3QgY2FwdGNoYV9pbWFnZV91cmwuc3RhcnRzd2l0aCgiaHR0cCIpOgogICAgICAgICAgICBjYXB0Y2hhX2ltYWdlX3VybD0naHR0cDovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkvJytjYXB0Y2hhX2ltYWdlX3VybAogICAgICAgIGltcG9ydCByYW5kb20KICAgICAgICBuPXJhbmRvbS5yYW5kcmFuZ2UoMTAwLDEwMDAsNSkKICAgICAgICBsb2NhbF9jYXB0Y2hhID0gb3MucGF0aC5qb2luKHByb2ZpbGUsc3RyKG4pICsiY2FwdGNoYS5pbWciICkKICAgICAgICBsb2NhbEZpbGUgPSBvcGVuKGxvY2FsX2NhcHRjaGEsICJ3YiIpCiAgICAgICAgbG9jYWxGaWxlLndyaXRlKGdldFVybChjYXB0Y2hhX2ltYWdlX3VybCxjb29raWVKYXI9Y2opKQogICAgICAgIGxvY2FsRmlsZS5jbG9zZSgpCiAgICAgICAgc29sdmVyID0gSW5wdXRXaW5kb3coY2FwdGNoYT1sb2NhbF9jYXB0Y2hhKQogICAgICAgIHNvbHV0aW9uID0gc29sdmVyLmdldCgpCiAgICAgICAgb3MucmVtb3ZlKGxvY2FsX2NhcHRjaGEpCgogICAgaWYgY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGw6CiAgICAgICAgaWYgdHlwZT09MToKICAgICAgICAgICAgcmV0dXJuICdyZWNhcHRjaGFfY2hhbGxlbmdlX2ZpZWxkPScrdXJsbGliLnF1b3RlX3BsdXMoY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGwpKycmcmVjYXB0Y2hhX3Jlc3BvbnNlX2ZpZWxkPScrdXJsbGliLnF1b3RlX3BsdXMoc29sdXRpb24pCiAgICAgICAgZWxpZiB0eXBlPT0yOgogICAgICAgICAgICByZXR1cm4gJ3JlY2FwdGNoYV9jaGFsbGVuZ2VfZmllbGQ6JytjYXB0Y2hhX3JlbG9hZF9yZXNwb25zZV9jaGFsbCsnLHJlY2FwdGNoYV9yZXNwb25zZV9maWVsZDonK3NvbHV0aW9uCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuICdyZWNhcHRjaGFfY2hhbGxlbmdlX2ZpZWxkPScrdXJsbGliLnF1b3RlX3BsdXMoY2FwdGNoYV9yZWxvYWRfcmVzcG9uc2VfY2hhbGwpKycmcmVjYXB0Y2hhX3Jlc3BvbnNlX2ZpZWxkPScrdXJsbGliLnF1b3RlX3BsdXMoc29sdXRpb24pCiAgICBlbHNlOgogICAgICAgIHJldHVybiAnJwoKZGVmIGdldFVybCh1cmwsIGNvb2tpZUphcj1Ob25lLHBvc3Q9Tm9uZSwgdGltZW91dD0yMCwgaGVhZGVycz1Ob25lLCBub3JlZGlyPUZhbHNlKToKCgogICAgY29va2llX2hhbmRsZXIgPSB1cmxsaWIyLkhUVFBDb29raWVQcm9jZXNzb3IoY29va2llSmFyKQoKICAgIGlmIG5vcmVkaXI6CiAgICAgICAgb3BlbmVyID0gdXJsbGliMi5idWlsZF9vcGVuZXIoTm9SZWRpcmVjdGlvbixjb29raWVfaGFuZGxlciwgdXJsbGliMi5IVFRQQmFzaWNBdXRoSGFuZGxlcigpLCB1cmxsaWIyLkhUVFBIYW5kbGVyKCkpCiAgICBlbHNlOgogICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGNvb2tpZV9oYW5kbGVyLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkKICAgICNvcGVuZXIgPSB1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG9wZW5lcikKICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdCh1cmwpCiAgICByZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8zMy4wLjE3NTAuMTU0IFNhZmFyaS81MzcuMzYnKQogICAgaWYgaGVhZGVyczoKICAgICAgICBmb3IgaCxodiBpbiBoZWFkZXJzOgogICAgICAgICAgICByZXEuYWRkX2hlYWRlcihoLGh2KQoKICAgIHJlc3BvbnNlID0gb3BlbmVyLm9wZW4ocmVxLHBvc3QsdGltZW91dD10aW1lb3V0KQogICAgbGluaz1yZXNwb25zZS5yZWFkKCkKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHJldHVybiBsaW5rCgpkZWYgZ2V0X2RlY29kZShzdHIscmVnPU5vbmUpOgogICAgaWYgcmVnOgogICAgICAgIHN0cj1yZS5maW5kYWxsKHJlZywgc3RyKVswXQogICAgczEgPSB1cmxsaWIudW5xdW90ZShzdHJbMDogbGVuKHN0ciktMV0pCiAgICB0ID0gJycKICAgIGZvciBpIGluIHJhbmdlKCBsZW4oczEpKToKICAgICAgICB0ICs9IGNocihvcmQoczFbaV0pIC0gczFbbGVuKHMxKS0xXSkKICAgIHQ9dXJsbGliLnVucXVvdGUodCkKIyAgICBwcmludCB0CiAgICByZXR1cm4gdAoKZGVmIGphdmFzY3JpcHRVbkVzY2FwZShzdHIpOgogICAganM9cmUuZmluZGFsbCgndW5lc2NhcGVcKFwnKC4qPylcJycsc3RyKQojICAgIHByaW50ICdqcycsanMKICAgIGlmIChub3QganM9PU5vbmUpIGFuZCBsZW4oanMpPjA6CiAgICAgICAgZm9yIGogaW4ganM6CiAgICAgICAgICAgICNwcmludCB1cmxsaWIudW5xdW90ZShqKQogICAgICAgICAgICBzdHI9c3RyLnJlcGxhY2UoaiAsdXJsbGliLnVucXVvdGUoaikpCiAgICByZXR1cm4gc3RyCgppaWQ9MApkZWYgYXNrQ2FwdGNoYShtLGh0bWxfcGFnZSwgY29va2llSmFyKToKICAgIGdsb2JhbCBpaWQKICAgIGlpZCs9MQogICAgZXhwcmU9IG1bJ2V4cHJlcyddCiAgICBwYWdlX3VybCA9IG1bJ3BhZ2UnXQogICAgY2FwdGNoYV9yZWdleD1yZS5jb21waWxlKCdcJExpdmVTdHJlYW1DYXB0Y2hhXFsoW15cXV0qKVxdJykuZmluZGFsbChleHByZSlbMF0KCiAgICBjYXB0Y2hhX3VybD1yZS5jb21waWxlKGNhcHRjaGFfcmVnZXgpLmZpbmRhbGwoaHRtbF9wYWdlKVswXQojICAgIHByaW50IGV4cHJlLGNhcHRjaGFfcmVnZXgsY2FwdGNoYV91cmwKICAgIGlmIG5vdCBjYXB0Y2hhX3VybC5zdGFydHN3aXRoKCJodHRwIik6CiAgICAgICAgcGFnZV89J2h0dHA6Ly8nKyIiLmpvaW4ocGFnZV91cmwuc3BsaXQoJy8nKVsyOjNdKQogICAgICAgIGlmIGNhcHRjaGFfdXJsLnN0YXJ0c3dpdGgoIi8iKToKICAgICAgICAgICAgY2FwdGNoYV91cmw9cGFnZV8rY2FwdGNoYV91cmwKICAgICAgICBlbHNlOgogICAgICAgICAgICBjYXB0Y2hhX3VybD1wYWdlXysnLycrY2FwdGNoYV91cmwKCiAgICBsb2NhbF9jYXB0Y2hhID0gb3MucGF0aC5qb2luKHByb2ZpbGUsIHN0cihpaWQpKyJjYXB0Y2hhLmpwZyIgKQogICAgbG9jYWxGaWxlID0gb3Blbihsb2NhbF9jYXB0Y2hhLCAid2IiKQojICAgIHByaW50ICcgYyBjYXB1cmwnLGNhcHRjaGFfdXJsCiAgICByZXEgPSB1cmxsaWIyLlJlcXVlc3QoY2FwdGNoYV91cmwpCiAgICByZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IHJ2OjE0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTQuMC4xJykKICAgIGlmICdyZWZlcmVyJyBpbiBtOgogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdSZWZlcmVyJywgbVsncmVmZXJlciddKQogICAgaWYgJ2FnZW50JyBpbiBtOgogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLWFnZW50JywgbVsnYWdlbnQnXSkKICAgIGlmICdzZXRjb29raWUnIGluIG06CiMgICAgICAgIHByaW50ICdhZGRpbmcgY29va2llJyxtWydzZXRjb29raWUnXQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCBtWydzZXRjb29raWUnXSkKCiAgICAjY29va2llX2hhbmRsZXIgPSB1cmxsaWIyLkhUVFBDb29raWVQcm9jZXNzb3IoY29va2llSmFyKQogICAgI29wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGNvb2tpZV9oYW5kbGVyLCB1cmxsaWIyLkhUVFBCYXNpY0F1dGhIYW5kbGVyKCksIHVybGxpYjIuSFRUUEhhbmRsZXIoKSkKICAgICNvcGVuZXIgPSB1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG9wZW5lcikKICAgIHVybGxpYjIudXJsb3BlbihyZXEpCiAgICByZXNwb25zZSA9IHVybGxpYjIudXJsb3BlbihyZXEpCgogICAgbG9jYWxGaWxlLndyaXRlKHJlc3BvbnNlLnJlYWQoKSkKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIGxvY2FsRmlsZS5jbG9zZSgpCiAgICBzb2x2ZXIgPSBJbnB1dFdpbmRvdyhjYXB0Y2hhPWxvY2FsX2NhcHRjaGEpCiAgICBzb2x1dGlvbiA9IHNvbHZlci5nZXQoKQogICAgcmV0dXJuIHNvbHV0aW9uCgpkZWYgYXNrQ2FwdGNoYU5ldyhpbWFnZXJlZ2V4LGh0bWxfcGFnZSxjb29raWVKYXIsbSk6CiAgICBnbG9iYWwgaWlkCiAgICBpaWQrPTEKCgogICAgaWYgbm90IGltYWdlcmVnZXg9PScnOgogICAgICAgIGlmIGh0bWxfcGFnZS5zdGFydHN3aXRoKCJodHRwIik6CiAgICAgICAgICAgIHBhZ2VfPWdldFVybChodG1sX3BhZ2UsY29va2llSmFyPWNvb2tpZUphcikKICAgICAgICBlbHNlOgogICAgICAgICAgICBwYWdlXz1odG1sX3BhZ2UKICAgICAgICBjYXB0Y2hhX3VybD1yZS5jb21waWxlKGltYWdlcmVnZXgpLmZpbmRhbGwoaHRtbF9wYWdlKVswXQogICAgZWxzZToKICAgICAgICBjYXB0Y2hhX3VybD1odG1sX3BhZ2UKICAgICAgICBpZiAnb25lcGxheS50di9lbWJlZCcgaW4gaHRtbF9wYWdlOgogICAgICAgICAgICBpbXBvcnQgb25lcGxheQogICAgICAgICAgICBwYWdlXz1nZXRVcmwoaHRtbF9wYWdlLGNvb2tpZUphcj1jb29raWVKYXIpCiAgICAgICAgICAgIGNhcHRjaGFfdXJsPW9uZXBsYXkuZ2V0Q2FwdGNoYVVybChwYWdlXykKCiAgICBsb2NhbF9jYXB0Y2hhID0gb3MucGF0aC5qb2luKHByb2ZpbGUsIHN0cihpaWQpKyJjYXB0Y2hhLmpwZyIgKQogICAgbG9jYWxGaWxlID0gb3Blbihsb2NhbF9jYXB0Y2hhLCAid2IiKQojICAgIHByaW50ICcgYyBjYXB1cmwnLGNhcHRjaGFfdXJsCiAgICByZXEgPSB1cmxsaWIyLlJlcXVlc3QoY2FwdGNoYV91cmwpCiAgICByZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IHJ2OjE0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTQuMC4xJykKICAgIGlmICdyZWZlcmVyJyBpbiBtOgogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdSZWZlcmVyJywgbVsncmVmZXJlciddKQogICAgaWYgJ2FnZW50JyBpbiBtOgogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLWFnZW50JywgbVsnYWdlbnQnXSkKICAgIGlmICdhY2NlcHQnIGluIG06CiAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ0FjY2VwdCcsIG1bJ2FjY2VwdCddKQogICAgaWYgJ3NldGNvb2tpZScgaW4gbToKIyAgICAgICAgcHJpbnQgJ2FkZGluZyBjb29raWUnLG1bJ3NldGNvb2tpZSddCiAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ0Nvb2tpZScsIG1bJ3NldGNvb2tpZSddKQoKICAgICNjb29raWVfaGFuZGxlciA9IHVybGxpYjIuSFRUUENvb2tpZVByb2Nlc3Nvcihjb29raWVKYXIpCiAgICAjb3BlbmVyID0gdXJsbGliMi5idWlsZF9vcGVuZXIoY29va2llX2hhbmRsZXIsIHVybGxpYjIuSFRUUEJhc2ljQXV0aEhhbmRsZXIoKSwgdXJsbGliMi5IVFRQSGFuZGxlcigpKQogICAgI29wZW5lciA9IHVybGxpYjIuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQogICAgI3VybGxpYjIudXJsb3BlbihyZXEpCiAgICByZXNwb25zZSA9IHVybGxpYjIudXJsb3BlbihyZXEpCgogICAgbG9jYWxGaWxlLndyaXRlKHJlc3BvbnNlLnJlYWQoKSkKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIGxvY2FsRmlsZS5jbG9zZSgpCiAgICBzb2x2ZXIgPSBJbnB1dFdpbmRvdyhjYXB0Y2hhPWxvY2FsX2NhcHRjaGEpCiAgICBzb2x1dGlvbiA9IHNvbHZlci5nZXQoKQogICAgcmV0dXJuIHNvbHV0aW9uCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBGdW5jdGlvbiAgOiBHVUlFZGl0RXhwb3J0TmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIFBhcmFtZXRlciA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjCiMgbmFtZSAgICAgICAgc3VnZXN0ZWQgbmFtZSBmb3IgZXhwb3J0ICAgICAgICAgICAgICAgICAgIwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgCiMgUmV0dXJucyAgIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyBuYW1lICAgICAgICBuYW1lIG9mIGV4cG9ydCBleGNsdWRpbmcgYW55IGV4dGVuc2lvbiAgICAjCiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKZGVmIFRha2VJbnB1dChuYW1lLCBoZWFkbmFtZSk6CgoKICAgIGtiID0geGJtYy5LZXlib2FyZCgnZGVmYXVsdCcsICdoZWFkaW5nJywgVHJ1ZSkKICAgIGtiLnNldERlZmF1bHQobmFtZSkKICAgIGtiLnNldEhlYWRpbmcoaGVhZG5hbWUpCiAgICBrYi5zZXRIaWRkZW5JbnB1dChGYWxzZSkKICAgIHJldHVybiBrYi5nZXRUZXh0KCkKICAgCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpjbGFzcyBJbnB1dFdpbmRvdyh4Ym1jZ3VpLldpbmRvd0RpYWxvZyk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBzZWxmLmNwdGxvYyA9IGt3YXJncy5nZXQoJ2NhcHRjaGEnKQogICAgICAgIHNlbGYuaW1nID0geGJtY2d1aS5Db250cm9sSW1hZ2UoMzM1LDMwLDYyNCw2MCxzZWxmLmNwdGxvYykKICAgICAgICBzZWxmLmFkZENvbnRyb2woc2VsZi5pbWcpCiAgICAgICAgc2VsZi5rYmQgPSB4Ym1jLktleWJvYXJkKCkKCiAgICBkZWYgZ2V0KHNlbGYpOgogICAgICAgIHNlbGYuc2hvdygpCiAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgIHNlbGYua2JkLmRvTW9kYWwoKQogICAgICAgIGlmIChzZWxmLmtiZC5pc0NvbmZpcm1lZCgpKToKICAgICAgICAgICAgdGV4dCA9IHNlbGYua2JkLmdldFRleHQoKQogICAgICAgICAgICBzZWxmLmNsb3NlKCkKICAgICAgICAgICAgcmV0dXJuIHRleHQKICAgICAgICBzZWxmLmNsb3NlKCkKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBnZXRFcG9jVGltZSgpOgogICAgaW1wb3J0IHRpbWUKICAgIHJldHVybiBzdHIoaW50KHRpbWUudGltZSgpKjEwMDApKQoKZGVmIGdldEVwb2NUaW1lMigpOgogICAgaW1wb3J0IHRpbWUKICAgIHJldHVybiBzdHIoaW50KHRpbWUudGltZSgpKSkKCmRlZiBnZXRfcGFyYW1zKCk6CiAgICAgICAgcGFyYW09W10KICAgICAgICBwYXJhbXN0cmluZz1zeXMuYXJndlsyXQogICAgICAgIGlmIGxlbihwYXJhbXN0cmluZyk+PTI6CiAgICAgICAgICAgIHBhcmFtcz1zeXMuYXJndlsyXQogICAgICAgICAgICBjbGVhbmVkcGFyYW1zPXBhcmFtcy5yZXBsYWNlKCc/JywnJykKICAgICAgICAgICAgaWYgKHBhcmFtc1tsZW4ocGFyYW1zKS0xXT09Jy8nKToKICAgICAgICAgICAgICAgIHBhcmFtcz1wYXJhbXNbMDpsZW4ocGFyYW1zKS0yXQogICAgICAgICAgICBwYWlyc29mcGFyYW1zPWNsZWFuZWRwYXJhbXMuc3BsaXQoJyYnKQogICAgICAgICAgICBwYXJhbT17fQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4ocGFpcnNvZnBhcmFtcykpOgogICAgICAgICAgICAgICAgc3BsaXRwYXJhbXM9e30KICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXBhaXJzb2ZwYXJhbXNbaV0uc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgaWYgKGxlbihzcGxpdHBhcmFtcykpPT0yOgogICAgICAgICAgICAgICAgICAgIHBhcmFtW3NwbGl0cGFyYW1zWzBdXT1zcGxpdHBhcmFtc1sxXQogICAgICAgIHJldHVybiBwYXJhbQoKZGVmIGdldEZhdm9yaXRlcygpOgogICAgICAgIGl0ZW1zID0ganNvbi5sb2FkcyhvcGVuKGZhdm9yaXRlcykucmVhZCgpKQogICAgICAgIHRvdGFsID0gbGVuKGl0ZW1zKQogICAgICAgIGZvciBpIGluIGl0ZW1zOgogICAgICAgICAgICBuYW1lID0gaVswXQogICAgICAgICAgICB1cmwgPSBpWzFdCiAgICAgICAgICAgIGljb25pbWFnZSA9IGlbMl0KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZmFuQXJ0ID0gaVszXQogICAgICAgICAgICAgICAgaWYgZmFuQXJ0ID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygndXNlX3RodW1iJykgPT0gInRydWUiOgogICAgICAgICAgICAgICAgICAgIGZhbkFydCA9IGljb25pbWFnZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBmYW5BcnQgPSBmYW5hcnQKICAgICAgICAgICAgdHJ5OiBwbGF5bGlzdCA9IGlbNV0KICAgICAgICAgICAgZXhjZXB0OiBwbGF5bGlzdCA9IE5vbmUKICAgICAgICAgICAgdHJ5OiByZWdleHMgPSBpWzZdCiAgICAgICAgICAgIGV4Y2VwdDogcmVnZXhzID0gTm9uZQoKICAgICAgICAgICAgaWYgaVs0XSA9PSAwOgogICAgICAgICAgICAgICAgYWRkTGluayh1cmwsbmFtZSxpY29uaW1hZ2UsZmFuQXJ0LCcnLCcnLCcnLCdmYXYnLHBsYXlsaXN0LHJlZ2V4cyx0b3RhbCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGFkZERpcihuYW1lLHVybCxpWzRdLGljb25pbWFnZSxmYW5hcnQsJycsJycsJycsJycsJ2ZhdicpCgpkZWYgYWRkRmF2b3JpdGUobmFtZSx1cmwsaWNvbmltYWdlLGZhbmFydCxtb2RlLHBsYXlsaXN0PU5vbmUscmVnZXhzPU5vbmUpOgogICAgICAgIGZhdkxpc3QgPSBbXQogICAgICAgIHRyeToKICAgICAgICAgICAgIyBzZWVtcyB0aGF0IGFmdGVyCiAgICAgICAgICAgIG5hbWUgPSBuYW1lLmVuY29kZSgndXRmLTgnLCAnaWdub3JlJykKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmYXZvcml0ZXMpPT1GYWxzZToKICAgICAgICAgICAgYWRkb25fbG9nKCdNYWtpbmcgRmF2b3JpdGVzIEZpbGUnKQogICAgICAgICAgICBmYXZMaXN0LmFwcGVuZCgobmFtZSx1cmwsaWNvbmltYWdlLGZhbmFydCxtb2RlLHBsYXlsaXN0LHJlZ2V4cykpCiAgICAgICAgICAgIGEgPSBvcGVuKGZhdm9yaXRlcywgInciKQogICAgICAgICAgICBhLndyaXRlKGpzb24uZHVtcHMoZmF2TGlzdCkpCiAgICAgICAgICAgIGEuY2xvc2UoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGFkZG9uX2xvZygnQXBwZW5kaW5nIEZhdm9yaXRlcycpCiAgICAgICAgICAgIGEgPSBvcGVuKGZhdm9yaXRlcykucmVhZCgpCiAgICAgICAgICAgIGRhdGEgPSBqc29uLmxvYWRzKGEpCiAgICAgICAgICAgIGRhdGEuYXBwZW5kKChuYW1lLHVybCxpY29uaW1hZ2UsZmFuYXJ0LG1vZGUpKQogICAgICAgICAgICBiID0gb3BlbihmYXZvcml0ZXMsICJ3IikKICAgICAgICAgICAgYi53cml0ZShqc29uLmR1bXBzKGRhdGEpKQogICAgICAgICAgICBiLmNsb3NlKCkKCmRlZiBybUZhdm9yaXRlKG5hbWUpOgogICAgICAgIGRhdGEgPSBqc29uLmxvYWRzKG9wZW4oZmF2b3JpdGVzKS5yZWFkKCkpCiAgICAgICAgZm9yIGluZGV4IGluIHJhbmdlKGxlbihkYXRhKSk6CiAgICAgICAgICAgIGlmIGRhdGFbaW5kZXhdWzBdPT1uYW1lOgogICAgICAgICAgICAgICAgZGVsIGRhdGFbaW5kZXhdCiAgICAgICAgICAgICAgICBiID0gb3BlbihmYXZvcml0ZXMsICJ3IikKICAgICAgICAgICAgICAgIGIud3JpdGUoanNvbi5kdW1wcyhkYXRhKSkKICAgICAgICAgICAgICAgIGIuY2xvc2UoKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLkNvbnRhaW5lci5SZWZyZXNoIikKCmRlZiB1cmxzb2x2ZXIodXJsKToKICAgIGltcG9ydCByZXNvbHZldXJsCiAgICBob3N0ID0gcmVzb2x2ZXVybC5Ib3N0ZWRNZWRpYUZpbGUodXJsKQogICAgaWYgaG9zdDoKICAgICAgICByZXNvbHZlciA9IHJlc29sdmV1cmwucmVzb2x2ZSh1cmwpCiAgICAgICAgcmVzb2x2ZWQgPSByZXNvbHZlcgogICAgICAgIGlmIGlzaW5zdGFuY2UocmVzb2x2ZWQsbGlzdCk6CiAgICAgICAgICAgIGZvciBrIGluIHJlc29sdmVkOgogICAgICAgICAgICAgICAgcXVhbGl0eSA9IGFkZG9uLmdldFNldHRpbmcoJ3F1YWxpdHknKQogICAgICAgICAgICAgICAgaWYga1sncXVhbGl0eSddID09ICdIRCcgIDoKICAgICAgICAgICAgICAgICAgICByZXNvbHZlciA9IGtbJ3VybCddCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsaWYga1sncXVhbGl0eSddID09ICdTRCcgOgogICAgICAgICAgICAgICAgICAgIHJlc29sdmVyID0ga1sndXJsJ10KICAgICAgICAgICAgICAgIGVsaWYga1sncXVhbGl0eSddID09ICcxMDgwcCcgYW5kIGFkZG9uLmdldFNldHRpbmcoJzEwODBwcXVhbGl0eScpID09ICd0cnVlJyA6CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIgPSBrWyd1cmwnXQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzb2x2ZXIgPSByZXNvbHZlZAogICAgZWxzZToKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLk5vdGlmaWNhdGlvbihGaXJlVFYscmVzb2x2ZXVybCBkb25vdCBzdXBwb3J0IHRoaXMgZG9tYWluLiAtICw1MDAwKSIpCiAgICAgICAgcmVzb2x2ZXI9dXJsCiAgICByZXR1cm4gcmVzb2x2ZXIKCmRlZiB0cnlwbGF5KHVybCxsaXN0aXRlbSxwZGlhbG9ndWU9Tm9uZSk6ICAgIAoKICAgIGlmIHVybC5sb3dlcigpLnN0YXJ0c3dpdGgoJ3BsdWdpbicpIGFuZCAneW91dHViZScgbm90IGluICB1cmwubG93ZXIoKToKICAgICAgICBwcmludCAncGxheWluZyB2aWEgcnVucGx1Z2luJwogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oJ1hCTUMuUnVuUGx1Z2luKCcrdXJsKycpJykgCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoOCk6CiAgICAgICAgICAgIHhibWMuc2xlZXAoNTAwKSAjI3NsZWVwIGZvciAxMCBzZWNvbmRzLCBoYWxmIGVhY2ggdGltZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjcHJpbnQgJ2NvbmRpJwogICAgICAgICAgICAgICAgaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgiUGxheWVyLkhhc01lZGlhIikgYW5kIHhibWMuUGxheWVyKCkuaXNQbGF5aW5nKCk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgcHJpbnQgJ3JldHVybmluZyBub3cnCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBpbXBvcnQgIEN1c3RvbVBsYXllcix0aW1lCgogICAgcGxheWVyID0gQ3VzdG9tUGxheWVyLk15WEJNQ1BsYXllcigpCiAgICBwbGF5ZXIucGRpYWxvZ3VlPXBkaWFsb2d1ZQogICAgc3RhcnQgPSB0aW1lLnRpbWUoKSAKICAgICN4Ym1jLlBsYXllcigpLnBsYXkoIGxpdmVMaW5rLGxpc3RpdGVtKQogICAgcHJpbnQgJ2dvaW5nIHRvIHBsYXknCiAgICBpbXBvcnQgdGltZQogICAgYmVmb3Jlc3RhcnQ9dGltZS50aW1lKCkKICAgIHBsYXllci5wbGF5KCB1cmwsIGxpc3RpdGVtKQogICAgeGJtYy5zbGVlcCgxMDAwKQogICAgCiAgICB0cnk6CiAgICAgICAgd2hpbGUgcGxheWVyLmlzX2FjdGl2ZToKICAgICAgICAgICAgeGJtYy5zbGVlcCg0MDApCiAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHBsYXllci51cmxwbGF5ZWQ6CiAgICAgICAgICAgICAgICBwcmludCAneWVzIHBsYXllZCcKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGlmIHRpbWUudGltZSgpLWJlZm9yZXN0YXJ0PjQ6IHJldHVybiBGYWxzZQogICAgICAgICAgICAjeGJtYy5zbGVlcCgxMDAwKQogICAgZXhjZXB0OiBwYXNzCiAgICBwcmludCAnbm90IHBsYXllZCcsdXJsCiAgICByZXR1cm4gRmFsc2UKCmRlZiBwbGF5X3BsYXlsaXN0KG5hbWUsIG11X3BsYXlsaXN0LHF1ZXVlVmlkZW89Tm9uZSk6CiAgICAgICAgcGxheWxpc3QgPSB4Ym1jLlBsYXlMaXN0KHhibWMuUExBWUxJU1RfVklERU8pCiAgICAgICAgI3ByaW50ICdtdV9wbGF5bGlzdCcsbXVfcGxheWxpc3QKICAgICAgICBpZiAnJCRMU1BsYXlPbmx5T25lJCQnIGluIG11X3BsYXlsaXN0WzBdOgogICAgICAgICAgICBtdV9wbGF5bGlzdFswXT1tdV9wbGF5bGlzdFswXS5yZXBsYWNlKCckJExTUGxheU9ubHlPbmUkJCcsJycpCiAgICAgICAgICAgIGltcG9ydCB1cmxwYXJzZQogICAgICAgICAgICBuYW1lcyA9IFtdCiAgICAgICAgICAgIGlsb29wPTAKICAgICAgICAgICAgcHJvZ3Jlc3MgPSB4Ym1jZ3VpLkRpYWxvZ1Byb2dyZXNzKCkKICAgICAgICAgICAgcHJvZ3Jlc3MuY3JlYXRlKCdQcm9ncmVzcycsICdUcnlpbmcgTXVsdGlwbGUgTGlua3MnKQogICAgICAgICAgICBmb3IgaSBpbiBtdV9wbGF5bGlzdDoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGlmICckJGxzbmFtZT0nIGluIGk6CiAgICAgICAgICAgICAgICAgICAgZF9uYW1lPWkuc3BsaXQoJyQkbHNuYW1lPScpWzFdLnNwbGl0KCcmcmVnZXhzJylbMF0KICAgICAgICAgICAgICAgICAgICBuYW1lcy5hcHBlbmQoZF9uYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIG11X3BsYXlsaXN0W2lsb29wXT1pLnNwbGl0KCckJGxzbmFtZT0nKVswXSsoJyZyZWdleHMnK2kuc3BsaXQoJyZyZWdleHMnKVsxXSBpZiAnJnJlZ2V4cycgaW4gaSBlbHNlICcnKSAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRfbmFtZT11cmxwYXJzZS51cmxwYXJzZShpKS5uZXRsb2MKICAgICAgICAgICAgICAgICAgICBpZiBkX25hbWUgPT0gJyc6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzLmFwcGVuZChuYW1lKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzLmFwcGVuZChkX25hbWUpCiAgICAgICAgICAgICAgICBpbmRleD1pbG9vcAogICAgICAgICAgICAgICAgaWxvb3ArPTEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcGxheW5hbWU9bmFtZXNbaW5kZXhdCiAgICAgICAgICAgICAgICBpZiBwcm9ncmVzcy5pc2NhbmNlbGVkKCk6IHJldHVybiAKICAgICAgICAgICAgICAgIHByb2dyZXNzLnVwZGF0ZSggaWxvb3AvbGVuKG11X3BsYXlsaXN0KSoxMDAsIiIsICJMaW5rIyVkIiUoaWxvb3ApLHBsYXluYW1lICApCiAgICAgICAgICAgICAgICBwcmludCAnYXV0byBwbGF5bmFtZXh4JyxwbGF5bmFtZQogICAgICAgICAgICAgICAgaWYgIiZtb2RlPTE5IiBpbiBtdV9wbGF5bGlzdFtpbmRleF06CiAgICAgICAgICAgICAgICAgICAgICAgICNwbGF5c2V0cmVzb2x2ZWQgKHVybHNvbHZlcihtdV9wbGF5bGlzdFtpbmRleF0ucmVwbGFjZSgnJm1vZGU9MTknLCcnKSksbmFtZSxpY29uaW1hZ2UsVHJ1ZSkKICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOnBsYXluYW1lLCdtZWRpYXR5cGUnOid2aWRlbyd9KQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgICAgICAgICAgICAgIHVybHRvcGxheT11cmxzb2x2ZXIobXVfcGxheWxpc3RbaW5kZXhdLnJlcGxhY2UoJyZtb2RlPTE5JywnJykucmVwbGFjZSgnOycsJycpKQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQYXRoKHVybHRvcGxheSkKICAgICAgICAgICAgICAgICAgICAjeGJtYy5QbGF5ZXIoKS5wbGF5KHVybHRvcGxheSxsaXopCiAgICAgICAgICAgICAgICAgICAgcGxheWVkPXRyeXBsYXkodXJsdG9wbGF5LGxpeikKICAgICAgICAgICAgICAgIGVsaWYgIiRkb3JlZ2V4IiBpbiBtdV9wbGF5bGlzdFtpbmRleF0gOgojICAgICAgICAgICAgICAgICAgICBwcmludCBtdV9wbGF5bGlzdFtpbmRleF0KICAgICAgICAgICAgICAgICAgICBzZXBhdGUgPSBtdV9wbGF5bGlzdFtpbmRleF0uc3BsaXQoJyZyZWdleHM9JykKIyAgICAgICAgICAgICAgICAgICAgcHJpbnQgc2VwYXRlCiAgICAgICAgICAgICAgICAgICAgdXJsLHNldHJlc29sdmVkID0gZ2V0UmVnZXhQYXJzZWQoc2VwYXRlWzFdLCBzZXBhdGVbMF0pCiAgICAgICAgICAgICAgICAgICAgdXJsMiA9IHVybC5yZXBsYWNlKCc7JywnJykKICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOnBsYXluYW1lLCdtZWRpYXR5cGUnOid2aWRlbyd9KQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQYXRoKHVybDIpCiAgICAgICAgICAgICAgICAgICAgI3hibWMuUGxheWVyKCkucGxheSh1cmwyLGxpeikKICAgICAgICAgICAgICAgICAgICBwbGF5ZWQ9dHJ5cGxheSh1cmwyLGxpeikKCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHVybCA9IG11X3BsYXlsaXN0W2luZGV4XQogICAgICAgICAgICAgICAgICAgIHVybD11cmwuc3BsaXQoJyZyZWdleHM9JylbMF0KICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOnBsYXluYW1lLCdtZWRpYXR5cGUnOid2aWRlbyd9KQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQYXRoKHVybCkKICAgICAgICAgICAgICAgICAgICAjeGJtYy5QbGF5ZXIoKS5wbGF5KHVybCxsaXopCiAgICAgICAgICAgICAgICAgICAgcGxheWVkPXRyeXBsYXkodXJsLGxpeikKICAgICAgICAgICAgICAgICAgICBwcmludCAncGxheWVkJyxwbGF5ZWQKICAgICAgICAgICAgICAgIHByaW50ICdwbGF5ZWQnLHBsYXllZAogICAgICAgICAgICAgICAgaWYgcGxheWVkOiByZXR1cm4KICAgICAgICAgICAgcmV0dXJuICAgICAKICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCdhc2tfcGxheWxpc3RfaXRlbXMnKSA9PSAndHJ1ZScgYW5kIG5vdCBxdWV1ZVZpZGVvIDoKICAgICAgICAgICAgaW1wb3J0IHVybHBhcnNlCiAgICAgICAgICAgIG5hbWVzID0gW10KICAgICAgICAgICAgaWxvb3A9MAogICAgICAgICAgICBmb3IgaSBpbiBtdV9wbGF5bGlzdDoKICAgICAgICAgICAgICAgIGlmICckJGxzbmFtZT0nIGluIGk6CiAgICAgICAgICAgICAgICAgICAgZF9uYW1lPWkuc3BsaXQoJyQkbHNuYW1lPScpWzFdLnNwbGl0KCcmcmVnZXhzJylbMF0KICAgICAgICAgICAgICAgICAgICBuYW1lcy5hcHBlbmQoZF9uYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIG11X3BsYXlsaXN0W2lsb29wXT1pLnNwbGl0KCckJGxzbmFtZT0nKVswXSsoJyZyZWdleHMnK2kuc3BsaXQoJyZyZWdleHMnKVsxXSBpZiAnJnJlZ2V4cycgaW4gaSBlbHNlICcnKSAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRfbmFtZT11cmxwYXJzZS51cmxwYXJzZShpKS5uZXRsb2MKICAgICAgICAgICAgICAgICAgICBpZiBkX25hbWUgPT0gJyc6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzLmFwcGVuZChuYW1lKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzLmFwcGVuZChkX25hbWUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpbG9vcCs9MQogICAgICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgICAgIGluZGV4ID0gZGlhbG9nLnNlbGVjdCgnQ2hvb3NlIGEgdmlkZW8gc291cmNlJywgbmFtZXMpCiAgICAgICAgICAgIGlmIGluZGV4ID49IDA6CiAgICAgICAgICAgICAgICBwbGF5bmFtZT1uYW1lc1tpbmRleF0KICAgICAgICAgICAgICAgIHByaW50ICdwbGF5bmFtZXh4JyxwbGF5bmFtZQogICAgICAgICAgICAgICAgaWYgIiZtb2RlPTE5IiBpbiBtdV9wbGF5bGlzdFtpbmRleF06CiAgICAgICAgICAgICAgICAgICAgICAgICNwbGF5c2V0cmVzb2x2ZWQgKHVybHNvbHZlcihtdV9wbGF5bGlzdFtpbmRleF0ucmVwbGFjZSgnJm1vZGU9MTknLCcnKSksbmFtZSxpY29uaW1hZ2UsVHJ1ZSkKICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOnBsYXluYW1lLCdtZWRpYXR5cGUnOid2aWRlbyd9KQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgICAgICAgICAgICAgIHVybHRvcGxheT11cmxzb2x2ZXIobXVfcGxheWxpc3RbaW5kZXhdLnJlcGxhY2UoJyZtb2RlPTE5JywnJykucmVwbGFjZSgnOycsJycpKQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQYXRoKHVybHRvcGxheSkKICAgICAgICAgICAgICAgICAgICB4Ym1jLlBsYXllcigpLnBsYXkodXJsdG9wbGF5LGxpeikKICAgICAgICAgICAgICAgIGVsaWYgIiRkb3JlZ2V4IiBpbiBtdV9wbGF5bGlzdFtpbmRleF0gOgojICAgICAgICAgICAgICAgICAgICBwcmludCBtdV9wbGF5bGlzdFtpbmRleF0KICAgICAgICAgICAgICAgICAgICBzZXBhdGUgPSBtdV9wbGF5bGlzdFtpbmRleF0uc3BsaXQoJyZyZWdleHM9JykKIyAgICAgICAgICAgICAgICAgICAgcHJpbnQgc2VwYXRlCiAgICAgICAgICAgICAgICAgICAgdXJsLHNldHJlc29sdmVkID0gZ2V0UmVnZXhQYXJzZWQoc2VwYXRlWzFdLCBzZXBhdGVbMF0pCiAgICAgICAgICAgICAgICAgICAgdXJsMiA9IHVybC5yZXBsYWNlKCc7JywnJykKICAgICAgICAgICAgICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKHBsYXluYW1lLCBpY29uSW1hZ2U9aWNvbmltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOnBsYXluYW1lLCdtZWRpYXR5cGUnOid2aWRlbyd9KQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgICAgICAgICAgICAgIGxpei5zZXRQYXRoKHVybDIpCiAgICAgICAgICAgICAgICAgICAgeGJtYy5QbGF5ZXIoKS5wbGF5KHVybDIsbGl6KQoKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgdXJsID0gbXVfcGxheWxpc3RbaW5kZXhdCiAgICAgICAgICAgICAgICAgICAgdXJsPXVybC5zcGxpdCgnJnJlZ2V4cz0nKVswXQogICAgICAgICAgICAgICAgICAgIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0ocGxheW5hbWUsIGljb25JbWFnZT1pY29uaW1hZ2UsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKICAgICAgICAgICAgICAgICAgICBsaXouc2V0SW5mbyh0eXBlPSdWaWRlbycsIGluZm9MYWJlbHM9eydUaXRsZSc6cGxheW5hbWUsJ21lZGlhdHlwZSc6J3ZpZGVvJ30pCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCJJc1BsYXlhYmxlIiwidHJ1ZSIpCiAgICAgICAgICAgICAgICAgICAgbGl6LnNldFBhdGgodXJsKQogICAgICAgICAgICAgICAgICAgIHhibWMuUGxheWVyKCkucGxheSh1cmwsbGl6KQogICAgICAgIGVsaWYgbm90IHF1ZXVlVmlkZW86CiAgICAgICAgICAgICNwbGF5bGlzdCA9IHhibWMuUGxheUxpc3QoMSkgIyAxIG1lYW5zIHZpZGVvCiAgICAgICAgICAgIHBsYXlsaXN0LmNsZWFyKCkKICAgICAgICAgICAgaXRlbSA9IDAKICAgICAgICAgICAgZm9yIGkgaW4gbXVfcGxheWxpc3Q6CiAgICAgICAgICAgICAgICBpdGVtICs9IDEKICAgICAgICAgICAgICAgIGluZm8gPSB4Ym1jZ3VpLkxpc3RJdGVtKCclcykgJXMnICUoc3RyKGl0ZW0pLG5hbWUpKQogICAgICAgICAgICAgICAgIyBEb24ndCBkbyB0aGlzIGFzIHJlZ2V4IHBhcnNlZCBtaWdodCB0YWtlIGxvbmdlcgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGlmICIkZG9yZWdleCIgaW4gaToKICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXRlID0gaS5zcGxpdCgnJnJlZ2V4cz0nKQojICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgc2VwYXRlCiAgICAgICAgICAgICAgICAgICAgICAgIHVybCxzZXRyZXNvbHZlZCA9IGdldFJlZ2V4UGFyc2VkKHNlcGF0ZVsxXSwgc2VwYXRlWzBdKQogICAgICAgICAgICAgICAgICAgIGVsaWYgIiZtb2RlPTE5IiBpbiBpOgogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmxzb2x2ZXIoaS5yZXBsYWNlKCcmbW9kZT0xOScsJycpLnJlcGxhY2UoJzsnLCcnKSkgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiB1cmw6CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LmFkZCh1cmwsIGluZm8pCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QuYWRkKGksIGluZm8pCiAgICAgICAgICAgICAgICAgICAgcGFzcyAjeGJtYy5QbGF5ZXIoKS5wbGF5KHVybCkKCiAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oJ3BsYXlsaXN0LnBsYXlvZmZzZXQodmlkZW8sMCknKQogICAgICAgIGVsc2U6CgogICAgICAgICAgICAgICAgbGlzdGl0ZW0gPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUpCiAgICAgICAgICAgICAgICBwbGF5bGlzdC5hZGQobXVfcGxheWxpc3QsIGxpc3RpdGVtKQoKZGVmIGRvd25sb2FkX2ZpbGUobmFtZSwgdXJsKToKICAgICAgICAKICAgICAgICBpZiBhZGRvbi5nZXRTZXR0aW5nKCdzYXZlX2xvY2F0aW9uJykgPT0gIiI6CiAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKCdGaXJlVFYnLCdDaG9vc2UgYSBsb2NhdGlvbiB0byBzYXZlIGZpbGVzLicsMTUwMDAsIitpY29uKyIpIikKICAgICAgICAgICAgYWRkb24ub3BlblNldHRpbmdzKCkKICAgICAgICBwYXJhbXMgPSB7J3VybCc6IHVybCwgJ2Rvd25sb2FkX3BhdGgnOiBhZGRvbi5nZXRTZXR0aW5nKCdzYXZlX2xvY2F0aW9uJyl9CiAgICAgICAgZG93bmxvYWRlci5kb3dubG9hZChuYW1lLCBwYXJhbXMpCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIHJldCA9IGRpYWxvZy55ZXNubygnRmlyZVRWJywgJ0RvIHlvdSB3YW50IHRvIGFkZCB0aGlzIGZpbGUgYXMgYSBzb3VyY2U/JykKICAgICAgICBpZiByZXQ6CiAgICAgICAgICAgIGFkZFNvdXJjZShvcy5wYXRoLmpvaW4oYWRkb24uZ2V0U2V0dGluZygnc2F2ZV9sb2NhdGlvbicpLCBuYW1lKSkKCmRlZiBfc2VhcmNoKHVybCxuYW1lKToKICAgIyBwcmludCB1cmwsbmFtZQogICAgcGx1Z2luc2VhcmNodXJscyA9IFsncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmdlbmVzaXMvP2FjdGlvbj1zaG93c19zZWFyY2gnLFwKICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uZ2VuZXNpcy8/YWN0aW9uPW1vdmllc19zZWFyY2gnLFwKICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8uc2FsdHMvP21vZGU9c2VhcmNoJmFtcDtzZWN0aW9uPU1vdmllcycsXAogICAgICAgICAgICAgJ3BsdWdpbjovL3BsdWdpbi52aWRlby5zYWx0cy8/bW9kZT1zZWFyY2gmYW1wO3NlY3Rpb249VFYnLFwKICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8ubXVjaG1vdmllcy5oZC8/YWN0aW9uPW1vdmllc19zZWFyY2gnLFwKICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8udmlvb3ouY28vP2FjdGlvbj1yb290X3NlYXJjaCcsXAogICAgICAgICAgICAgJ3BsdWdpbjovL3BsdWdpbi52aWRlby5vcm9yb3R2Lz9hY3Rpb249c2hvd3Nfc2VhcmNoJyxcCiAgICAgICAgICAgICAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlpZnltb3ZpZXMuaGQvP2FjdGlvbj1tb3ZpZXNfc2VhcmNoJyxcCiAgICAgICAgICAgICAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLmNhcnRvb25oZHR3by8/ZGVzY3JpcHRpb24mYW1wO2ZhbmFydCZhbXA7aWNvbmltYWdlJmFtcDttb2RlPTMmYW1wO25hbWU9U2VhcmNoJmFtcDt1cmw9dXJsJyxcCiAgICAgICAgICAgICAncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUva29kaW9uL3NlYXJjaC9saXN0LycsXAogICAgICAgICAgICAgJ3BsdWdpbjovL3BsdWdpbi52aWRlby5kYWlseW1vdGlvbl9jb20vP21vZGU9c2VhcmNoJmFtcDt1cmwnLFwKICAgICAgICAgICAgICdwbHVnaW46Ly9wbHVnaW4udmlkZW8udmltZW8va29kaW9uL3NlYXJjaC9saXN0LydcCiAgICAgICAgICAgICBdCiAgICBuYW1lcyA9IFsnR2Vuc2lzIFRWJywnR2VuZXNpcyBNb3ZpZScsJ1NhbHQgbW92aWUnLCdzYWx0IFRWJywnTXVjaG1vdmllcycsJ3Zpb296JywnT1Jvcm9UVicsXAogICAgICAgICAgICAgJ1lpZnltb3ZpZXMnLCdjYXJ0b29uSEQnLCdZb3V0dWJlJywnRGFpbHlNb3Rpb24nLCdWaW1lbyddCiAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICBpbmRleCA9IGRpYWxvZy5zZWxlY3QoJ0Nob29zZSBhIHZpZGVvIHNvdXJjZScsIG5hbWVzKQoKICAgIGlmIGluZGV4ID49IDA6CiAgICAgICAgdXJsID0gcGx1Z2luc2VhcmNodXJsc1tpbmRleF0KIyAgICAgICAgcHJpbnQgJ3VybCcsdXJsCiAgICAgICAgcGx1Z2lucXVlcnlieUpTT04odXJsKQoKZGVmIGFkZERpcihuYW1lLHVybCxtb2RlLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24sZ2VucmUsZGF0ZSxjcmVkaXRzLHNob3djb250ZXh0PUZhbHNlLHJlZ2V4cz1Ob25lLHJlZ191cmw9Tm9uZSxhbGxpbmZvPXt9KToKCiAgICAgICAgI3ByaW50ICdhZGREaXInCgogICAgICAgIGlmIHJlZ2V4cyBhbmQgbGVuKHJlZ2V4cyk+MDoKICAgICAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImZmFuYXJ0PSIrdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0KSsiJnJlZ2V4cz0iK3JlZ2V4cwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHU9c3lzLmFyZ3ZbMF0rIj91cmw9Iit1cmxsaWIucXVvdGVfcGx1cyh1cmwpKyImbW9kZT0iK3N0cihtb2RlKSsiJm5hbWU9Iit1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSsiJmZhbmFydD0iK3VybGxpYi5xdW90ZV9wbHVzKGZhbmFydCkKICAgICAgICAKICAgICAgICBvaz1UcnVlCiAgICAgICAgaWYgZGF0ZSA9PSAnJzoKICAgICAgICAgICAgZGF0ZSA9IE5vbmUKICAgICAgICBlbHNlOgogICAgICAgICAgICBkZXNjcmlwdGlvbiArPSAnXG5cbkRhdGU6ICVzJyAlZGF0ZQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgaWYgbGVuKGFsbGluZm8pIDwxIDoKICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogbmFtZSwgJ21lZGlhdHlwZSc6J3ZpZGVvJywgIlBsb3QiOiBkZXNjcmlwdGlvbiwgIkdlbnJlIjogZ2VucmUsICJkYXRlYWRkZWQiOiBkYXRlLCAiY3JlZGl0cyI6IGNyZWRpdHMgfSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBhbGxpbmZvLnVwZGF0ZSh7J21lZGlhdHlwZSc6J3ZpZGVvJ30pCiAgICAgICAgICAgIGxpei5zZXRJbmZvKHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz0gYWxsaW5mbykKICAgICAgICBsaXouc2V0UHJvcGVydHkoIkZhbmFydF9JbWFnZSIsIGZhbmFydCkKICAgICAgICBpZiBzaG93Y29udGV4dDoKICAgICAgICAgICAgY29udGV4dE1lbnUgPSBbXQogICAgICAgICAgICBwYXJlbnRhbGJsb2NrID1hZGRvbi5nZXRTZXR0aW5nKCdwYXJlbnRhbGJsb2NrZWQnKQogICAgICAgICAgICBwYXJlbnRhbGJsb2NrPSBwYXJlbnRhbGJsb2NrPT0idHJ1ZSIKICAgICAgICAgICAgcGFyZW50YWxibG9ja2VkcGluID1hZGRvbi5nZXRTZXR0aW5nKCdwYXJlbnRhbGJsb2NrZWRwaW4nKQojICAgICAgICAgICAgcHJpbnQgJ3BhcmVudGFsYmxvY2tlZHBpbicscGFyZW50YWxibG9ja2VkcGluCiAgICAgICAgICAgIGlmIGxlbihwYXJlbnRhbGJsb2NrZWRwaW4pPjA6CiAgICAgICAgICAgICAgICBpZiBwYXJlbnRhbGJsb2NrOgogICAgICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ0Rpc2FibGUgUGFyZW50YWwgQmxvY2snLCdYQk1DLlJ1blBsdWdpbiglcz9tb2RlPTU1Jm5hbWU9JXMpJyAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdFbmFibGUgUGFyZW50YWwgQmxvY2snLCdYQk1DLlJ1blBsdWdpbiglcz9tb2RlPTU2Jm5hbWU9JXMpJyAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBzaG93Y29udGV4dCA9PSAnc291cmNlJzoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBuYW1lIGluIHN0cihTT1VSQ0VTKToKICAgICAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdSZW1vdmUgZnJvbSBTb3VyY2VzJywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT04Jm5hbWU9JXMpJyAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBlbGlmIHNob3djb250ZXh0ID09ICdkb3dubG9hZCc6CiAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdEb3dubG9hZCcsJ1hCTUMuUnVuUGx1Z2luKCVzP3VybD0lcyZtb2RlPTkmbmFtZT0lcyknCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKHVybCksIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpKSkpCiAgICAgICAgICAgIGVsaWYgc2hvd2NvbnRleHQgPT0gJ2Zhdic6CiAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdSZW1vdmUgZnJvbSBGaXJlVFYgRmF2b3JpdGVzJywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT02Jm5hbWU9JXMpJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQogICAgICAgICAgICBpZiBzaG93Y29udGV4dCA9PSAnISF1cGRhdGUnOgogICAgICAgICAgICAgICAgZmF2X3BhcmFtczIgPSAoCiAgICAgICAgICAgICAgICAgICAgJyVzP3VybD0lcyZtb2RlPTE3JnJlZ2V4cz0lcycKICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhyZWdfdXJsKSwgcmVnZXhzKQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ1tDT0xPUiB5ZWxsb3ddISF1cGRhdGVbL0NPTE9SXScsJ1hCTUMuUnVuUGx1Z2luKCVzKScgJWZhdl9wYXJhbXMyKSkKICAgICAgICAgICAgaWYgbm90IG5hbWUgaW4gRkFWOgogICAgICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnQWRkIHRvIEZpcmVUViBGYXZvcml0ZXMnLCdYQk1DLlJ1blBsdWdpbiglcz9tb2RlPTUmbmFtZT0lcyZ1cmw9JXMmaWNvbmltYWdlPSVzJmZhbmFydD0lcyZmYXZfbW9kZT0lcyknCiAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSwgdXJsbGliLnF1b3RlX3BsdXModXJsKSwgdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKSwgdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0KSwgbW9kZSkpKQogICAgICAgICAgICBsaXouYWRkQ29udGV4dE1lbnVJdGVtcyhjb250ZXh0TWVudSkKICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPVRydWUpCiAgICAgICAgcmV0dXJuIG9rCgpkZWYgeXRkbF9kb3dubG9hZCh1cmwsdGl0bGUsbWVkaWFfdHlwZT0ndmlkZW8nKToKICAgICMgcGxheSBpbiB4Ym1jIHdoaWxlIHBsYXlpbmcgZ28gYmFjayB0byBjb250ZXh0TWVudShjKSB0byAiISFEb3dubG9hZCEhIgogICAgIyBUcmlhbCB5YXNjZWVuOiBzZXBlcmF0ZSB8VXNlci1BZ2VudD0KICAgIGltcG9ydCB5b3V0dWJlZGwKICAgIAogICAgaWYgbm90IHVybCA9PSAnJzoKICAgICAgICBpZiBtZWRpYV90eXBlPT0gJ2F1ZGlvJzoKICAgICAgICAgICAgeW91dHViZWRsLnNpbmdsZV9ZRCh1cmwsZG93bmxvYWQ9VHJ1ZSxhdWRpbz1UcnVlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHlvdXR1YmVkbC5zaW5nbGVfWUQodXJsLGRvd25sb2FkPVRydWUpCiAgICBlbGlmIHhibWMuUGxheWVyKCkuaXNQbGF5aW5nKCkgPT0gVHJ1ZSA6CiAgICAgICAgaW1wb3J0IFlEU3RyZWFtRXh0cmFjdG9yCiAgICAgICAgaWYgWURTdHJlYW1FeHRyYWN0b3IuaXNEb3dubG9hZGluZygpID09IFRydWU6CgogICAgICAgICAgICBZRFN0cmVhbUV4dHJhY3Rvci5tYW5hZ2VEb3dubG9hZHMoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHhibWNfdXJsID0geGJtYy5QbGF5ZXIoKS5nZXRQbGF5aW5nRmlsZSgpCgogICAgICAgICAgICB4Ym1jX3VybCA9IHhibWNfdXJsLnNwbGl0KCd8VXNlci1BZ2VudD0nKVswXQogICAgICAgICAgICBpbmZvID0geyd1cmwnOnhibWNfdXJsLCd0aXRsZSc6dGl0bGUsJ21lZGlhX3R5cGUnOm1lZGlhX3R5cGV9CiAgICAgICAgICAgIHlvdXR1YmVkbC5zaW5nbGVfWUQoJycsZG93bmxvYWQ9VHJ1ZSxkbF9pbmZvPWluZm8pCiAgICBlbHNlOgogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKERPV05MT0FELEZpcnN0IFBsYXkgW0NPTE9SIHllbGxvd11XSElMRSBwbGF5aW5nIGRvd25sb2FkWy9DT0xPUl0gLDEwMDAwKSIpCgojIyBMdW5hdGl4eiBQc2V1ZG9UViBmZWF0dXJlCmRlZiBhc2NpaShzdHJpbmcpOgogICAgaWYgaXNpbnN0YW5jZShzdHJpbmcsIGJhc2VzdHJpbmcpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uoc3RyaW5nLCB1bmljb2RlKToKICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuZW5jb2RlKCdhc2NpaScsICdpZ25vcmUnKQogICAgcmV0dXJuIHN0cmluZwoKZGVmIHVuaShzdHJpbmcsIGVuY29kaW5nID0gJ3V0Zi04Jyk6CiAgICBpZiBpc2luc3RhbmNlKHN0cmluZywgYmFzZXN0cmluZyk6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uoc3RyaW5nLCB1bmljb2RlKToKICAgICAgICAgICAgc3RyaW5nID0gdW5pY29kZShzdHJpbmcsIGVuY29kaW5nLCAnaWdub3JlJykKICAgIHJldHVybiBzdHJpbmcKCmRlZiByZW1vdmVOb25Bc2NpaShzKTogcmV0dXJuICIiLmpvaW4oZmlsdGVyKGxhbWJkYSB4OiBvcmQoeCk8MTI4LCBzKSkKCmRlZiBzZW5kSlNPTiggY29tbWFuZCk6CiAgICBkYXRhID0gJycKICAgIHRyeToKICAgICAgICBkYXRhID0geGJtYy5leGVjdXRlSlNPTlJQQyh1bmkoY29tbWFuZCkpCiAgICBleGNlcHQgVW5pY29kZUVuY29kZUVycm9yOgogICAgICAgIGRhdGEgPSB4Ym1jLmV4ZWN1dGVKU09OUlBDKGFzY2lpKGNvbW1hbmQpKQoKICAgIHJldHVybiB1bmkoZGF0YSkKCmRlZiBwbHVnaW5xdWVyeWJ5SlNPTih1cmwsZ2l2ZV9tZV9yZXN1bHQ9Tm9uZSxwbGF5bGlzdD1GYWxzZSk6CiAgICBpZiAnYXVkaW8nIGluIHVybDoKICAgICAgICBqc29uX3F1ZXJ5ID0gdW5pKCd7Impzb25ycGMiOiIyLjAiLCJtZXRob2QiOiJGaWxlcy5HZXREaXJlY3RvcnkiLCJwYXJhbXMiOiB7ImRpcmVjdG9yeSI6IiVzIiwibWVkaWEiOiJ2aWRlbyIsICJwcm9wZXJ0aWVzIjogWyJ0aXRsZSIsICJhbGJ1bSIsICJhcnRpc3QiLCAiZHVyYXRpb24iLCJ0aHVtYm5haWwiLCAieWVhciJdfSwgImlkIjogMX0nKSAldXJsCiAgICBlbHNlOgogICAgICAgIGpzb25fcXVlcnkgPSB1bmkoJ3sianNvbnJwYyI6IjIuMCIsIm1ldGhvZCI6IkZpbGVzLkdldERpcmVjdG9yeSIsInBhcmFtcyI6eyJkaXJlY3RvcnkiOiIlcyIsIm1lZGlhIjoidmlkZW8iLCJwcm9wZXJ0aWVzIjpbICJwbG90IiwicGxheWNvdW50IiwiZGlyZWN0b3IiLCAiZ2VucmUiLCJ2b3RlcyIsImR1cmF0aW9uIiwidHJhaWxlciIsInByZW1pZXJlZCIsInRodW1ibmFpbCIsInRpdGxlIiwieWVhciIsImRhdGVhZGRlZCIsImZhbmFydCIsInJhdGluZyIsInNlYXNvbiIsImVwaXNvZGUiLCJzdHVkaW8iLCJtcGFhIl19LCJpZCI6MX0nKSAldXJsCiAgICBqc29uX2ZvbGRlcl9kZXRhaWwgPSBqc29uLmxvYWRzKHNlbmRKU09OKGpzb25fcXVlcnkpKQogICAgI3ByaW50IGpzb25fZm9sZGVyX2RldGFpbAogICAgaWYgZ2l2ZV9tZV9yZXN1bHQ6CiAgICAgICAgcmV0dXJuIGpzb25fZm9sZGVyX2RldGFpbAogICAgaWYganNvbl9mb2xkZXJfZGV0YWlsLmhhc19rZXkoJ2Vycm9yJyk6CiAgICAgICAgcmV0dXJuCiAgICBlbHNlOgoKICAgICAgICBmb3IgaSBpbiBqc29uX2ZvbGRlcl9kZXRhaWxbJ3Jlc3VsdCddWydmaWxlcyddIDoKICAgICAgICAgICAgbWV0YSA9e30KICAgICAgICAgICAgdXJsID0gaVsnZmlsZSddCiAgICAgICAgICAgIG5hbWUgPSByZW1vdmVOb25Bc2NpaShpWydsYWJlbCddKQogICAgICAgICAgICB0aHVtYm5haWwgPSByZW1vdmVOb25Bc2NpaShpWyd0aHVtYm5haWwnXSkKICAgICAgICAgICAgZmFuYXJ0ID0gcmVtb3ZlTm9uQXNjaWkoaVsnZmFuYXJ0J10pCiAgICAgICAgICAgIG1ldGEgPSBkaWN0KChrLHYpIGZvciBrLCB2IGluIGkuaXRlcml0ZW1zKCkgaWYgbm90IHYgPT0gJzAnIG9yIG5vdCB2ID09IC0xIG9yIHYgPT0gJycpCiAgICAgICAgICAgIG1ldGEucG9wKCJmaWxlIiwgTm9uZSkKICAgICAgICAgICAgaWYgaVsnZmlsZXR5cGUnXSA9PSAnZmlsZSc6CiAgICAgICAgICAgICAgICBpZiBwbGF5bGlzdDoKICAgICAgICAgICAgICAgICAgICBwbGF5X3BsYXlsaXN0KG5hbWUsdXJsLHF1ZXVlVmlkZW89JzEnKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGFkZExpbmsodXJsLG5hbWUsdGh1bWJuYWlsLGZhbmFydCwnJywnJywnJywnJyxOb25lLCcnLHRvdGFsPWxlbihqc29uX2ZvbGRlcl9kZXRhaWxbJ3Jlc3VsdCddWydmaWxlcyddKSxhbGxpbmZvPW1ldGEpCiAgICAgICAgICAgICAgICAgICAgI3hibWMuZXhlY3V0ZWJ1aWx0aW4oIkNvbnRhaW5lci5TZXRWaWV3TW9kZSg1MDApIikKICAgICAgICAgICAgICAgICAgICBpZiBpWyd0eXBlJ10gYW5kIGlbJ3R5cGUnXSA9PSAndHZzaG93JyA6CiAgICAgICAgICAgICAgICAgICAgICAgIHhibWNwbHVnaW4uc2V0Q29udGVudChpbnQoc3lzLmFyZ3ZbMV0pLCAndHZzaG93cycpCiAgICAgICAgICAgICAgICAgICAgZWxpZiBpWydlcGlzb2RlJ10gPiAwIDoKICAgICAgICAgICAgICAgICAgICAgICAgeGJtY3BsdWdpbi5zZXRDb250ZW50KGludChzeXMuYXJndlsxXSksICdlcGlzb2RlcycpCgogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYWRkRGlyKG5hbWUsdXJsLDUzLHRodW1ibmFpbCxmYW5hcnQsJycsJycsJycsJycsYWxsaW5mbz1tZXRhKQogICAgICAgIHhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkKCmRlZiBhZGRMaW5rKHVybCxuYW1lLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24sZ2VucmUsZGF0ZSxzaG93Y29udGV4dCxwbGF5bGlzdCxyZWdleHMsdG90YWwsc2V0Q29va2llPSIiLGFsbGluZm89e30pOgogICAgICAgICNwcmludCAndXJsLG5hbWUscmVnZXgnLHVybCxuYW1lLGljb25pbWFnZSxyZWdleHMKICAgICAgICBjb250ZXh0TWVudSA9W10KICAgICAgICBwYXJlbnRhbGJsb2NrID1hZGRvbi5nZXRTZXR0aW5nKCdwYXJlbnRhbGJsb2NrZWQnKQogICAgICAgIHBhcmVudGFsYmxvY2s9IHBhcmVudGFsYmxvY2s9PSJ0cnVlIgogICAgICAgIHBhcmVudGFsYmxvY2tlZHBpbiA9YWRkb24uZ2V0U2V0dGluZygncGFyZW50YWxibG9ja2VkcGluJykKIyAgICAgICAgcHJpbnQgJ3BhcmVudGFsYmxvY2tlZHBpbicscGFyZW50YWxibG9ja2VkcGluCiAgICAgICAgaWYgbGVuKHBhcmVudGFsYmxvY2tlZHBpbik+MDoKICAgICAgICAgICAgaWYgcGFyZW50YWxibG9jazoKICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ0Rpc2FibGUgUGFyZW50YWwgQmxvY2snLCdYQk1DLlJ1blBsdWdpbiglcz9tb2RlPTU1Jm5hbWU9JXMpJyAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnRW5hYmxlIFBhcmVudGFsIEJsb2NrJywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT01NiZuYW1lPSVzKScgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIG5hbWUgPSBuYW1lLmVuY29kZSgndXRmLTgnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIG9rID0gVHJ1ZQogICAgICAgIGlzRm9sZGVyPUZhbHNlCiAgICAgICAgaWYgcmVnZXhzOgogICAgICAgICAgICBtb2RlID0gJzE3JwogICAgICAgICAgICBpZiAnbGlzdHJlcGVhdCcgaW4gcmVnZXhzOgogICAgICAgICAgICAgICAgaXNGb2xkZXI9VHJ1ZQojICAgICAgICAgICAgICAgcHJpbnQgJ3NldHRpbmcgYXMgZm9sZGVyIGluIGxpbmsnCiAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ1tDT0xPUiB3aGl0ZV0hIURvd25sb2FkIEN1cnJlbnRseSBQbGF5aW5nISFbL0NPTE9SXScsJ1hCTUMuUnVuUGx1Z2luKCVzP3VybD0lcyZtb2RlPTIxJm5hbWU9JXMpJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQogICAgICAgIGVsaWYgIChhbnkoeCBpbiB1cmwgZm9yIHggaW4gcmVzb2x2ZV91cmwpIGFuZCAgdXJsLnN0YXJ0c3dpdGgoJ2h0dHAnKSkgb3IgdXJsLmVuZHN3aXRoKCcmbW9kZT0xOScpOgogICAgICAgICAgICB1cmw9dXJsLnJlcGxhY2UoJyZtb2RlPTE5JywnJykKICAgICAgICAgICAgbW9kZSA9ICcxOScKICAgICAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kKCgnW0NPTE9SIHdoaXRlXSEhRG93bmxvYWQgQ3VycmVudGx5IFBsYXlpbmchIVsvQ09MT1JdJywnWEJNQy5SdW5QbHVnaW4oJXM/dXJsPSVzJm1vZGU9MjEmbmFtZT0lcyknCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKHVybCksIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpKSkpCiAgICAgICAgZWxpZiB1cmwuZW5kc3dpdGgoJyZtb2RlPTE4Jyk6CiAgICAgICAgICAgIHVybD11cmwucmVwbGFjZSgnJm1vZGU9MTgnLCcnKQogICAgICAgICAgICBtb2RlID0gJzE4JwogICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdbQ09MT1Igd2hpdGVdISFEb3dubG9hZCEhWy9DT0xPUl0nLCdYQk1DLlJ1blBsdWdpbiglcz91cmw9JXMmbW9kZT0yMyZuYW1lPSVzKScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXModXJsKSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkKICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygnZGxhdWRpb29ubHknKSA9PSAndHJ1ZSc6CiAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCchIURvd25sb2FkIFtDT0xPUiBzZWFibHVlXUF1ZGlvISFbL0NPTE9SXScsJ1hCTUMuUnVuUGx1Z2luKCVzP3VybD0lcyZtb2RlPTI0Jm5hbWU9JXMpJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXModXJsKSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkKICAgICAgICBlbGlmIHVybC5lbmRzd2l0aCgnJm1vZGU9MjAnKToKICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCcmbW9kZT0yMCcsJycpCiAgICAgICAgICAgIG1vZGUgPSAnMjAnCiAgICAgICAgZWxpZiB1cmwuZW5kc3dpdGgoJyZtb2RlPTIyJyk6CiAgICAgICAgICAgIHVybD11cmwucmVwbGFjZSgnJm1vZGU9MjInLCcnKQogICAgICAgICAgICBtb2RlID0gJzIyJwogICAgICAgIGVsaWYgdXJsLnN0YXJ0c3dpdGgoJ21hZ25ldDo/eHQ9Jyk6CiAgICAgICAgICAgIGlmICcmJyBpbiB1cmwgYW5kIG5vdCAnJmFtcDsnIGluIHVybCA6CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnJicsJyZhbXA7JykKICAgICAgICAgICAgdXJsID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby5wdWxzYXIvcGxheT91cmk9JyArIHVybAogICAgICAgICAgICBtb2RlID0gJzEyJwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1vZGUgPSAnMTInCiAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJ1tDT0xPUiB3aGl0ZV0hIURvd25sb2FkIEN1cnJlbnRseSBQbGF5aW5nISFbL0NPTE9SXScsJ1hCTUMuUnVuUGx1Z2luKCVzP3VybD0lcyZtb2RlPTIxJm5hbWU9JXMpJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpKQogICAgICAgIGlmICdwbHVnaW46Ly9wbHVnaW4udmlkZW8ueW91dHViZS9wbGF5Lz92aWRlb19pZD0nIGluIHVybDoKICAgICAgICAgICAgICB5dF9hdWRpb191cmwgPSB1cmwucmVwbGFjZSgncGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvcGxheS8/dmlkZW9faWQ9JywnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0nKQogICAgICAgICAgICAgIGNvbnRleHRNZW51LmFwcGVuZCgoJyEhRG93bmxvYWQgW0NPTE9SIGJsdWVdQXVkaW8hIVsvQ09MT1JdJywnWEJNQy5SdW5QbHVnaW4oJXM/dXJsPSVzJm1vZGU9MjQmbmFtZT0lcyknCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJShzeXMuYXJndlswXSwgdXJsbGliLnF1b3RlX3BsdXMoeXRfYXVkaW9fdXJsKSwgdXJsbGliLnF1b3RlX3BsdXMobmFtZSkpKSkKICAgICAgICB1PXN5cy5hcmd2WzBdKyI/IgogICAgICAgIHBsYXlfbGlzdCA9IEZhbHNlCiAgICAgICAgCiAgICAgICAgaWYgcGxheWxpc3Q6CiAgICAgICAgICAgIGlmIGFkZG9uLmdldFNldHRpbmcoJ2FkZF9wbGF5bGlzdCcpID09ICJmYWxzZSIgYW5kICckJExTUGxheU9ubHlPbmUkJCcgbm90IGluIHBsYXlsaXN0WzBdIDoKICAgICAgICAgICAgICAgIHUgKz0gInVybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrbW9kZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgdSArPSAibW9kZT0xMyZuYW1lPSVzJnBsYXlsaXN0PSVzIiAlKHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpLCB1cmxsaWIucXVvdGVfcGx1cyhzdHIocGxheWxpc3QpLnJlcGxhY2UoJywnLCd8fCcpKSkKICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lICsgJ1tDT0xPUiBtYWdlbnRhXSAoJyArIHN0cihsZW4ocGxheWxpc3QpKSArICcgaXRlbXMgKVsvQ09MT1JdJwogICAgICAgICAgICAgICAgcGxheV9saXN0ID0gVHJ1ZQogICAgICAgIGVsaWYgbW9kZT09JzIyJyBvciAobW9kZT09JzE3JyBhbmQgdXJsLmVuZHN3aXRoKCcmbW9kZT0yMicpKTogICAgICAgICAgICAgCiAgICAgICAgICAgIHUgKz0gInVybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZuYW1lPSIrdXJsbGliLnF1b3RlKG5hbWUpKyImbW9kZT0iK21vZGUKICAgICAgICBlbHNlOgogICAgICAgICAgICB1ICs9ICJ1cmw9Iit1cmxsaWIucXVvdGVfcGx1cyh1cmwpKyImbW9kZT0iK21vZGUKICAgICAgICBpZiByZWdleHM6CiAgICAgICAgICAgIHUgKz0gIiZyZWdleHM9IityZWdleHMKICAgICAgICBpZiBub3Qgc2V0Q29va2llID09ICcnOgogICAgICAgICAgICB1ICs9ICImc2V0Q29va2llPSIrdXJsbGliLnF1b3RlX3BsdXMoc2V0Q29va2llKQogICAgICAgIGlmIGljb25pbWFnZSBhbmQgIG5vdCBpY29uaW1hZ2UgPT0gJyc6CiAgICAgICAgICAgIHUgKz0gIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpCiAgICAgICAgICAgIAogICAgICAgIGlmIGRhdGUgPT0gJyc6CiAgICAgICAgICAgIGRhdGUgPSBOb25lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGVzY3JpcHRpb24gKz0gJ1xuXG5EYXRlOiAlcycgJWRhdGUKICAgICAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9IkRlZmF1bHRWaWRlby5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCgogICAgICAgICNpZiBpc0ZvbGRlcjoKICAgICAgICBpZiBhbGxpbmZvPT1Ob25lIG9yIGxlbihhbGxpbmZvKSA8MToKICAgICAgICAgICAgbGl6LnNldEluZm8odHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogbmFtZSwgJ21lZGlhdHlwZSc6J3ZpZGVvJywgIlBsb3QiOiBkZXNjcmlwdGlvbiwgIkdlbnJlIjogZ2VucmUsICJkYXRlYWRkZWQiOiBkYXRlIH0pCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYWxsaW5mby51cGRhdGUoeydtZWRpYXR5cGUnOid2aWRlbyd9KQogICAgICAgICAgICBsaXouc2V0SW5mbyh0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9YWxsaW5mbykKICAgICAgICBsaXouc2V0UHJvcGVydHkoIkZhbmFydF9JbWFnZSIsIGZhbmFydCkKCiAgICAgICAgaWYgJyQkUkVTT0xWRU9OTFkkJCcgaW4gdXJsOgogICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ0lzUGxheWFibGUnLCAndHJ1ZScpCiAKICAgICAgICBpZiAobm90IHBsYXlfbGlzdCkgYW5kIG5vdCBhbnkoeCBpbiB1cmwgZm9yIHggaW4gZ19pZ25vcmVTZXRSZXNvbHZlZCkgYW5kIG5vdCAnJFBMQVlFUlBST1hZJD0nIGluIHVybCBhbmQgbm90IChtb2RlPT0nMjInIG9yIChtb2RlPT0nMTcnIGFuZCB1cmwuZW5kc3dpdGgoJyZtb2RlPTIyJykpKTojICAobm90IHVybC5zdGFydHN3aXRoKCdwbHVnaW46Ly9wbHVnaW4udmlkZW8uZjRtVGVzdGVyJykpOgogICAgICAgICAgICBpZiByZWdleHM6CiAgICAgICAgICAgICAgICAjcHJpbnQgdXJsbGliLnVucXVvdGVfcGx1cyhyZWdleHMpCiAgICAgICAgICAgICAgICBpZiAnJHB5RnVuY3Rpb246cGxheW1lZGlhKCcgbm90IGluIHVybGxpYi51bnF1b3RlX3BsdXMocmVnZXhzKSBhbmQgJ25vdHBsYXlhYmxlJyBub3QgaW4gdXJsbGliLnVucXVvdGVfcGx1cyhyZWdleHMpIGFuZCAnbGlzdHJlcGVhdCcgbm90IGluICB1cmxsaWIudW5xdW90ZV9wbHVzKHJlZ2V4cykgOgogICAgICAgICAgICAgICAgICAgICNwcmludCAnc2V0dGluZyBpc3BsYXlhYmxlJyx1cmwsIHVybGxpYi51bnF1b3RlX3BsdXMocmVnZXhzKSx1cmwKICAgICAgICAgICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ0lzUGxheWFibGUnLCAndHJ1ZScpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ0lzUGxheWFibGUnLCAndHJ1ZScpCiAgICAgICAgICAgICAgICAKICAgICAgICBlbHNlOgogICAgICAgICAgICBhZGRvbl9sb2coJ05PVCBzZXR0aW5nIGlzcGxheWFibGUnK3VybCkKICAgICAgICAKICAgICAgICBpZiBzaG93Y29udGV4dDoKICAgICAgICAgICAgI2NvbnRleHRNZW51ID0gW10KICAgICAgICAgICAgaWYgc2hvd2NvbnRleHQgPT0gJ2Zhdic6CiAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgKCdSZW1vdmUgZnJvbSBGaXJlVFYgRmF2b3JpdGVzJywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT02Jm5hbWU9JXMpJwogICAgICAgICAgICAgICAgICAgICAlKHN5cy5hcmd2WzBdLCB1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSkpCiAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgZWxpZiBub3QgbmFtZSBpbiBGQVY6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZmF2X3BhcmFtcyA9ICgKICAgICAgICAgICAgICAgICAgICAgICAgJyVzP21vZGU9NSZuYW1lPSVzJnVybD0lcyZpY29uaW1hZ2U9JXMmZmFuYXJ0PSVzJmZhdl9tb2RlPTAnCiAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpLCB1cmxsaWIucXVvdGVfcGx1cyhmYW5hcnQpKQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgZmF2X3BhcmFtcyA9ICgKICAgICAgICAgICAgICAgICAgICAgICAgJyVzP21vZGU9NSZuYW1lPSVzJnVybD0lcyZpY29uaW1hZ2U9JXMmZmFuYXJ0PSVzJmZhdl9tb2RlPTAnCiAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKG5hbWUpLCB1cmxsaWIucXVvdGVfcGx1cyh1cmwpLCB1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UuZW5jb2RlKCJ1dGYtOCIpKSwgdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0LmVuY29kZSgidXRmLTgiKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGlmIHBsYXlsaXN0OgogICAgICAgICAgICAgICAgICAgIGZhdl9wYXJhbXMgKz0gJ3BsYXlsaXN0PScrdXJsbGliLnF1b3RlX3BsdXMoc3RyKHBsYXlsaXN0KS5yZXBsYWNlKCcsJywnfHwnKSkKICAgICAgICAgICAgICAgIGlmIHJlZ2V4czoKICAgICAgICAgICAgICAgICAgICBmYXZfcGFyYW1zICs9ICImcmVnZXhzPSIrcmVnZXhzCiAgICAgICAgICAgICAgICBjb250ZXh0TWVudS5hcHBlbmQoKCdBZGQgdG8gRmlyZVRWIEZhdm9yaXRlcycsJ1hCTUMuUnVuUGx1Z2luKCVzKScgJWZhdl9wYXJhbXMpKQogICAgICAgICAgICBsaXouYWRkQ29udGV4dE1lbnVJdGVtcyhjb250ZXh0TWVudSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG5vdCBwbGF5bGlzdCBpcyBOb25lOgogICAgICAgICAgICAgICAgaWYgYWRkb24uZ2V0U2V0dGluZygnYWRkX3BsYXlsaXN0JykgPT0gImZhbHNlIjoKICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdF9uYW1lID0gbmFtZS5zcGxpdCgnKSAnKVsxXQogICAgICAgICAgICAgICAgICAgIGNvbnRleHRNZW51XyA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgKCdQbGF5ICcrcGxheWxpc3RfbmFtZSsnIFBsYXlMaXN0JywnWEJNQy5SdW5QbHVnaW4oJXM/bW9kZT0xMyZuYW1lPSVzJnBsYXlsaXN0PSVzKScKICAgICAgICAgICAgICAgICAgICAgICAgICUoc3lzLmFyZ3ZbMF0sIHVybGxpYi5xdW90ZV9wbHVzKHBsYXlsaXN0X25hbWUpLCB1cmxsaWIucXVvdGVfcGx1cyhzdHIocGxheWxpc3QpLnJlcGxhY2UoJywnLCd8fCcpKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgbGl6LmFkZENvbnRleHRNZW51SXRlbXMoY29udGV4dE1lbnVfKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICNwcmludCAnYWRkaW5nJyxuYW1lCiAgICAgICAgCiAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeix0b3RhbEl0ZW1zPXRvdGFsLGlzRm9sZGVyPWlzRm9sZGVyKQoKICAgICAgICAjcHJpbnQgJ2FkZGVkJyxuYW1lCiAgICAgICAgcmV0dXJuIG9rCgpkZWYgcGxheXNldHJlc29sdmVkKHVybCxuYW1lLGljb25pbWFnZSxzZXRyZXNvbHZlZD1UcnVlLHJlZz1Ob25lKToKICAgICNwcmludCAncGxheXNldHJlc29sdmVkJyx1cmwsbmFtZSxzZXRyZXNvbHZlZAogICAgcHJpbnQgJ3BsYXlzZXRyZXNvbHZlZCcKICAgIGlmIHVybD09Tm9uZTogCiAgICAgICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQogICAgICAgIHJldHVybgoKICAgIGlmICcmbW9kZT0yMicgaW4gdXJsOgogICAgICAgIHNldHJlc29sdmVkPUZhbHNlCiAgICAgICAgdXJsPXVybC5yZXBsYWNlKCcmbW9kZT0yMicsJycpCiAgICAgICAgdT1zeXMuYXJndlswXSsiPyIKICAgICAgICB1ICs9ICJ1cmw9Iit1cmxsaWIucXVvdGVfcGx1cyh1cmwpKyImbmFtZT0iK3VybGxpYi5xdW90ZShuYW1lKSsiJm1vZGU9MjIiCiAgICAgICAgdXJsID0gdQoKICAgIGlmIHNldHJlc29sdmVkOgogICAgICAgIHNldHJlcz1UcnVlCiAgICAgICAgaWYgJyQkTFNEaXJlY3QkJCcgaW4gdXJsOgogICAgICAgICAgICB1cmw9dXJsLnJlcGxhY2UoJyQkTFNEaXJlY3QkJCcsJycpCiAgICAgICAgICAgIHNldHJlcz1GYWxzZQogICAgICAgIGlmIHJlZyBhbmQgJ25vdHBsYXlhYmxlJyBpbiByZWc6CiAgICAgICAgICAgIHNldHJlcz1GYWxzZQoKICAgICAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT1pY29uaW1hZ2UsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKICAgICAgICBsaXouc2V0SW5mbyh0eXBlPSdWaWRlbycsIGluZm9MYWJlbHM9eydUaXRsZSc6bmFtZSwnbWVkaWF0eXBlJzondmlkZW8nfSkKICAgICAgICBsaXouc2V0UHJvcGVydHkoIklzUGxheWFibGUiLCJ0cnVlIikKICAgICAgICBpZiAnJm1vZGU9MTknIGluIHVybDoKICAgICAgICAgICAgdXJsPXVybHNvbHZlcih1cmwucmVwbGFjZSgnJm1vZGU9MTknLCcnKS5yZXBsYWNlKCc7JywnJykpCiAgICAgICAgZWxpZiAnJm1vZGU9MjAnIGluIHVybDoKICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCcmbW9kZT0yMCcsJycpCiAgICAgICAgICAgIGlmICd8JyBpbiB1cmw6CiAgICAgICAgICAgICAgICB1cmwsc3RyaGRyID0gdXJsLnNwbGl0KCd8JykKICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgnaW5wdXRzdHJlYW0uYWRhcHRpdmUuc3RyZWFtX2hlYWRlcnMnLCBzdHJoZHIpCgkJCQkKICAgICAgICAgICAgaWYgJy5tM3U4JyBpbiB1cmw6CiAgICAgICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ2lucHV0c3RyZWFtYWRkb24nLCAnaW5wdXRzdHJlYW0uYWRhcHRpdmUnKQogICAgICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCdpbnB1dHN0cmVhbS5hZGFwdGl2ZS5tYW5pZmVzdF90eXBlJywgJ2hscycpCiAgICAgICAgICAgICAgICBsaXouc2V0TWltZVR5cGUoJ2FwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVnc3RyZWFtX3VybCcpCiAgICAgICAgICAgICAgICBsaXouc2V0Q29udGVudExvb2t1cChGYWxzZSkKCiAgICAgICAgICAgIAogICAgICAgICAgICBlbGlmICcubXBkJyBpbiB1cmw6CiAgICAgICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ2lucHV0c3RyZWFtYWRkb24nLCAnaW5wdXRzdHJlYW0uYWRhcHRpdmUnKQogICAgICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCdpbnB1dHN0cmVhbS5hZGFwdGl2ZS5tYW5pZmVzdF90eXBlJywgJ21wZCcpCiAgICAgICAgICAgICAgICBsaXouc2V0TWltZVR5cGUoJ2FwcGxpY2F0aW9uL2Rhc2greG1sJykKICAgICAgICAgICAgICAgIGxpei5zZXRDb250ZW50TG9va3VwKEZhbHNlKQogICAgICAgICAgICAKICAgICAgICAgICAgZWxpZiAnLmlzbScgaW4gdXJsOgogICAgICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCdpbnB1dHN0cmVhbWFkZG9uJywgJ2lucHV0c3RyZWFtLmFkYXB0aXZlJykKICAgICAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgnaW5wdXRzdHJlYW0uYWRhcHRpdmUubWFuaWZlc3RfdHlwZScsICdpc20nKQogICAgICAgICAgICAgICAgbGl6LnNldE1pbWVUeXBlKCdhcHBsaWNhdGlvbi92bmQubXMtc3N0cit4bWwnKQogICAgICAgICAgICAgICAgbGl6LnNldENvbnRlbnRMb29rdXAoRmFsc2UpCiAgICAgICAgCiAgICAgICAgIyBlbGlmICcmbW9kZT0yMicgaW4gdXJsOgogICAgICAgICMgICAgIHByaW50ICJzbHByb3h5IgogICAgICAgICMgICAgIHVybD11cmwucmVwbGFjZSgnJm1vZGU9MjInLCcnKQogICAgICAgICMgICAgIHRyeToKICAgICAgICAjICAgICAgICAgZnJvbSBkc3AgaW1wb3J0IHN0cmVhbWxpbmtfcHJveHkKICAgICAgICAjICAgICAgICAgc2xQcm94eSA9IHN0cmVhbWxpbmtfcHJveHkuU0xQcm94eV9IZWxwZXIoKQogICAgICAgICMgICAgICAgICB0cnk6CiAgICAgICAgIyAgICAgICAgICAgICBxID0gIHJlLmZpbmRhbGwocidcJFwkUVVBTElUWT0oW15cJFwkXSspXCRcJCcsIHVybClbMF0KICAgICAgICAjICAgICAgICAgZXhjZXB0OgogICAgICAgICMgICAgICAgICAgICAgcSA9ICdiZXN0JwogICAgICAgICMgICAgICAgICB1cmwgPSByZS5zdWIocidcJFwkUVVBTElUWT0uKj9cJFwkJywgJycsIHVybCkKICAgICAgICAjICAgICAgICAgdXJsID0gdXJsbGliLnF1b3RlKHVybCkrJyZhbXA7cT0lcyclcQogICAgICAgICMgICAgICAgICBsaXouc2V0UGF0aCh1cmwpCiAgICAgICAgIyAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsImZhbHNlIikKICAgICAgICAjICAgICAgICAgc2xQcm94eS5wbGF5U0xpbmsodXJsLCBsaXopCiAgICAgICAgIyAgICAgICAgIHJldHVybgogICAgICAgICMgICAgZXhjZXB0OgogICAgICAgICMgICAgICAgIHBhc3MKCiAgICAgICAgbGl6LnNldFBhdGgodXJsKQogICAgICAgIGlmIG5vdCBzZXRyZXM6CiAgICAgICAgICAgIHhibWMuUGxheWVyKCkucGxheSh1cmwpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgeGJtY3BsdWdpbi5zZXRSZXNvbHZlZFVybChpbnQoc3lzLmFyZ3ZbMV0pLCBUcnVlLCBsaXopCiAgICAgICAgICAgCiAgICBlbHNlOgogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oJ1hCTUMuUnVuUGx1Z2luKCcrdXJsKycpJykKCiMjIFRoYW5rcyB0byBkYXNjaGFja2EsIGFuIGVwZyBzY3JhcGVyIGZvciBodHRwOi8vaS50ZWxlYm95LmNoL3Byb2dyYW1tL3N0YXRpb25fc2VsZWN0LnBocAojIyAgaHR0cDovL2ZvcnVtLnhibWMub3JnL3Bvc3QucGhwP3A9OTM2MjI4JnBvc3Rjb3VudD0xMDc2CmRlZiBnZXRlcGcobGluayk6CiAgICAgICAgdXJsPXVybGxpYi51cmxvcGVuKGxpbmspCiAgICAgICAgc291cmNlPXVybC5yZWFkKCkKICAgICAgICB1cmwuY2xvc2UoKQogICAgICAgIHNvdXJjZTIgPSBzb3VyY2Uuc3BsaXQoIkpldHp0IikKICAgICAgICBzb3VyY2UzID0gc291cmNlMlsxXS5zcGxpdCgncHJvZ3JhbW0vZGV0YWlsLnBocD9jb25zdF9pZD0nKQogICAgICAgIHNvdXJjZXVocnplaXQgPSBzb3VyY2UzWzFdLnNwbGl0KCc8YnIgLz48YSBocmVmPSIvJykKICAgICAgICBub3d0aW1lID0gc291cmNldWhyemVpdFswXVs0MDpsZW4oc291cmNldWhyemVpdFswXSldCiAgICAgICAgc291cmNldGl0bGUgPSBzb3VyY2UzWzJdLnNwbGl0KCI8L2E+PC9wPjwvZGl2PiIpCiAgICAgICAgbm93dGl0bGUgPSBzb3VyY2V0aXRsZVswXVsxNzpsZW4oc291cmNldGl0bGVbMF0pXQogICAgICAgIG5vd3RpdGxlID0gbm93dGl0bGUuZW5jb2RlKCd1dGYtOCcpCiAgICAgICAgcmV0dXJuICIgIC0gIitub3d0aXRsZSsiIC0gIitub3d0aW1lCgpkZWYgZ2V0X2VwZyh1cmwsIHJlZ2V4KToKICAgICAgICBkYXRhID0gbWFrZVJlcXVlc3QodXJsKQogICAgICAgIHRyeToKICAgICAgICAgICAgaXRlbSA9IHJlLmZpbmRhbGwocmVnZXgsIGRhdGEpWzBdCiAgICAgICAgICAgIHJldHVybiBpdGVtCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBhZGRvbl9sb2coJ3JlZ2V4IGZhaWxlZCcpCiAgICAgICAgICAgIGFkZG9uX2xvZyhyZWdleCkKICAgICAgICAgICAgcmV0dXJuCgkJCQpkZWYgbWFrZV9yZXF1ZXN0KHVybCk6CiMjRVNUQSBGVU5DSU9OIGxlZSBsYXMgdXJsIGRlY2xhcmFkYXMgZG9uZGUgZXN0YW4gbG9zIHZpZGVvcy4gfHwKCXRyeToKCQlyZXEgPSB1cmxsaWIyLlJlcXVlc3QodXJsKQoJCXJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMzsgV09XNjQ7IHJ2OjU1LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNTUuMCcpCgkJcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQkgIAoJCWxpbmsgPSByZXNwb25zZS5yZWFkKCkKCQlyZXNwb25zZS5jbG9zZSgpICAKCQlyZXR1cm4gbGluawoJZXhjZXB0IHVybGxpYjIuVVJMRXJyb3IsIGU6CgkJcHJpbnQgJ1dlIGZhaWxlZCB0byBvcGVuICIlcyIuJyAlIHVybAoJCWlmIGhhc2F0dHIoZSwgJ2NvZGUnKToKCQkJcHJpbnQgJ1dlIGZhaWxlZCB3aXRoIGVycm9yIGNvZGUgLSAlcy4nICUgZS5jb2RlCQoJCWlmIGhhc2F0dHIoZSwgJ3JlYXNvbicpOgoJCQlwcmludCAnV2UgZmFpbGVkIHRvIHJlYWNoIGEgc2VydmVyLicKCQkJcHJpbnQgJ1JlYXNvbjogJywgZS5yZWFzb24KCQkJCmRlZiBPUEVOX1VSTCh1cmwpOgogICAgICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdCh1cmwpCiAgICAgICAgcmVxLmFkZF9oZWFkZXIoJ1VzZXItQWdlbnQnLCAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzQ1LjAuMjQ1NC44NSBTYWZhcmkvNTM3LjM2JykKICAgICAgICByZXEuYWRkX2hlYWRlcignUmVmZXJlcicsICclcycldXJsKQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdDb25uZWN0aW9uJywgJ2tlZXAtYWxpdmUnKQogICAgICAgIHJlc3BvbnNlID0gdXJsbGliMi51cmxvcGVuKHJlcSkKICAgICAgICBsaW5rPXJlc3BvbnNlLnJlYWQoKQogICAgICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgICAgICByZXR1cm4gbGluawoKIyNub3QgYSBnZW5lcmljIGltcGxlbWVuYXRpb24gYXMgaXQgbmVlZHMgdG8gY29udmVydCAgICAgICAgICAgIApkZWYgZDJ4KGQsIHJvb3Q9InJvb3QiLG5lc3RlZD0wKToKCiAgICBvcCA9IGxhbWJkYSB0YWc6ICc8JyArIHRhZyArICc+JwogICAgY2wgPSBsYW1iZGEgdGFnOiAnPC8nICsgdGFnICsgJz5cbicKCiAgICBtbCA9IGxhbWJkYSB2LHhtbDogeG1sICsgb3Aoa2V5KSArIHN0cih2KSArIGNsKGtleSkKICAgIHhtbCA9IG9wKHJvb3QpICsgJ1xuJyBpZiByb290IGVsc2UgIiIKCiAgICBmb3Iga2V5LHZsIGluIGQuaXRlcml0ZW1zKCk6CiAgICAgICAgdnR5cGUgPSB0eXBlKHZsKQogICAgICAgIGlmIG5lc3RlZD09MDoga2V5PSdyZWdleCcgI2VuZm9yY2luZyBhbGwgdG9wIGxldmVsIHRhZ3MgdG8gYmUgbmFtZWQgYXMgcmVnZXgKICAgICAgICBpZiB2dHlwZSBpcyBsaXN0OiAKICAgICAgICAgICAgZm9yIHYgaW4gdmw6CiAgICAgICAgICAgICAgICB2PWVzY2FwZSh2KQogICAgICAgICAgICAgICAgeG1sID0gbWwodix4bWwpICAgICAgICAgCiAgICAgICAgCiAgICAgICAgaWYgdnR5cGUgaXMgZGljdDogCiAgICAgICAgICAgIHhtbCA9IG1sKCdcbicgKyBkMngodmwsTm9uZSxuZXN0ZWQrMSkseG1sKSAgICAgICAgIAogICAgICAgIGlmIHZ0eXBlIGlzIG5vdCBsaXN0IGFuZCB2dHlwZSBpcyBub3QgZGljdDogCiAgICAgICAgICAgIGlmIG5vdCB2bCBpcyBOb25lOiB2bD1lc2NhcGUodmwpCiAgICAgICAgICAgICNwcmludCByZXByKHZsKQogICAgICAgICAgICBpZiB2bCBpcyBOb25lOgogICAgICAgICAgICAgICAgeG1sID0gbWwodmwseG1sKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgI3htbCA9IG1sKGVzY2FwZSh2bC5lbmNvZGUoInV0Zi04IikpLHhtbCkKICAgICAgICAgICAgICAgIHhtbCA9IG1sKHZsLmVuY29kZSgidXRmLTgiKSx4bWwpCgogICAgeG1sICs9IGNsKHJvb3QpIGlmIHJvb3QgZWxzZSAiIgoKICAgIHJldHVybiB4bWwKCnhibWNwbHVnaW4uc2V0Q29udGVudChpbnQoc3lzLmFyZ3ZbMV0pLCAnbW92aWVzJykKCnRyeToKICAgIHhibWNwbHVnaW4uYWRkU29ydE1ldGhvZChpbnQoc3lzLmFyZ3ZbMV0pLCB4Ym1jcGx1Z2luLlNPUlRfTUVUSE9EX1VOU09SVEVEKQpleGNlcHQ6CiAgICBwYXNzCnRyeToKICAgIHhibWNwbHVnaW4uYWRkU29ydE1ldGhvZChpbnQoc3lzLmFyZ3ZbMV0pLCB4Ym1jcGx1Z2luLlNPUlRfTUVUSE9EX0xBQkVMKQpleGNlcHQ6CiAgICBwYXNzCnRyeToKICAgIHhibWNwbHVnaW4uYWRkU29ydE1ldGhvZChpbnQoc3lzLmFyZ3ZbMV0pLCB4Ym1jcGx1Z2luLlNPUlRfTUVUSE9EX0RBVEUpCmV4Y2VwdDoKICAgIHBhc3MKdHJ5OgogICAgeGJtY3BsdWdpbi5hZGRTb3J0TWV0aG9kKGludChzeXMuYXJndlsxXSksIHhibWNwbHVnaW4uU09SVF9NRVRIT0RfR0VOUkUpCmV4Y2VwdDoKICAgIHBhc3MKCnBhcmFtcz1nZXRfcGFyYW1zKCkKI3ByaW50ICdwYXJhbXMgJywgcmVwcihwYXJhbXMpCgp1cmw9Tm9uZQpuYW1lPU5vbmUKbW9kZT1Ob25lCnBsYXlsaXN0PU5vbmUKaWNvbmltYWdlPU5vbmUKZmFuYXJ0PUZBTkFSVApwbGF5bGlzdD1Ob25lCmZhdl9tb2RlPU5vbmUKcmVnZXhzPU5vbmUKCnRyeToKICAgIHVybD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidXJsIl0pLmRlY29kZSgndXRmLTgnKQpleGNlcHQ6CiAgICBwYXNzCnRyeToKICAgIG5hbWU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbIm5hbWUiXSkKZXhjZXB0OgogICAgcGFzcwp0cnk6CiAgICBpY29uaW1hZ2U9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImljb25pbWFnZSJdKQpleGNlcHQ6CiAgICBwYXNzCnRyeToKICAgIGZhbmFydD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siZmFuYXJ0Il0pCmV4Y2VwdDoKICAgIHBhc3MKdHJ5OgogICAgbW9kZT1pbnQocGFyYW1zWyJtb2RlIl0pCmV4Y2VwdDoKICAgIHBhc3MKdHJ5OgogICAgcGxheWxpc3Q9ZXZhbCh1cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sicGxheWxpc3QiXSkucmVwbGFjZSgnfHwnLCcsJykpCmV4Y2VwdDoKICAgIHBhc3MKdHJ5OgogICAgZmF2X21vZGU9aW50KHBhcmFtc1siZmF2X21vZGUiXSkKZXhjZXB0OgogICAgcGFzcwp0cnk6CiAgICByZWdleHM9cGFyYW1zWyJyZWdleHMiXQpleGNlcHQ6CiAgICBwYXNzCnBsYXlpdGVtPScnCnRyeToKICAgIHBsYXlpdGVtPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJwbGF5aXRlbSJdKQpleGNlcHQ6CiAgICBwYXNzCiAgIAphZGRvbl9sb2coIk1vZGU6ICIrc3RyKG1vZGUpKQoKCgppZiBub3QgdXJsIGlzIE5vbmU6CiAgICBhZGRvbl9sb2coIlVSTDogIitzdHIodXJsLmVuY29kZSgndXRmLTgnKSkpCmFkZG9uX2xvZygiTmFtZTogIitzdHIobmFtZSkpCgppZiBub3QgcGxheWl0ZW0gPT0nJzoKICAgIHM9Z2V0U291cCgnJyxkYXRhPXBsYXlpdGVtKQogICAgbmFtZSx1cmwscmVnZXhzPWdldEl0ZW1zKHMsTm9uZSxkb250TGluaz1UcnVlKQogICAgbW9kZT0xMTcKCmlmIG1vZGU9PU5vbmU6CiAgICBhZGRvbl9sb2coImdldFNvdXJjZXMiKQogICAgZ2V0U291cmNlcygpCgkKCQogICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQoKCmVsaWYgbW9kZT09MToKICAgIGFkZG9uX2xvZygiZ2V0RGF0YSIpCiAgICBkYXRhPU5vbmUKICAgIAogICAgaWYgcmVnZXhzIGFuZCBsZW4ocmVnZXhzKT4wOgogICAgICAgIGRhdGEsc2V0cmVzb2x2ZWQ9Z2V0UmVnZXhQYXJzZWQocmVnZXhzLCB1cmwpCiAgICAgICAgI3ByaW50IGRhdGEKICAgICAgICAjdXJsPScnCiAgICAgICAgaWYgZGF0YS5zdGFydHN3aXRoKCdodHRwJykgb3IgZGF0YS5zdGFydHN3aXRoKCdzbWInKSBvciBkYXRhLnN0YXJ0c3dpdGgoJ25mcycpIG9yIGRhdGEuc3RhcnRzd2l0aCgnLycpOgogICAgICAgICAgICB1cmw9ZGF0YQogICAgICAgICAgICBkYXRhPU5vbmUKICAgICAgICAjY3JlYXRlIHhtbCBoZXJlCiAgICAKICAgIGdldERhdGEodXJsLGZhbmFydCxkYXRhKQogICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQoKZWxpZiBtb2RlPT0yOgogICAgYWRkb25fbG9nKCJnZXRDaGFubmVsSXRlbXMiKQogICAgZ2V0Q2hhbm5lbEl0ZW1zKG5hbWUsdXJsLGZhbmFydCkKICAgIHhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkKCmVsaWYgbW9kZT09MzoKICAgIGFkZG9uX2xvZygiZ2V0U3ViQ2hhbm5lbEl0ZW1zIikKICAgIGdldFN1YkNoYW5uZWxJdGVtcyhuYW1lLHVybCxmYW5hcnQpCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCgplbGlmIG1vZGU9PTQ6CiAgICBhZGRvbl9sb2coImdldEZhdm9yaXRlcyIpCiAgICBnZXRGYXZvcml0ZXMoKQogICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQoKZWxpZiBtb2RlPT01OgogICAgYWRkb25fbG9nKCJhZGRGYXZvcml0ZSIpCiAgICB0cnk6CiAgICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoJ1xcICcpWzFdCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwogICAgdHJ5OgogICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCcgIC0gJylbMF0KICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCiAgICBhZGRGYXZvcml0ZShuYW1lLHVybCxpY29uaW1hZ2UsZmFuYXJ0LGZhdl9tb2RlKQoKZWxpZiBtb2RlPT02OgogICAgYWRkb25fbG9nKCJybUZhdm9yaXRlIikKICAgIHRyeToKICAgICAgICBuYW1lID0gbmFtZS5zcGxpdCgnXFwgJylbMV0KICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCiAgICB0cnk6CiAgICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoJyAgLSAnKVswXQogICAgZXhjZXB0OgogICAgICAgIHBhc3MKICAgIHJtRmF2b3JpdGUobmFtZSkKCmVsaWYgbW9kZT09NzoKICAgIGFkZG9uX2xvZygiYWRkU291cmNlIikKICAgIGFkZFNvdXJjZSh1cmwpCgplbGlmIG1vZGU9PTg6CiAgICBhZGRvbl9sb2coInJtU291cmNlIikKICAgIHJtU291cmNlKG5hbWUpCgplbGlmIG1vZGU9PTk6CiAgICBhZGRvbl9sb2coImRvd25sb2FkX2ZpbGUiKQogICAgZG93bmxvYWRfZmlsZShuYW1lLCB1cmwpCgplbGlmIG1vZGU9PTEwOgogICAgYWRkb25fbG9nKCJnZXRDb21tdW5pdHlTb3VyY2VzIikKICAgIGdldENvbW11bml0eVNvdXJjZXMoKQoKZWxpZiBtb2RlPT0xMToKICAgIGFkZG9uX2xvZygiYWRkU291cmNlIikKICAgIGFkZFNvdXJjZSh1cmwpCgplbGlmIG1vZGU9PTEyOgogICAgYWRkb25fbG9nKCJzZXRSZXNvbHZlZFVybCIpCiAgICBpZiBub3QgdXJsLnN0YXJ0c3dpdGgoInBsdWdpbjovL3BsdWdpbiIpIG9yIG5vdCBhbnkoeCBpbiB1cmwgZm9yIHggaW4gZ19pZ25vcmVTZXRSZXNvbHZlZCk6I25vdCB1cmwuc3RhcnRzd2l0aCgicGx1Z2luOi8vcGx1Z2luLnZpZGVvLmY0bVRlc3RlciIpIDoKICAgICAgICBzZXRyZXM9VHJ1ZQogICAgICAgIGlmICckJExTRGlyZWN0JCQnIGluIHVybDoKICAgICAgICAgICAgdXJsPXVybC5yZXBsYWNlKCckJExTRGlyZWN0JCQnLCcnKQogICAgICAgICAgICBzZXRyZXM9RmFsc2UKICAgICAgICBpZiAnJFBMQVlFUlBST1hZJD0nIGluIHVybDoKICAgICAgICAgICAgdXJsLHByb3h5PXVybC5zcGxpdCgnJFBMQVlFUlBST1hZJD0nKQogICAgICAgICAgICBwcmludCAncHJveHknLHByb3h5CiAgICAgICAgICAgICNKYWlyb3ggbW9kIGZvciBwcm94eSBhdXRoCiAgICAgICAgICAgIHByb3h5dXNlciA9IE5vbmUKICAgICAgICAgICAgcHJveHlwYXNzID0gTm9uZQogICAgICAgICAgICBpZiBsZW4ocHJveHkpID4gMCBhbmQgJ0AnIGluIHByb3h5OgogICAgICAgICAgICAgICAgcHJveHkgPSBwcm94eS5zcGxpdCgnOicpCiAgICAgICAgICAgICAgICBwcm94eXVzZXIgPSBwcm94eVswXQogICAgICAgICAgICAgICAgcHJveHlwYXNzID0gcHJveHlbMV0uc3BsaXQoJ0AnKVswXQogICAgICAgICAgICAgICAgcHJveHlpcCA9IHByb3h5WzFdLnNwbGl0KCdAJylbMV0KICAgICAgICAgICAgICAgIHBvcnQgPSBwcm94eVsyXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJveHlpcCxwb3J0PXByb3h5LnNwbGl0KCc6JykKICAgICAgICAgICAgcGxheW1lZGlhd2l0aHByb3h5KHVybCxuYW1lLGljb25pbWFnZSxwcm94eWlwLHBvcnQsIHByb3h5dXNlcixwcm94eXBhc3MpICNqYWlyb3gKICAgICAgICAgICAgCiAgICAgICAgaXRlbSA9IHhibWNndWkuTGlzdEl0ZW0ocGF0aD11cmwpICAgICAgICAKICAgICAgICBpZiBub3Qgc2V0cmVzOgogICAgICAgICAgICB4Ym1jLlBsYXllcigpLnBsYXkodXJsKQogICAgICAgIGVsc2U6IAogICAgICAgICAgICB4Ym1jcGx1Z2luLnNldFJlc29sdmVkVXJsKGludChzeXMuYXJndlsxXSksIFRydWUsIGl0ZW0pCiAgICBlbHNlOgojICAgICAgICBwcmludCAnTm90IHNldHRpbmcgc2V0UmVzb2x2ZWRVcmwnCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbignWEJNQy5SdW5QbHVnaW4oJyt1cmwrJyknKQoKZWxpZiBtb2RlPT0xMzoKICAgIGFkZG9uX2xvZygicGxheV9wbGF5bGlzdCIpCiAgICBwbGF5X3BsYXlsaXN0KG5hbWUsIHBsYXlsaXN0KQoKZWxpZiBtb2RlPT0xNDoKICAgIGFkZG9uX2xvZygiZ2V0X3htbF9kYXRhYmFzZSIpCiAgICBnZXRfeG1sX2RhdGFiYXNlKHVybCkKICAgIHhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkKCmVsaWYgbW9kZT09MTU6CiAgICBhZGRvbl9sb2coImJyb3dzZV94bWxfZGF0YWJhc2UiKQogICAgZ2V0X3htbF9kYXRhYmFzZSh1cmwsIFRydWUpCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCgplbGlmIG1vZGU9PTE2OgogICAgYWRkb25fbG9nKCJicm93c2VfY29tbXVuaXR5IikKICAgIGdldENvbW11bml0eVNvdXJjZXModXJsLGJyb3dzZT1UcnVlKQogICAgeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQoKZWxpZiBtb2RlPT0xNyBvciBtb2RlPT0xMTc6CiAgICBhZGRvbl9sb2coImdldFJlZ2V4UGFyc2VkIikKICAgICNwcmludCAnZ2V0UmVnZXhQYXJzZWQnCiAgICBkYXRhPU5vbmUKICAgIGlmIHJlZ2V4cyBhbmQgJ2xpc3RyZXBlYXQnIGluIHVybGxpYi51bnF1b3RlX3BsdXMocmVnZXhzKToKICAgICAgICBsaXN0cmVwZWF0LHJldCxtLHJlZ2V4cywgY29va2llSmFyID1nZXRSZWdleFBhcnNlZChyZWdleHMsIHVybCkKICAgICAgICAjcHJpbnQgbGlzdHJlcGVhdCxyZXQsbSxyZWdleHMKICAgICAgICBkPScnCiMgICAgICAgIHByaW50ICdtIGlzJyAsIG0KIyAgICAgICAgcHJpbnQgJ3JlZ2V4cycscmVnZXhzCiAgICAgICAgcmVnZXhuYW1lPW1bJ25hbWUnXQogICAgICAgIGV4aXN0aW5nX2xpc3Q9cmVnZXhzLnBvcChyZWdleG5hbWUpCiAjICAgICAgIHByaW50ICdmaW5hbCByZWdleHMnLHJlZ2V4cyxyZWdleG5hbWUKICAgICAgICB1cmw9JycKICAgICAgICBpbXBvcnQgY29weQogICAgICAgIGxuPScnCiAgICAgICAgcm51bWJlcj0wCiAgICAgICAgZm9yIG9iaiBpbiByZXQ6CiAgICAgICAgICAgICNwcmludCAnb2JqJyxvYmoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcm51bWJlcis9MQogICAgICAgICAgICAgICAgbmV3Y29weT1jb3B5LmRlZXBjb3B5KHJlZ2V4cykKICAgICMgICAgICAgICAgICBwcmludCAnbmV3Y29weScsbmV3Y29weSwgbGVuKG5ld2NvcHkpCiAgICAgICAgICAgICAgICBsaXN0cmVwZWF0VD1saXN0cmVwZWF0CiAgICAgICAgICAgICAgICBpPTAKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihvYmopKToKICAgICMgICAgICAgICAgICAgICAgcHJpbnQgJ2kgaXMgJyxpLCBsZW4ob2JqKSwgbGVuKG5ld2NvcHkpCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKG5ld2NvcHkpPjA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGVfa2V5TywgdGhlX3ZhbHVlTyBpbiBuZXdjb3B5Lml0ZXJpdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhlX3ZhbHVlTyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlX2tleSwgdGhlX3ZhbHVlIGluIHRoZV92YWx1ZU8uaXRlcml0ZW1zKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZV92YWx1ZSBpcyBub3QgTm9uZTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICAna2V5IGFuZCB2YWwnLHRoZV9rZXksIHRoZV92YWx1ZQogICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdhYScKICAgICAgICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXScKICAgICAgICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCByZXByKG9ialtpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHR5cGUodGhlX3ZhbHVlKSBpcyBkaWN0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGVfa2V5bCwgdGhlX3ZhbHVlbCBpbiB0aGVfdmFsdWUuaXRlcml0ZW1zKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZV92YWx1ZWwgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9Tm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosdHVwbGUpOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPSBvYmpbaV0uZGVjb2RlKCd1dGYtOCcpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0gb2JqW2ldIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0gb2JqLmRlY29kZSgndXRmLTgnKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD0gb2JqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdbJyArIHJlZ2V4bmFtZSsnLnBhcmFtJytzdHIoaSsxKSArICddW0RFXScgaW4gdGhlX3ZhbHVlbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVfdmFsdWVsPXRoZV92YWx1ZWwucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXVtERV0nLCB1bmVzY2FwZSh2YWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlX3ZhbHVlW3RoZV9rZXlsXT10aGVfdmFsdWVsLnJlcGxhY2UoJ1snICsgcmVnZXhuYW1lKycucGFyYW0nK3N0cihpKzEpICsgJ10nLCB2YWwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ2ZpcnN0IHNlYycsdGhlX3ZhbHVlW3RoZV9rZXlsXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1Ob25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosdHVwbGUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPW9ialtpXS5kZWNvZGUoJ3V0Zi04JykgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1vYmpbaV0gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPSBvYmouZGVjb2RlKCd1dGYtOCcpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9IG9iagogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdbJyArIHJlZ2V4bmFtZSsnLnBhcmFtJytzdHIoaSsxKSArICddW0RFXScgaW4gdGhlX3ZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ2ZvdW5kIERFJyx0aGVfdmFsdWUucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXVtERV0nLCB1bmVzY2FwZSh2YWwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVfdmFsdWU9dGhlX3ZhbHVlLnJlcGxhY2UoJ1snICsgcmVnZXhuYW1lKycucGFyYW0nK3N0cihpKzEpICsgJ11bREVdJywgdW5lc2NhcGUodmFsKSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlX3ZhbHVlT1t0aGVfa2V5XT10aGVfdmFsdWUucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXScsIHZhbCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgJ3NlY29uZCBzZWMgdmFsJyx0aGVfdmFsdWVPW3RoZV9rZXldCgogICAgICAgICAgICAgICAgICAgIHZhbD1Ob25lCiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosdHVwbGUpOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9b2JqW2ldLmRlY29kZSgndXRmLTgnKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw9b2JqW2ldCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsPW9iai5kZWNvZGUoJ3V0Zi04JykKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbD1vYmoKICAgICAgICAgICAgICAgICAgICBpZiAnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKGkrMSkgKyAnXVtERV0nIGluIGxpc3RyZXBlYXRUOgogICAgICAgICAgICAgICAgICAgICAgICBsaXN0cmVwZWF0VD1saXN0cmVwZWF0VC5yZXBsYWNlKCdbJyArIHJlZ2V4bmFtZSsnLnBhcmFtJytzdHIoaSsxKSArICddW0RFXScsdmFsKQogICAgICAgICAgICAgICAgICAgIGxpc3RyZXBlYXRUPWxpc3RyZXBlYXRULnJlcGxhY2UoJ1snICsgcmVnZXhuYW1lKycucGFyYW0nK3N0cihpKzEpICsgJ10nLGVzY2FwZSh2YWwpKQojICAgICAgICAgICAgICAgICAgICBwcmludCBsaXN0cmVwZWF0VAogICAgICAgICAgICAgICAgbGlzdHJlcGVhdFQ9bGlzdHJlcGVhdFQucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5wYXJhbScrc3RyKDApICsgJ10nLHN0cihybnVtYmVyKSkgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBpZiBjb29raWVKYXIgYW5kICdbJyArIHJlZ2V4bmFtZSsnLmNvb2tpZXNdJyBpbiBsaXN0cmVwZWF0VDoKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdHJlcGVhdFQ9bGlzdHJlcGVhdFQucmVwbGFjZSgnWycgKyByZWdleG5hbWUrJy5jb29raWVzXScsZ2V0Q29va2llc1N0cmluZyhjb29raWVKYXIpKSAKICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjbmV3Y29weSA9IHVybGxpYi5xdW90ZShyZXByKG5ld2NvcHkpKQogICAgIyAgICAgICAgICAgIHByaW50ICduZXcgcmVnZXggbGlzdCcsIHJlcHIobmV3Y29weSksIHJlcHIobGlzdHJlcGVhdFQpCiAgICAjICAgICAgICAgICAgYWRkTGluayhsaXN0bGlua1QsbGlzdHRpdGxlVC5lbmNvZGUoJ3V0Zi04JywgJ2lnbm9yZScpLGxpc3R0aHVtYm5haWxULCcnLCcnLCcnLCcnLFRydWUsTm9uZSxuZXdjb3B5LCBsZW4ocmV0KSkKICAgICAgICAgICAgICAgIHJlZ2V4X3htbD0nJwojICAgICAgICAgICAgICAgIHByaW50ICduZXdjb3B5JyxuZXdjb3B5CiAgICAgICAgICAgICAgICBpZiBsZW4obmV3Y29weSk+MDoKICAgICAgICAgICAgICAgICAgICByZWdleF94bWw9ZDJ4KG5ld2NvcHksJ2xzcHJvcm9vdCcpCiAgICAgICAgICAgICAgICAgICAgcmVnZXhfeG1sPXJlZ2V4X3htbC5zcGxpdCgnPGxzcHJvcm9vdD4nKVsxXS5zcGxpdCgnPC9sc3Byb3Jvb3QnKVswXQogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgI2xuKz0nXG48aXRlbT4lc1xuJXM8L2l0ZW0+JyUobGlzdHJlcGVhdFQuZW5jb2RlKCJ1dGYtOCIpLHJlZ2V4X3htbCkgICAKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBsbis9J1xuPGl0ZW0+JXNcbiVzPC9pdGVtPiclKGxpc3RyZXBlYXRULHJlZ2V4X3htbCkKICAgICAgICAgICAgICAgIGV4Y2VwdDogbG4rPSdcbjxpdGVtPiVzXG4lczwvaXRlbT4nJShsaXN0cmVwZWF0VC5lbmNvZGUoInV0Zi04IikscmVnZXhfeG1sKQogICAgICAgICAgICBleGNlcHQ6IHRyYWNlYmFjay5wcmludF9leGMoZmlsZT1zeXMuc3Rkb3V0KQojICAgICAgICAgICAgcHJpbnQgcmVwcihsbikKIyAgICAgICAgICAgIHByaW50IG5ld2NvcHkKICAgICAgICAgICAgICAgIAojICAgICAgICAgICAgbG4rPSc8L2l0ZW0+JwogICAgICAgIAogICAgICAgIGFkZG9uX2xvZyhyZXByKGxuKSkKICAgICAgICBnZXREYXRhKCcnLCcnLGxuKQogICAgICAgIHhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkKICAgIGVsc2U6CiAgICAgICAgdXJsLHNldHJlc29sdmVkID0gZ2V0UmVnZXhQYXJzZWQocmVnZXhzLCB1cmwpCiAgICAgICAgI3ByaW50ICdpbWhlcmUnLCByZXByKHVybCksc2V0cmVzb2x2ZWQsbmFtZQogICAgICAgICNwcmludCAnaW1oZXJlJwogICAgICAgIGlmIG5vdCAocmVnZXhzIGFuZCAnbm90cGxheWFibGUnIGluIHJlZ2V4cyBhbmQgbm90IHVybCk6ICAgICAgICAKICAgICAgICAgICAgaWYgdXJsOgogICAgICAgICAgICAgICAgaWYgJyRQTEFZRVJQUk9YWSQ9JyBpbiB1cmw6CiAgICAgICAgICAgICAgICAgICAgdXJsLHByb3h5PXVybC5zcGxpdCgnJFBMQVlFUlBST1hZJD0nKQogICAgICAgICAgICAgICAgICAgIHByaW50ICdwcm94eScscHJveHkKICAgICAgICAgICAgICAgICAgICAjSmFpcm94IG1vZCBmb3IgcHJveHkgYXV0aAogICAgICAgICAgICAgICAgICAgIHByb3h5dXNlciA9IE5vbmUKICAgICAgICAgICAgICAgICAgICBwcm94eXBhc3MgPSBOb25lCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHByb3h5KSA+IDAgYW5kICdAJyBpbiBwcm94eToKICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkgPSBwcm94eS5zcGxpdCgnOicpCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5dXNlciA9IHByb3h5WzBdCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5cGFzcyA9IHByb3h5WzFdLnNwbGl0KCdAJylbMF0KICAgICAgICAgICAgICAgICAgICAgICAgcHJveHlpcCA9IHByb3h5WzFdLnNwbGl0KCdAJylbMV0KICAgICAgICAgICAgICAgICAgICAgICAgcG9ydCA9IHByb3h5WzJdCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJveHlpcCxwb3J0PXByb3h5LnNwbGl0KCc6JykKCiAgICAgICAgICAgICAgICAgICAgcGxheW1lZGlhd2l0aHByb3h5KHVybCxuYW1lLGljb25pbWFnZSxwcm94eWlwLHBvcnQsIHByb3h5dXNlcixwcm94eXBhc3MpICNqYWlyb3gKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcGxheXNldHJlc29sdmVkKHVybCxuYW1lLGljb25pbWFnZSxzZXRyZXNvbHZlZCxyZWdleHMpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJYQk1DLk5vdGlmaWNhdGlvbihGaXJlVFYsRmFpbGVkIHRvIGV4dHJhY3QgcmVnZXguIC0gIisidGhpcyIrIiw0MDAwLCIraWNvbisiKSIpCgplbGlmIG1vZGU9PTE4OgogICAgYWRkb25fbG9nKCJ5b3V0dWJlZGwiKQogICAgdHJ5OgogICAgICAgIGltcG9ydCB5b3V0dWJlZGwKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oRmlyZVRWLFBsZWFzZSBbQ09MT1IgeWVsbG93XWluc3RhbGwgWW91dHViZS1kbFsvQ09MT1JdIG1vZHVsZSAsMTAwMDAsIiIpIikKICAgIHN0cmVhbV91cmw9eW91dHViZWRsLnNpbmdsZV9ZRCh1cmwpCiAgICBwbGF5c2V0cmVzb2x2ZWQoc3RyZWFtX3VybCxuYW1lLGljb25pbWFnZSkKCmVsaWYgbW9kZT09MTk6CiAgICBhZGRvbl9sb2coIkdlbmVzaXNjb21tb25yZXNvbHZlcnMiKQogICAgcGxheXNldHJlc29sdmVkICh1cmxzb2x2ZXIodXJsKSxuYW1lLGljb25pbWFnZSxUcnVlKQoKZWxpZiBtb2RlPT0yMDoKICAgIGFkZG9uX2xvZygic2V0UmVzb2x2ZWRVcmwiKQogICAgaXRlbSA9IHhibWNndWkuTGlzdEl0ZW0ocGF0aD11cmwpCiAgICBpZiAnfCcgaW4gdXJsOgogICAgICAgIHVybCxzdHJoZHIgPSB1cmwuc3BsaXQoJ3wnKQogICAgICAgIGl0ZW0uc2V0UHJvcGVydHkoJ2lucHV0c3RyZWFtLmFkYXB0aXZlLnN0cmVhbV9oZWFkZXJzJywgc3RyaGRyKQogICAgICAgIGl0ZW0uc2V0UGF0aCh1cmwpCiAgICBpZiAnLm0zdTgnIGluIHVybDoKICAgICAgICBpdGVtLnNldFByb3BlcnR5KCdpbnB1dHN0cmVhbWFkZG9uJywgJ2lucHV0c3RyZWFtLmFkYXB0aXZlJykKICAgICAgICBpdGVtLnNldFByb3BlcnR5KCdpbnB1dHN0cmVhbS5hZGFwdGl2ZS5tYW5pZmVzdF90eXBlJywgJ2hscycpCiAgICAgICAgaXRlbS5zZXRNaW1lVHlwZSgnYXBwbGljYXRpb24vdm5kLmFwcGxlLm1wZWdzdHJlYW1fdXJsJykKICAgICAgICBpdGVtLnNldENvbnRlbnRMb29rdXAoRmFsc2UpCiAgIAogICAgZWxpZiAnLm1wZCcgaW4gdXJsOgogICAgICAgIGl0ZW0uc2V0UHJvcGVydHkoJ2lucHV0c3RyZWFtYWRkb24nLCAnaW5wdXRzdHJlYW0uYWRhcHRpdmUnKQogICAgICAgIGl0ZW0uc2V0UHJvcGVydHkoJ2lucHV0c3RyZWFtLmFkYXB0aXZlLm1hbmlmZXN0X3R5cGUnLCAnbXBkJykKICAgICAgICBpdGVtLnNldE1pbWVUeXBlKCdhcHBsaWNhdGlvbi9kYXNoK3htbCcpCiAgICAgICAgaXRlbS5zZXRDb250ZW50TG9va3VwKEZhbHNlKQogICAgCiAgICBlbGlmICcuaXNtJyBpbiB1cmw6CiAgICAgICAgaXRlbS5zZXRQcm9wZXJ0eSgnaW5wdXRzdHJlYW1hZGRvbicsICdpbnB1dHN0cmVhbS5hZGFwdGl2ZScpCiAgICAgICAgaXRlbS5zZXRQcm9wZXJ0eSgnaW5wdXRzdHJlYW0uYWRhcHRpdmUubWFuaWZlc3RfdHlwZScsICdpc20nKQogICAgICAgIGl0ZW0uc2V0TWltZVR5cGUoJ2FwcGxpY2F0aW9uL3ZuZC5tcy1zc3RyK3htbCcpCiAgICAgICAgaXRlbS5zZXRDb250ZW50TG9va3VwKEZhbHNlKQoKICAgIHhibWNwbHVnaW4uc2V0UmVzb2x2ZWRVcmwoaW50KHN5cy5hcmd2WzFdKSwgVHJ1ZSwgaXRlbSkKCmVsaWYgbW9kZT09MjE6CiAgICBhZGRvbl9sb2coImRvd25sb2FkIGN1cnJlbnQgZmlsZSB1c2luZyB5b3V0dWJlLWRsIHNlcnZpY2UiKQogICAgbXR5cGU9J3ZpZGVvJwogICAgaWYgJ1ttcDNdJyBpbiBuYW1lOgogICAgICAgIG10eXBlPSdhdWRpbycKICAgICAgICBuYW1lPW5hbWUucmVwbGFjZSgnW21wM10nLCcnKQogICAgeXRkbF9kb3dubG9hZCgnJyxuYW1lLCBtdHlwZSkKCmVsaWYgbW9kZT09MjI6CiAgICBwcmludCAic2xwcm94eSIKICAgIHRyeToKICAgICAgICBmcm9tIGRzcCBpbXBvcnQgc3RyZWFtbGlua19wcm94eQogICAgICAgIHRyeToKICAgICAgICAgICAgcSA9ICByZS5maW5kYWxsKHInXCRcJFFVQUxJVFk9KFteXCRcJF0rKVwkXCQnLCB1cmwpWzBdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBxID0gJycgaWYgcmUuc2VhcmNoKHInXCRcJFJFU09MVkVPTkxZXCRcJCcsIHVybCkgZWxzZSAnYmVzdCcKICAgICAgICB1cmwgPSByZS5zdWIocidcJFwkUVVBTElUWT0uKj9cJFwkJywgJycsIHVybCkKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIHByeHkgPSAgcmUuZmluZGFsbChyJ1wkXCRIVFRQUFJPWFk9KFteXCRcJF0rKVwkXCQnLCB1cmwpWzBdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcnh5ID0gJycKICAgICAgICB1cmwgPSByZS5zdWIocidcJFwkSFRUUFBST1hZPS4qP1wkXCQnLCAnJywgdXJsKQogICAgICAgIHByeHkgPSAnJyBpZiBwcnh5ID09ICcnIGVsc2UgJyZhbXA7cD0lcyclcHJ4eQoKICAgICAgICBpZiByZS5zZWFyY2gocidcJFwkUkVTT0xWRU9OTFlcJFwkJywgdXJsKToKICAgICAgICAgICAgdXJsID0gcmUuc3ViKHInXCRcJFJFU09MVkVPTkxZXCRcJCcsICcnLCB1cmwpCiAgICAgICAgICAgIHNsUHJveHkgPSBzdHJlYW1saW5rX3Byb3h5LlNMUHJveHlfSGVscGVyKCkKICAgICAgICAgICAgcSA9ICcnIGlmIHEgPT0gJycgZWxzZSAnJmFtcDtxPSVzJyVxCiAgICAgICAgICAgIHVybCA9IHNsUHJveHkucmVzb2x2ZV91cmwodXJsbGliLnF1b3RlKHVybCkrcStwcnh5KQogICAgICAgICAgICBhZGRvbl9sb2coInNldFJlc29sdmVkVXJsIikKICAgICAgICAgICAgbGlzdGl0ZW0gPSB4Ym1jZ3VpLkxpc3RJdGVtKHN0cihuYW1lKSkKICAgICAgICAgICAgbGlzdGl0ZW0uc2V0SW5mbygndmlkZW8nLCB7J1RpdGxlJzogc3RyKG5hbWUpfSkKICAgICAgICAgICAgbGlzdGl0ZW0uc2V0UGF0aCh1cmwpCiAgICAgICAgICAgIHhibWNwbHVnaW4uc2V0UmVzb2x2ZWRVcmwoaW50KHN5cy5hcmd2WzFdKSwgVHJ1ZSwgbGlzdGl0ZW0pCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNsUHJveHkgPSBzdHJlYW1saW5rX3Byb3h5LlNMUHJveHlfSGVscGVyKCkgICAgICAgICAgICAKICAgICAgICAgICAgdXJsID0gdXJsbGliLnF1b3RlKHVybCkrJyZhbXA7cT0lcyclcSArIHByeHkKICAgICAgICAgICAgbGlzdGl0ZW0gPSB4Ym1jZ3VpLkxpc3RJdGVtKHN0cihuYW1lKSkKICAgICAgICAgICAgbGlzdGl0ZW0uc2V0SW5mbygndmlkZW8nLCB7J1RpdGxlJzogc3RyKG5hbWUpfSkKICAgICAgICAgICAgbGlzdGl0ZW0uc2V0UGF0aCh1cmwpICAgICAgICAgCiAgICAgICAgICAgIHNsUHJveHkucGxheVNMaW5rKHVybCwgbGlzdGl0ZW0pCiAgICBleGNlcHQ6CiAgICAgICAgaW1wb3J0IHN5cwogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoZmlsZT1zeXMuc3Rkb3V0KQogICAgICAgIHBhc3MKCmVsaWYgbW9kZT09MjM6CiAgICBhZGRvbl9sb2coImdldCBpbmZvIHRoZW4gZG93bmxvYWQiKQogICAgbXR5cGU9J3ZpZGVvJwogICAgaWYgJ1ttcDNdJyBpbiBuYW1lOgogICAgICAgIG10eXBlPSdhdWRpbycKICAgICAgICBuYW1lPW5hbWUucmVwbGFjZSgnW21wM10nLCcnKQogICAgeXRkbF9kb3dubG9hZCh1cmwsbmFtZSxtdHlwZSkKCmVsaWYgbW9kZT09MjQ6CiAgICBhZGRvbl9sb2coIkF1ZGlvIG9ubHkgeW91dHViZSBkb3dubG9hZCIpCiAgICB5dGRsX2Rvd25sb2FkKHVybCxuYW1lLCdhdWRpbycpCgplbGlmIG1vZGU9PTI1OgogICAgYWRkb25fbG9nKCJTZWFyY2hpbiBPdGhlciBwbHVnaW5zIikKICAgIF9zZWFyY2godXJsLG5hbWUpCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCgplbGlmIG1vZGU9PTU1OgogICAgYWRkb25fbG9nKCJlbmFibGVkIGxvY2siKQogICAgcGFyZW50YWxibG9ja2VkcGluID0gYWRkb24uZ2V0U2V0dGluZygncGFyZW50YWxibG9ja2VkcGluJykKICAgIGtleWJvYXJkID0geGJtYy5LZXlib2FyZCgnJywnRW50ZXIgUGluJykKICAgIGtleWJvYXJkLmRvTW9kYWwoKQogICAgaWYgbm90IChrZXlib2FyZC5pc0NvbmZpcm1lZCgpID09IEZhbHNlKToKICAgICAgICBuZXdTdHIgPSBrZXlib2FyZC5nZXRUZXh0KCkKICAgICAgICBpZiBuZXdTdHI9PXBhcmVudGFsYmxvY2tlZHBpbjoKICAgICAgICAgICAgYWRkb24uc2V0U2V0dGluZygncGFyZW50YWxibG9ja2VkJywgImZhbHNlIikKICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oRmlyZVRWLCB6b25hIHByZW1pdW0gZGVzYWN0aXZhZGEsNTAwMCwiK2ljb24rIikiKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKEZpcmVUViwgQ29kaWdvIGRlIGFjdGl2YWNpb24/LDUwMDAsIitpY29uKyIpIikKICAgIHhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkKICAgIAplbGlmIG1vZGU9PTU2OgogICAgYWRkb25fbG9nKCJkaXNhYmxlIGxvY2siKQogICAgYWRkb24uc2V0U2V0dGluZygncGFyZW50YWxibG9ja2VkJywgInRydWUiKQogICAgeGJtYy5leGVjdXRlYnVpbHRpbigiWEJNQy5Ob3RpZmljYXRpb24oRmlyZVRWLFpvbmEgcHJlbWl1bSBhY3RpdmFkYSw1MDAwLCIraWNvbisiKSIpCiAgICB4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCgplbGlmIG1vZGU9PTUzOgogICAgYWRkb25fbG9nKCJSZXF1ZXN0aW5nIEpTT04tUlBDIEl0ZW1zIikKICAgIHBsdWdpbnF1ZXJ5YnlKU09OKHVybCkKICAgICN4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCgppZiBub3Qgdmlld21vZGU9PU5vbmU6CiAgIHByaW50ICdzZXR0aW5nIHZpZXcgbW9kZScKICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKCVzKSIldmlld21vZGUpCg==')